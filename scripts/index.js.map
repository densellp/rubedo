{
  "version": 3,
  "sources": ["../src/index.ts", "../src/rubedo/lib/Command/index.ts", "../src/rubedo/config/commands.ts", "../src/rubedo/lib/Command/ArgumentTypes.ts", "../src/rubedo/database/Database.ts", "../src/rubedo/config/database.ts", "../src/utils.ts", "../src/rubedo/lib/Events/EntitiesLoad.ts", "../src/vendor/Anti-Cheat/tables.ts", "../src/rubedo/lib/Command/Callback.ts", "../src/rubedo/lib/Command/utils.ts", "../src/rubedo/lib/Chest GUI/index.ts", "../src/rubedo/config/chest.ts", "../src/rubedo/lib/Chest GUI/Models/EntityChest.ts", "../src/rubedo/lib/Events/onSlotChange.ts", "../src/rubedo/lib/Chest GUI/utils.ts", "../src/rubedo/lib/Chest GUI/Models/ItemGrabbedCallback.ts", "../src/rubedo/lib/Chest GUI/Models/PageItem.ts", "../src/rubedo/lib/Chest GUI/Models/FillTypes.ts", "../src/rubedo/lib/Chest GUI/Models/Page.ts", "../src/rubedo/lib/Chest GUI/pages/home.ts", "../src/vendor/Anti-Cheat/utils.ts", "../src/vendor/Anti-Cheat/modules/models/Region.ts", "../src/vendor/Anti-Cheat/config/region.ts", "../src/vendor/Anti-Cheat/modules/models/Task.ts", "../src/vendor/Anti-Cheat/config/moderation.ts", "../src/vendor/Anti-Cheat/config/enchantments.ts", "../src/rubedo/database/index.ts", "../src/rubedo/lib/Containers/index.ts", "../src/rubedo/config/containers.ts", "../src/rubedo/lib/Containers/Container.ts", "../src/vendor/Anti-Cheat/protections.ts", "../src/vendor/Anti-Cheat/modules/models/Ban.ts", "../src/rubedo/lib/Form/Models/MessageForm.ts", "../src/rubedo/lib/Form/utils.ts", "../src/rubedo/lib/Command/Command.ts", "../src/rubedo/lang/text.ts", "../src/vendor/Anti-Cheat/modules/commands/ban.ts", "../src/vendor/Anti-Cheat/modules/commands/database.ts", "../src/vendor/Anti-Cheat/modules/commands/ecwipe.ts", "../src/vendor/Anti-Cheat/modules/models/Freeze.ts", "../src/vendor/Anti-Cheat/modules/commands/freeze.ts", "../src/vendor/Anti-Cheat/modules/commands/help.ts", "../src/vendor/Anti-Cheat/modules/commands/lockdown.ts", "../src/vendor/Anti-Cheat/modules/models/Mute.ts", "../src/vendor/Anti-Cheat/modules/commands/mute.ts", "../src/vendor/Anti-Cheat/modules/commands/npc.ts", "../src/vendor/Anti-Cheat/modules/models/Npc.ts", "../src/vendor/Anti-Cheat/modules/commands/ping.ts", "../src/vendor/Anti-Cheat/modules/commands/region.ts", "../src/vendor/Anti-Cheat/types.ts", "../src/vendor/Anti-Cheat/modules/commands/role.ts", "../src/rubedo/lib/Form/Models/ActionForm.ts", "../src/rubedo/lib/Form/Models/ModelForm.ts", "../src/rubedo/lib/Form/Models/FormCallback.ts", "../src/vendor/Anti-Cheat/modules/forms/settings.ts", "../src/vendor/Anti-Cheat/modules/forms/automod.ts", "../src/vendor/Anti-Cheat/modules/forms/home.ts", "../src/vendor/Anti-Cheat/modules/commands/settings.ts", "../src/vendor/Anti-Cheat/modules/commands/vanish.ts", "../src/rubedo/config/app.ts", "../src/vendor/Anti-Cheat/modules/commands/version.ts", "../src/vendor/Anti-Cheat/modules/commands/kick.ts", "../src/vendor/Anti-Cheat/modules/models/Log.ts", "../src/vendor/Anti-Cheat/modules/commands/log.ts", "../src/vendor/Anti-Cheat/modules/commands/teleport.ts", "../src/rubedo/lib/Events/forEachPlayer.ts", "../src/vendor/Anti-Cheat/modules/managers/ban.ts", "../src/vendor/Anti-Cheat/modules/managers/freeze.ts", "../src/rubedo/lib/Events/beforeChat.ts", "../src/vendor/Anti-Cheat/modules/managers/mute.ts", "../src/vendor/Anti-Cheat/modules/managers/region.ts", "../src/vendor/Anti-Cheat/modules/events/playerSpawn.ts", "../src/vendor/Anti-Cheat/modules/pages/see.ts", "../src/vendor/Anti-Cheat/modules/protections/gamemode.ts", "../src/vendor/Anti-Cheat/modules/models/Protection.ts", "../src/rubedo/database/types/PlayerLog.ts", "../src/vendor/Anti-Cheat/modules/protections/movement.ts", "../src/rubedo/lib/Events/onPlayerMove.ts", "../src/vendor/Anti-Cheat/config/movement.ts", "../src/rubedo/lib/Events/beforeBlockBreak.ts", "../src/vendor/Anti-Cheat/modules/protections/nuker.ts", "../src/vendor/Anti-Cheat/modules/protections/spam.ts", "../src/vendor/Anti-Cheat/modules/events/beforeDataDrivenEntityTriggerEvent.ts", "../src/vendor/Anti-Cheat/modules/events/worldInitialize.ts", "../src/rubedo/config/objectives.ts", "../src/vendor/Anti-Cheat/index.ts", "../src/vendor/import.ts"],
  "sourcesContent": ["import { system } from \"@minecraft/server\";\nimport \"./rubedo/lib/Command/index\";\nimport \"./rubedo/lib/Chest GUI/index\";\nimport \"./rubedo/database/index\";\nimport \"./rubedo/lib/Containers/index\";\nimport \"./vendor/import\";\n\nsystem.events.beforeWatchdogTerminate.subscribe((data) => {\n  data.cancel = true;\n  console.warn(`WATCHDOG TRIED TO CRASH = ${data.terminateReason}`);\n});\n", "import { BeforeChatEvent, world } from \"@minecraft/server\";\r\nimport { PREFIX } from \"../../config/commands\";\r\nimport type { Command } from \"./Command\";\r\nimport {\r\n  commandNotFound,\r\n  commandSyntaxFail,\r\n  getChatAugments,\r\n  noPerm,\r\n  sendCallback,\r\n} from \"./utils\";\r\n\r\n/**\r\n * An array of all active commands\r\n */\r\nexport const COMMANDS: Command<any>[] = [];\r\n\r\nworld.events.beforeChat.subscribe((data) => {\r\n  if (!data.message.startsWith(PREFIX)) return; // This is not a command\r\n  data.cancel = true;\r\n  const args = getChatAugments(data.message, PREFIX);\r\n  const command = COMMANDS.find(\r\n    (c) =>\r\n      c.depth == 0 &&\r\n      (c.data.name == args[0] || c.data?.aliases?.includes(args[0]))\r\n  );\r\n  const event = {\r\n    message: data.message,\r\n    sendToTargets: data.sendToTargets,\r\n    sender: data.sender,\r\n    targets: data.targets,\r\n  } as BeforeChatEvent;\r\n  if (!command) return commandNotFound(data.sender, args[0]);\r\n  if (!command.data?.requires(data.sender))\r\n    return noPerm(event.sender, command);\r\n  args.shift(); // Remove first command so we can look at args\r\n  // Check Args/SubCommands for errors\r\n  const verifiedCommands: Command[] = [];\r\n  const getArg = (start: Command<any>, i: number): string => {\r\n    if (start.children.length > 0) {\r\n      const arg = start.children.find((v) => v.type.matches(args[i]).success);\r\n      if (!arg && !args[i] && start.callback) return;\r\n      if (!arg)\r\n        return commandSyntaxFail(event.sender, command, start, args, i), \"fail\";\r\n      if (!arg.data?.requires(event.sender))\r\n        return noPerm(event.sender, arg), \"fail\";\r\n      verifiedCommands.push(arg);\r\n      return getArg(arg, i + 1);\r\n    }\r\n  };\r\n  let v = getArg(command, 0);\r\n  if (v == \"fail\") return;\r\n  sendCallback(args, verifiedCommands, event, command);\r\n});\r\n", "/*\n|--------------------------------------------------------------------------\n| Command Prefix\n|--------------------------------------------------------------------------\n|\n| This is the prefix of the commands that are send in chat\n| changing this changes what people have to type in before using\n| a command for instance: -help. (-) is the command prefix.\n|\n*/\nexport const PREFIX = \"-\";\n", "import { Player, world } from \"@minecraft/server\";\r\nimport { TABLES } from \"../../../vendor/Anti-Cheat/tables\";\r\n\r\n/**\r\n * Fetch an online players data\r\n */\r\nexport function fetch(playerName: string): Player | null {\r\n  return [...world.getPlayers()].find((player) => player.name === playerName);\r\n}\r\n\r\nexport interface IArgumentReturnData<T> {\r\n  /**\r\n   * If this argument matches the value\r\n   */\r\n  success: boolean;\r\n  /**\r\n   * The parsed value that should be passed in command callback\r\n   * if there is no return type this will be null\r\n   */\r\n  value?: T;\r\n}\r\n\r\nexport abstract class IArgumentType {\r\n  /**\r\n   * The return type\r\n   */\r\n  type: any;\r\n  /**\r\n   * The name that the help for this command will see\r\n   * @example \"string\"\r\n   * @example \"Location\"\r\n   * @example \"int\"\r\n   * @example \"number\"\r\n   * @example \"UnitType\"\r\n   */\r\n  typeName: string;\r\n  /**\r\n   * The name this argument is\r\n   */\r\n  name: string = \"name\";\r\n  /**\r\n   * Checks if a value matches this argument type, also\r\n   * returns the corresponding type\r\n   */\r\n  matches(value: string): IArgumentReturnData<any> {\r\n    return { success: true };\r\n  }\r\n  /**\r\n   * the fail message that should be sent if player fails to meet the matches criteria\r\n   * @param value value that was sent\r\n   * @returns what would happen if you didn't enter the right value\r\n   */\r\n  fail(value: string): string {\r\n    return `Value must be of type string!`;\r\n  }\r\n  constructor(name: string = \"any\") {}\r\n}\r\n\r\nexport class LiteralArgumentType implements IArgumentType {\r\n  type: null;\r\n  typeName = \"literal\";\r\n  matches(value: string): IArgumentReturnData<null> {\r\n    return {\r\n      success: this.name == value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `${value} should be ${this.name}!`;\r\n  }\r\n  constructor(public name: string = \"literal\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class StringArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"string\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: value && value != \"\",\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value must be of type string!`;\r\n  }\r\n  constructor(public name: string = \"string\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class IntegerArgumentType implements IArgumentType {\r\n  type: number;\r\n  typeName = \"int\";\r\n  matches(value: string): IArgumentReturnData<number> {\r\n    return {\r\n      success: !isNaN(value as any),\r\n      value: parseInt(value),\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value must be valid number!`;\r\n  }\r\n  constructor(public name: string = \"integer\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class FloatArgumentType implements IArgumentType {\r\n  type: number;\r\n  typeName = \"float\";\r\n  matches(value: string): IArgumentReturnData<number> {\r\n    return {\r\n      success: Boolean(value?.match(/^\\d+\\.\\d+$/)?.[0]),\r\n      value: parseInt(value),\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value must be valid float!`;\r\n  }\r\n  constructor(public name: string = \"float\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class LocationArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"location\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: /^([~^]{0,1}(-\\d)?(\\d*)?(\\.(\\d+))?)$/.test(value),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value needs to be a valid number, value can include: [~,^]`;\r\n  }\r\n  constructor(public name: string = \"location\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class BooleanArgumentType implements IArgumentType {\r\n  type: boolean;\r\n  typeName = \"boolean\";\r\n  matches(value: string): IArgumentReturnData<boolean> {\r\n    return {\r\n      success: Boolean(value?.match(/^(true|false)$/)?.[0]),\r\n      value: value == \"true\" ? true : false,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `\"${value}\" can be either \"true\" or \"false\"`;\r\n  }\r\n  constructor(public name: string = \"boolean\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class PlayerArgumentType implements IArgumentType {\r\n  type: Player;\r\n  typeName = \"Player\";\r\n  matches(value: string): IArgumentReturnData<Player> {\r\n    return {\r\n      success: fetch(value) ? true : false,\r\n      value: fetch(value),\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `player: \"${value}\", is not in this world`;\r\n  }\r\n  constructor(public name: string = \"player\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class TargetArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"Target\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: Boolean(value?.match(/^(@.|\"[\\s\\S]+\")$/)?.[0]),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `${value} is not a valid target`;\r\n  }\r\n  constructor(public name: string = \"target\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class ArrayArgumentType<T extends ReadonlyArray<string>>\r\n  implements IArgumentType\r\n{\r\n  type: T[number];\r\n  typeName = \"string\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: this.types.includes(value),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `\"${value}\" must be one of these values: ${this.types.join(\" | \")}`;\r\n  }\r\n  constructor(public name: string = \"array\", public types: T) {\r\n    this.name = name;\r\n    this.types = types;\r\n\r\n    this.typeName = types.join(\" | \").replace(/(.{25})..+/, \"$1...\");\r\n  }\r\n}\r\n\r\nexport class DurationArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"Duration\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: /^(\\d+[hdysmw],?)+$/.test(value),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `\"${value}\" must be a value like \"10d\" or \"3s\" the first part is the length second is unit`;\r\n  }\r\n  constructor(public name: string) {}\r\n}\r\n\r\nexport class PlayerNameArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"playerName\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    const player = TABLES.ids.get(value);\r\n    return {\r\n      success: player ? true : false,\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `player: \"${value}\" has never played this world before! Tip: if the name has spaces in it use quotes around name!`;\r\n  }\r\n  constructor(public name: string = \"playerName\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport const ArgumentTypes = {\r\n  string: StringArgumentType,\r\n  int: IntegerArgumentType,\r\n  float: FloatArgumentType,\r\n  location: LocationArgumentType,\r\n  boolean: BooleanArgumentType,\r\n  player: PlayerArgumentType,\r\n  target: TargetArgumentType,\r\n  array: ArrayArgumentType,\r\n  duration: DurationArgumentType,\r\n  playerName: PlayerNameArgumentType,\r\n};\r\n", "import { Entity, ItemStack, MinecraftItemTypes } from \"@minecraft/server\";\nimport {\n  ENTITY_IDENTIFIER,\n  ENTITY_LOCATION,\n  INVENTORY_SIZE,\n  MAX_DATABASE_STRING_SIZE,\n  MAX_LORE_ARRAY_SIZE,\n} from \"../config/database\";\nimport { DIMENSIONS, splitString } from \"../../utils\";\nimport { EntitiesLoad } from \"../lib/Events/EntitiesLoad\";\n\nexport class Database<Key extends string = string, Value = {}> {\n  /**\n   * Creates a table entity that is used for data storage\n   * @param tableName\n   * @param index if not specified no index will be set\n   * @returns\n   */\n  static createTableEntity(tableName: string, index?: number): Entity {\n    const entity = DIMENSIONS.overworld.spawnEntity(\n      ENTITY_IDENTIFIER,\n      ENTITY_LOCATION\n    );\n    entity.setDynamicProperty(\"tableName\", tableName);\n    entity.nameTag = `\u00A7aDatabase Table: ${tableName}\u00A7r`;\n    if (index) entity.setDynamicProperty(\"index\", index);\n    return entity;\n  }\n\n  /**\n   * Gets all table Entities associated with this tableName\n   * @param tableName\n   * @returns\n   */\n  static getTableEntities(tableName: string): Entity[] {\n    return DIMENSIONS.overworld\n      .getEntitiesAtBlockLocation(ENTITY_LOCATION)\n      .filter(\n        (e) =>\n          e.typeId == ENTITY_IDENTIFIER &&\n          e.getDynamicProperty(\"tableName\") == tableName\n      );\n  }\n\n  /**\n   * Despawn's all database entities\n   */\n  static despawnTableEntities() {\n    return DIMENSIONS.overworld\n      .getEntitiesAtBlockLocation(ENTITY_LOCATION)\n      .map((e) => e.triggerEvent(\"despawn\"));\n  }\n\n  /**\n   * Data saved in memory\n   */\n  private MEMORY: { [key in Key]: Value };\n\n  /**\n   * List of queued tasks on this table\n   */\n  private QUEUE: Array<() => void>;\n\n  private onLoadCallback: (data: Database[\"MEMORY\"]) => void;\n\n  /**\n   * Creates a new instance of the Database\n   * @param tableName - The name of the table\n   */\n  constructor(public tableName: string) {\n    this.tableName = tableName;\n    this.MEMORY = null;\n    this.QUEUE = [];\n    this.onLoadCallback = null;\n    EntitiesLoad.subscribe(async () => {\n      const data = await this.initData();\n      this.onLoadCallback(data);\n      this.QUEUE.forEach((v) => v());\n    });\n  }\n\n  /**\n   * Adds a queue task to be awaited\n   * @returns once its this items time to run in queue\n   */\n  private async addQueueTask(): Promise<void> {\n    return new Promise((resolve) => {\n      this.QUEUE.push(resolve);\n    });\n  }\n\n  /**\n   * Saves data into this database\n   * @returns once data is saved to the database entities\n   */\n  private async saveData(): Promise<void> {\n    if (!this.MEMORY) await this.addQueueTask();\n    let entities = Database.getTableEntities(this.tableName);\n    let chunks = splitString(\n      JSON.stringify(this.MEMORY),\n      MAX_DATABASE_STRING_SIZE,\n      MAX_LORE_ARRAY_SIZE\n    );\n    const entitiesNeeded =\n      Math.ceil(chunks.length / INVENTORY_SIZE) - entities.length;\n    if (entitiesNeeded > 0) {\n      for (let i = 0; i < entitiesNeeded; i++) {\n        entities.push(Database.createTableEntity(this.tableName));\n      }\n    }\n    let savedChunks = 0;\n    let i = 0;\n    while (savedChunks < chunks.length) {\n      const entity = entities[i];\n      if (!entity) continue;\n      const inventory = entity.getComponent(\"inventory\").container;\n      inventory.clearAll();\n      for (let j = 0; j < inventory.size && savedChunks < chunks.length; j++) {\n        const chunk = chunks[savedChunks];\n        let item = new ItemStack(MinecraftItemTypes.acaciaBoat);\n        item.setLore(chunk);\n        inventory.setItem(j, item);\n        savedChunks++;\n      }\n      entity.setDynamicProperty(\"index\", i);\n      i++;\n    }\n    entities.slice(i).forEach((e) => e?.triggerEvent(\"despawn\"));\n  }\n\n  /**\n   * Grabs Data and should only be used on worldLoad\n   * @returns {Promise<{ [key in Key]: Value }>} The parsed data.\n   */\n  private async initData(): Promise<{ [key in Key]: Value }> {\n    let entities = Database.getTableEntities(this.tableName).sort(\n      (a, b) =>\n        (a.getDynamicProperty(\"index\") as number) -\n        (b.getDynamicProperty(\"index\") as number)\n    );\n    if (entities.length == 0) {\n      console.warn(\n        `[Database-Warning]: No data found for table ${this.tableName}!`\n      );\n    }\n    const stringifiedData: string[] = [];\n    for (const entity of entities) {\n      const inventory = entity.getComponent(\"inventory\").container;\n      for (let i = 0; i < inventory.size; i++) {\n        const item = inventory.getItem(i);\n        if (item) stringifiedData.push(...item.getLore());\n      }\n    }\n    this.MEMORY = JSON.parse(stringifiedData.join(\"\") || \"{}\");\n    console.warn(`table ${this.tableName} memor ${this.MEMORY}`);\n    return this.MEMORY;\n  }\n\n  /**\n   * Sends a callback once this database has initiated data\n   * @param callback\n   */\n  async onLoad(callback: Database[\"onLoadCallback\"]) {\n    this.onLoadCallback = callback;\n  }\n\n  /**\n   * Sets the specified `key` to the given `value` in the database table.\n   * @param key - Key to store the value in.\n   * @param value - The value to store for the specified key.\n   * @returns A promise that resolves once the value has been saved in the database table.\n   */\n  async set(key: Key, value: Value): Promise<void> {\n    this.MEMORY[key] = value;\n    return this.saveData();\n  }\n\n  /**\n   * Gets a value from this table\n   * @param {Key} key - The key to retrieve the value for.\n   * @returns the value associated with the given key in the database table.\n   */\n  get(key: Key): Value {\n    if (!this.MEMORY)\n      throw new Error(\n        \"Entities not loaded! Consider using `getAsync` instead!\"\n      );\n    return this.MEMORY[key];\n  }\n\n  /**\n   * Gets a value asynchronously from the database table.\n   * @param {Key} key - The key to retrieve the value for.\n   * @returns {Promise<Value>} A Promise that resolves to the value associated with the given key in the database table.\n   */\n  async getSync(key: Key): Promise<Value> {\n    if (this.MEMORY) return this.get(key);\n    await this.addQueueTask();\n    return this.MEMORY[key];\n  }\n\n  /**\n   * Get all the keys in the table\n   * @returns {Key[]} the keys on this table\n   */\n  keys(): Key[] {\n    if (!this.MEMORY)\n      throw new Error(\n        \"Entities not loaded! Consider using `keysSync` instead!\"\n      );\n    return Object.keys(this.MEMORY) as Key[];\n  }\n\n  /**\n   * Get all the keys in the table async, this should be used on world load\n   * @returns {Promise<Key[]>} the keys on this table\n   */\n  async keysSync(): Promise<Key[]> {\n    if (this.MEMORY) return this.keys();\n    await this.addQueueTask();\n    return Object.keys(this.MEMORY) as Key[];\n  }\n\n  /**\n   * Get all the values in the table\n   * @returns {Value[]} values in this table\n   */\n  values(): Value[] {\n    if (!this.MEMORY)\n      throw new Error(\n        \"Entities not loaded! Consider using `valuesSync` instead!\"\n      );\n    return Object.values(this.MEMORY) as Value[];\n  }\n\n  /**\n   * Get all the values in the table async, this should be used on world load\n   * @returns {Promise<Value[]>} the values on this table\n   */\n  async valuesSync(): Promise<Value[]> {\n    if (this.MEMORY) return this.values();\n    await this.addQueueTask();\n    return Object.values(this.MEMORY) as Value[];\n  }\n\n  /**\n   * Check if the key exists in the table\n   * @param {Key} key the key to test\n   * @returns {boolean} if this key exists on this table\n   */\n  has(key: Key): boolean {\n    if (!this.MEMORY)\n      throw new Error(\"Entities not loaded! Consider using `hasSync` instead!\");\n    return (Object.keys(this.MEMORY) as Key[]).includes(key);\n  }\n\n  /**\n   * Check if the key exists in the table async\n   * @param {Key} key the key to test\n   * @returns {Promise<boolean>} if this table contains this key.\n   */\n  async hasSync(key: Key): Promise<boolean> {\n    if (this.MEMORY) return this.has(key);\n    await this.addQueueTask();\n    return (Object.keys(this.MEMORY) as Key[]).includes(key);\n  }\n\n  /**\n   * Gets all the keys and values\n   * @returns { [key in Key]: Value } The collection data.\n   */\n  collection(): { [key in Key]: Value } {\n    if (!this.MEMORY)\n      throw new Error(\n        \"Entities not loaded! Consider using `collectionSync` instead!\"\n      );\n    return this.MEMORY;\n  }\n\n  /**\n   * Gets all the keys and values async, this should be used for grabbingCollection on world load\n   * @returns {Promise<{ [key in Key]: Value }>} The collection data.\n   */\n  async collectionSync(): Promise<{ [key in Key]: Value }> {\n    if (this.MEMORY) return this.collection();\n    await this.addQueueTask();\n    return this.MEMORY;\n  }\n\n  /**\n   * Delete a key from this table\n   * @param key the key to delete\n   * @returns if the deletion was successful\n   */\n  async delete(key: Key): Promise<boolean> {\n    const status = delete this.MEMORY[key];\n    await this.saveData();\n    return status;\n  }\n\n  /**\n   * Clear everything in the table\n   * @returns once this table has been cleared\n   */\n  async clear(): Promise<void> {\n    this.MEMORY = {} as { [key in Key]: Value };\n    return await this.saveData();\n  }\n}\n", "import { BlockLocation } from \"@minecraft/server\";\n\n/*\n|--------------------------------------------------------------------------\n| Max Database string size\n|--------------------------------------------------------------------------\n|\n| Here is the max database save size meaning when a save gets made\n| it tests the size of that save and splits up the save depending on this\n| Size. It's related to Minecraft's 32k bit limit.\n|\n*/\nexport const MAX_DATABASE_STRING_SIZE = 32000;\n\n/*\n|--------------------------------------------------------------------------\n| Max Lore Array Size\n|--------------------------------------------------------------------------\n|\n| Here is the max database lore size meaning when a save gets made\n| it tests the size of that lore array is bigger than this then splits up\n| the length. It's related to int32 NBT storage of lists.\n|\n*/\nexport const MAX_LORE_ARRAY_SIZE = 2000000;\n\n/*\n|--------------------------------------------------------------------------\n| Entity Id\n|--------------------------------------------------------------------------\n|\n| This is the entity id of the database this is what stores the information\n| of the database on its nameTag\n|\n*/\nexport const ENTITY_IDENTIFIER = \"database:database\";\n\n/*\n|--------------------------------------------------------------------------\n| Entity Spawn Location\n|--------------------------------------------------------------------------\n|\n| This is the spawn location of the database entities there will be\n| Multiple entities at this location for each chunk\n|\n*/\nexport const ENTITY_LOCATION = new BlockLocation(0, -64, 0);\n\n/*\n|--------------------------------------------------------------------------\n| Entity's INVENTORY_SIZE\n|--------------------------------------------------------------------------\n|\n| The max amount of items this entity can store in its inventory\n|\n*/\nexport const INVENTORY_SIZE = 128;\n\n/*\n|--------------------------------------------------------------------------\n| Back Up Name\n|--------------------------------------------------------------------------\n|\n| The structure file name for the backed up data in this database\n|\n*/\nexport const BACKUP_NAME = \"database:entities\";\n", "import {\r\n  BlockLocation,\r\n  Entity,\r\n  Location,\r\n  MinecraftDimensionTypes,\r\n  system,\r\n  Vector3,\r\n  world,\r\n} from \"@minecraft/server\";\r\n\r\n/**\r\n * This is to reduce lag when grabbing dimensions keep them set and pre-defined\r\n */\r\nexport const DIMENSIONS = {\r\n  overworld: world.getDimension(MinecraftDimensionTypes.overworld),\r\n  nether: world.getDimension(MinecraftDimensionTypes.nether),\r\n  theEnd: world.getDimension(MinecraftDimensionTypes.theEnd),\r\n  \"minecraft:overworld\": world.getDimension(MinecraftDimensionTypes.overworld),\r\n  \"minecraft:nether\": world.getDimension(MinecraftDimensionTypes.nether),\r\n  \"minecraft:the_end\": world.getDimension(MinecraftDimensionTypes.theEnd),\r\n};\r\n\r\n/**\r\n * Get score of an entity\r\n * @example getScore(Entity, 'Money');\r\n */\r\nexport function getScore(entity: Entity, objective: string): number {\r\n  try {\r\n    return world.scoreboard.getObjective(objective).getScore(entity.scoreboard);\r\n  } catch (error) {\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * sets the score of a name\r\n * @example setScore(\"Smell of curry\", 'Money');\r\n */\r\nexport function setScore(\r\n  entityName: string,\r\n  objective: string,\r\n  value: Number\r\n): void {\r\n  try {\r\n    DIMENSIONS.overworld.runCommandAsync(\r\n      `scoreboard players set \"${entityName}\" ${objective} ${value}`\r\n    );\r\n  } catch (error) {\r\n    console.warn(error + error.stack);\r\n  }\r\n}\r\n\r\n/**\r\n * Duration converter\r\n * @param duration time to convert\r\n * @example ```\r\n * durationToMs(\"10s\")\r\n * durationToMs(\"10d,2y\")\r\n * durationToMs(\"5m\")\r\n * durationToMs(\"23ms,10s\")\r\n * ```\r\n */\r\nconst durations: { [unit: string]: number } = {\r\n  y: 3.17098e-11,\r\n  w: 6.048e8,\r\n  d: 8.64e7,\r\n  h: 3.6e6,\r\n  m: 60000,\r\n  s: 1000,\r\n  ms: 1,\r\n};\r\n\r\nexport function durationToMs(duration: string): number {\r\n  const values: string[] = duration.split(\",\");\r\n  let ms = 0;\r\n  for (const value of values) {\r\n    const length = parseInt(value.match(/\\d+/)[0]);\r\n    const unit = value.match(/[a-zA-Z]+/)[0];\r\n    if (!durations[unit]) {\r\n      throw new Error(`Invalid duration unit: ${unit}`);\r\n    }\r\n    ms += durations[unit] * length;\r\n  }\r\n  return ms;\r\n}\r\n\r\n/**\r\n * Converts a date stored in ms to a Date string\r\n * @param duration milliseconds to convert\r\n * @returns Date as a string\r\n */\r\nexport function msToTime(duration: number) {\r\n  return new Date(duration).toString();\r\n}\r\n\r\n/**\r\n * Converts a location to a block location\r\n */\r\nexport function vector3ToBlockLocation(loc: Vector3): BlockLocation {\r\n  return new BlockLocation(\r\n    Math.floor(loc.x),\r\n    Math.floor(loc.y),\r\n    Math.floor(loc.z)\r\n  );\r\n}\r\n\r\n/**\r\n * Sleeps your code\r\n * @param {number} tick time in ticks you want the return to occur\r\n * @returns {Promise<void>}\r\n */\r\nexport function sleep(tick: number): Promise<void> {\r\n  return new Promise((resolve) => {\r\n    let runScheduleId = system.runSchedule(() => {\r\n      resolve();\r\n      system.clearRunSchedule(runScheduleId);\r\n    }, tick);\r\n  });\r\n}\r\n\r\n/**\r\n * Checks if a location equals another location\r\n * @param a first location\r\n * @param b location to test against first\r\n * @returns {boolean} if they locations are the same\r\n */\r\nexport function LocationEquals(\r\n  a: Vector3 | Location | BlockLocation,\r\n  b: Vector3 | Location | BlockLocation\r\n): boolean {\r\n  if (a instanceof BlockLocation || b instanceof BlockLocation) {\r\n    return ~~a.x === ~~b.x && ~~a.y === ~~b.y && ~~a.z === ~~b.z;\r\n  }\r\n  return a.x === b.x && a.y === b.y && a.z === b.z;\r\n}\r\n\r\n/**\r\n * Sorts 3D vectors to a min and max vector\r\n * @param vector1\r\n * @param vector2\r\n * @returns {[Vector3, Vector3]}\r\n */\r\nexport function sort3DVectors(\r\n  vector1: Vector3,\r\n  vector2: Vector3\r\n): [Vector3, Vector3] {\r\n  [vector1.x, vector2.x] = [\r\n    Math.min(vector1.x, vector2.x),\r\n    Math.max(vector1.x, vector2.x),\r\n  ];\r\n  [vector1.y, vector2.y] = [\r\n    Math.min(vector1.y, vector2.y),\r\n    Math.max(vector1.y, vector2.y),\r\n  ];\r\n  [vector1.z, vector2.z] = [\r\n    Math.min(vector1.z, vector2.z),\r\n    Math.max(vector1.z, vector2.z),\r\n  ];\r\n  return [vector1, vector2];\r\n}\r\n/**\r\n * Checks if a target vector is between two vectors\r\n * @param target\r\n * @param vector1\r\n * @param vector2\r\n * @returns\r\n */\r\nexport function betweenVector3(\r\n  target: Vector3,\r\n  vector1: Vector3,\r\n  vector2: Vector3\r\n): boolean {\r\n  const [minVector, maxVector] = sort3DVectors(vector1, vector2);\r\n  const { x, y, z } = target;\r\n  return (\r\n    x >= minVector.x &&\r\n    x <= maxVector.x &&\r\n    y >= minVector.y &&\r\n    y <= maxVector.y &&\r\n    z >= minVector.z &&\r\n    z <= maxVector.z\r\n  );\r\n}\r\n\r\n/**\r\n * Splits a string into chunk sizes\r\n */\r\nexport function chunkString(str: string, length: number): string[] {\r\n  return str.match(new RegExp(\".{1,\" + length + \"}\", \"g\"));\r\n}\r\n\r\n/**\r\n * Splits a string into an array of arrays of strings with a maximum length of 32767 characters per string in the innermost array.\r\n * @param str The input string to split.\r\n * @param maxLength Max Length of the 1st array\r\n * @param subArraysMaxLength Max Length of the strings in the 2d array\r\n * @returns A two-dimensional array of strings, where each inner array has a maximum length of 2147483647.\r\n */\r\nexport function splitString(\r\n  str: string,\r\n  maxLength: number,\r\n  subArraysMaxLength: number\r\n): string[][] {\r\n  const subStrings: string[] = [];\r\n  for (let i = 0; i < str.length; i += maxLength) {\r\n    subStrings.push(str.slice(i, i + maxLength));\r\n  }\r\n\r\n  const subArrays: string[][] = [];\r\n  for (const subString of subStrings) {\r\n    subArrays.push(\r\n      Array.from(\r\n        { length: Math.ceil(subString.length / subArraysMaxLength) },\r\n        (_, i) =>\r\n          subString.slice(i * subArraysMaxLength, (i + 1) * subArraysMaxLength)\r\n      )\r\n    );\r\n  }\r\n\r\n  return subArrays;\r\n}", "import { system, world } from \"@minecraft/server\";\r\nimport { DIMENSIONS } from \"../../../utils\";\r\n\r\n/**\r\n * Callbacks that are called when the entities are loaded\r\n */\r\nconst CALLBACKS: {\r\n  [key: number]: () => void;\r\n} = {};\r\n\r\n/**\r\n * If the world is loaded or not\r\n */\r\nexport let ENTITIES_LOADED = false;\r\n\r\n/**\r\n * Sets the world as loaded in, meaning entities are now able to be grabbed\r\n */\r\nfunction setEntitiesLoaded() {\r\n  ENTITIES_LOADED = true;\r\n  for (const [i, callback] of Object.entries(CALLBACKS)) {\r\n    callback();\r\n    delete CALLBACKS[i as unknown as number];\r\n  }\r\n}\r\n\r\nsystem.run(async () => {\r\n  try {\r\n    await DIMENSIONS.overworld.runCommandAsync(`testfor @a`);\r\n    setEntitiesLoaded();\r\n  } catch (error) {\r\n    let e = world.events.playerSpawn.subscribe(() => {\r\n      setEntitiesLoaded();\r\n      world.events.playerSpawn.unsubscribe(e);\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * Class that exposes methods to subscribe to or wait for entities to be loaded.\r\n */\r\nexport class EntitiesLoad {\r\n  /**\r\n   * Returns a Promise that resolves when the entities are loaded.\r\n   * @returns {Promise<void>} A Promise that resolves when the entities are loaded.\r\n   */\r\n  static async awaitLoad(): Promise<void> {\r\n    if (ENTITIES_LOADED) return;\r\n    return new Promise((resolve) => {\r\n      EntitiesLoad.subscribe(resolve);\r\n    });\r\n  }\r\n  /**\r\n   * Subscribe a callback to be called when the entities are loaded.\r\n   * @param {() => void} callback The function to be called when the entities are loaded.\r\n   * @returns {number} The key associated with this subscription.\r\n   */\r\n  static subscribe(callback: () => void): number {\r\n    const key = Object.keys(CALLBACKS).length;\r\n    if (ENTITIES_LOADED) {\r\n      callback();\r\n      return key;\r\n    }\r\n    CALLBACKS[key] = callback;\r\n    return key;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe a callback from being called when the entities are loaded.\r\n   * @param {number} key The key associated with the subscription to be unsubscribed.\r\n   */\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n", "import { Database } from \"../../rubedo/database/Database\";\r\nimport {\r\n  IBanData,\r\n  IFreezeData,\r\n  IMuteData,\r\n  INpcLocation,\r\n  IProtectionsConfig,\r\n  IRegionDB,\r\n  LogData,\r\n  ROLES,\r\n} from \"./types\";\r\n\r\nexport const TABLES = {\r\n  config: new Database<string, any>(\"config\"),\r\n  freezes: new Database<string, IFreezeData>(\"freezes\"),\r\n  mutes: new Database<string, IMuteData>(\"mutes\"),\r\n  bans: new Database<string, IBanData>(\"bans\"),\r\n  regions: new Database<string, IRegionDB>(\"regions\"),\r\n  roles: new Database<string, keyof typeof ROLES>(\"roles\"),\r\n  tasks: new Database<string, any>(\"tasks\"),\r\n  npcs: new Database<string, INpcLocation>(\"npcs\"),\r\n  ids: new Database<string, string>(\"ids\"),\r\n  logs: new Database<string, LogData>(\"logs\"),\r\n  protections: new Database<string, IProtectionsConfig>(\"protections\"),\r\n};\r\n", "import { BeforeChatEvent, Player } from \"@minecraft/server\";\r\n\r\nexport class CommandCallback {\r\n  data: BeforeChatEvent;\r\n  sender: Player;\r\n\r\n  /**\r\n   * Returns a commands callback\r\n   * @param data chat data that was used\r\n   */\r\n  constructor(data: BeforeChatEvent) {\r\n    this.data = data;\r\n    this.sender = data.sender;\r\n  }\r\n  /**\r\n   * Replies to the sender of a command callback\r\n   * @param text Message or a lang code\r\n   * @example ctx.reply('Hello World!');\r\n   */\r\n  reply(text: string) {\r\n    this.sender.tell(text);\r\n  }\r\n}\r\n", "import { BeforeChatEvent, Player, Vector3 } from \"@minecraft/server\";\nimport { PREFIX } from \"../../config/commands\";\nimport { LiteralArgumentType, LocationArgumentType } from \"./ArgumentTypes\";\nimport { CommandCallback } from \"./Callback\";\nimport type { Command } from \"./Command\";\n\n/**\n * Returns a Before chat events augments\n * @example this.getChatAugments(BeforeChatEvent)\n */\nexport function getChatAugments(\n  message: string,\n  prefix: string\n): Array<string> {\n  try {\n    return message\n      .slice(prefix.length)\n      .trim()\n      .match(/\"[^\"]+\"|[^\\s]+/g)\n      .map((e) => e.replace(/\"(.+)\"/, \"$1\").toString());\n  } catch (error) {\n    return [];\n  }\n}\n\n/**\n * Sends a command not found message to a player\n * @param player player to send message to\n */\nexport function commandNotFound(player: Player, command: string) {\n  player.tell({\n    rawtext: [\n      {\n        text: `\u00A7c`,\n      },\n      {\n        translate: `commands.generic.unknown`,\n        with: [`${command}`],\n      },\n    ],\n  });\n}\n\n/**\n * Sends a command not found message to a player\n * @param player player to send message to\n */\nexport function noPerm(player: Player, command: Command) {\n  player.tell({\n    rawtext: [\n      {\n        text: command.data.invalidPermission\n          ? command.data.invalidPermission\n          : `\u00A7cYou do not have permission to use \"${command.data.name}\"`,\n      },\n    ],\n  });\n}\n\n/**\n * Sends a syntax failure message to player\n * @param player\n * @param command\n * @param args\n * @param i\n */\nexport function commandSyntaxFail(\n  player: Player,\n  baseCommand: Command,\n  command: Command,\n  args: string[],\n  i: number\n) {\n  player.tell({\n    rawtext: [\n      {\n        text: `\u00A7c`,\n      },\n      {\n        translate: `commands.generic.syntax`,\n        with: [\n          `${PREFIX}${baseCommand.data.name} ${args.slice(0, i).join(\" \")}`,\n          args[i] ?? \" \",\n          args.slice(i + 1).join(\" \"),\n        ],\n      },\n    ],\n  });\n  if (command.children.length > 1 || !args[i]) {\n    // this type could be many things\n    const types = command.children.map((c) =>\n      c.type instanceof LiteralArgumentType ? c.type.name : c.type?.typeName\n    );\n    player.tell(\n      `\u00A7c\"${args[i] ?? \"undefined\"}\" is not valid! Argument \"${\n        [...new Set(command.children.map((c) => c.type.name))][0]\n      }\" can be typeof: \"${types.join('\", \"')}\"`\n    );\n  } else {\n    // this type is only 1 thing\n    player.tell(`\u00A7c${command.children[0]?.type?.fail(args[i])}`);\n  }\n}\n\n/**\n * Returns a location of the inputted argument\n * @example parseLocationArgs([\"~1\", \"3\", \"^7\"], { location: [1,2,3] , viewVector: [1,2,3] })\n */\nexport function parseLocationArgs(\n  [x, y, z]: [x: string, y: string, z: string],\n  { location, viewDirection }: { location: Vector3; viewDirection: Vector3 }\n): Vector3 {\n  if (!x || !y || !x) return null;\n  const locations = [location.x, location.y, location.z];\n  const viewVectors = [viewDirection.x, viewDirection.y, viewDirection.z];\n  const a = [x, y, z].map((arg) => {\n    const r = parseFloat(arg);\n    return isNaN(r) ? 0 : r;\n  });\n  const b = [x, y, z].map((arg, index) => {\n    return arg.includes(\"~\")\n      ? a[index] + locations[index]\n      : arg.includes(\"^\")\n      ? a[index] + viewVectors[index]\n      : a[index];\n  });\n  return { x: b[0], y: b[1], z: b[2] };\n}\n\n/**\n * Sends a callback back to the command\n * @param cmdArgs the args that the command used\n * @param args args to use\n */\nexport function sendCallback(\n  cmdArgs: string[],\n  args: Command<any>[],\n  event: BeforeChatEvent,\n  baseCommand: Command<any>\n) {\n  const lastArg = args[args.length - 1] ?? baseCommand;\n  const argsToReturn: any[] = [];\n  for (const [i, arg] of args.entries()) {\n    if (arg.type.name.endsWith(\"*\")) continue;\n    if (arg.type instanceof LocationArgumentType) {\n      argsToReturn.push(\n        parseLocationArgs(\n          [cmdArgs[i], cmdArgs[i + 1], cmdArgs[i + 2]],\n          event.sender\n        )\n      );\n      continue;\n    }\n    if (arg.type instanceof LiteralArgumentType) continue;\n    argsToReturn.push(arg.type.matches(cmdArgs[i]).value ?? cmdArgs[i]);\n  }\n  lastArg.callback(new CommandCallback(event), ...argsToReturn);\n}\n", "import {\r\n  ItemStack,\r\n  MinecraftItemTypes,\r\n  system,\r\n  world,\r\n} from \"@minecraft/server\";\r\nimport { ENTITY_INVENTORY, GUI_ITEM } from \"../../config/chest\";\r\nimport { ChestGUI } from \"./Models/EntityChest\";\r\nimport { CHESTGUIS, getHeldItem } from \"./utils.js\";\r\nimport \"./pages/home\";\r\nimport { DIMENSIONS } from \"../../../utils.js\";\r\nimport { EntitiesLoad } from \"../Events/EntitiesLoad\";\r\nimport { getRole } from \"../../../vendor/Anti-Cheat/utils\";\r\n\r\nexport const AIR = new ItemStack(MinecraftItemTypes.acaciaBoat, 0);\r\n\r\nEntitiesLoad.subscribe(() => {\r\n  system.runSchedule(() => {\r\n    for (const player of world.getPlayers()) {\r\n      /**\r\n       * Loop through all players, check if player has a chest gui\r\n       * if not create them one\r\n       * Once all players are checked verify there are no false entities\r\n       */\r\n      if (getHeldItem(player)?.typeId != GUI_ITEM) {\r\n        if (CHESTGUIS[player.name]) CHESTGUIS[player.name].despawn();\r\n        continue;\r\n      }\r\n      // Player has a item Held we need to verify that they have a gui\r\n      if (Object.keys(CHESTGUIS).includes(player?.name)) continue;\r\n      // Player does not have a chest gui spawn them in one\r\n      if (getRole(player) != \"admin\") continue;\r\n      CHESTGUIS[player.name] = new ChestGUI(player);\r\n    }\r\n  }, 10);\r\n});\r\n\r\n/**\r\n * This system will detect false entities and kill them to\r\n * reduce lag and eliminate broken/left players/entities\r\n */\r\nsystem.runSchedule(() => {\r\n  const validIds = Object.values(CHESTGUIS).map((c) => c.entity.id);\r\n  for (const entity of DIMENSIONS.overworld.getEntities({\r\n    type: ENTITY_INVENTORY,\r\n  })) {\r\n    if (validIds.includes(entity.id)) continue;\r\n    // This entity is not valid so we despawn it\r\n    entity.triggerEvent(\"despawn\");\r\n  }\r\n}, 100);\r\n", "/*\n|--------------------------------------------------------------------------\n| Gui item\n|--------------------------------------------------------------------------\n|\n| This is the GUI item that is used to open up the gui\n| this is set to the identifier of item.json and is used to find the item\n| in the gui template\n|\n*/\nexport const GUI_ITEM = \"rubedo:gui\";\n\n/*\n|--------------------------------------------------------------------------\n| Entity Inventory\n|--------------------------------------------------------------------------\n|\n| The id of the entity inventory\n| this is found in the entities file\n| this will be updated if inventory entity is changed\n|\n*/\nexport const ENTITY_INVENTORY = \"rubedo:inventory\";\n\n/*\n|--------------------------------------------------------------------------\n| Default Static Page id\n|--------------------------------------------------------------------------\n|\n| This is the default static page id of what is open by default\n| when you click on the gui, this can be changed but it probably shouldn't\n| because static pages will need to be changed\n|\n*/\nexport const DEFAULT_STATIC_PAGE_ID = \"home\";\n", "import { Entity, Player, system } from \"@minecraft/server\";\r\nimport { AIR } from \"../index\";\r\nimport { ENTITY_INVENTORY } from \"../../../config/chest\";\r\nimport {\r\n  ISlotChangeReturn,\r\n  onEntityInventorySlotChange,\r\n} from \"../../Events/onSlotChange\";\r\nimport {\r\n  CHESTGUIS,\r\n  clearPlayersPointer,\r\n  getItemAtSlot,\r\n  PAGES,\r\n} from \"../utils.js\";\r\nimport { ItemGrabbedCallback } from \"./ItemGrabbedCallback\";\r\nimport { ISlot, Page } from \"./Page.js\";\r\n\r\nexport class ChestGUI {\r\n  /**\r\n   * The connected player to this gui\r\n   */\r\n  player: Player;\r\n  /**\r\n   * The entity that this chest gui is associated to\r\n   */\r\n  entity: Entity;\r\n  /**\r\n   * The event that is registered on this gui\r\n   */\r\n  runScheduleId: number;\r\n\r\n  /**\r\n   * The page that this gui is currently viewing\r\n   */\r\n  page: Page;\r\n\r\n  /**\r\n   * The event that is used to test for changes in inventory\r\n   */\r\n  slotChangeEvent: number;\r\n\r\n  /**\r\n   * if the player has a chest open\r\n   */\r\n  hasChestOpen: boolean;\r\n\r\n  /**\r\n   * Spawns a entity to be attached to the player\r\n   * @param player player this entity will be attached to\r\n   */\r\n  static spawnEntity(player: Player): Entity {\r\n    try {\r\n      return player.dimension.spawnEntity(\r\n        ENTITY_INVENTORY,\r\n        player.headLocation\r\n      );\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Links a new chest gui to a player\r\n   * @param player player to link\r\n   */\r\n  constructor(player: Player) {\r\n    this.player = player;\r\n    this.entity = ChestGUI.spawnEntity(player);\r\n    if (this.entity) {\r\n      this.hasChestOpen = false;\r\n      this.setPage(\"home\");\r\n    }\r\n    this.runScheduleId = system.runSchedule(() => {\r\n      if (!this.entity) return this.despawn();\r\n      if (this.player.getComponent(\"mark_variant\").value == 1) {\r\n        if (!this.hasChestOpen) {\r\n          // Player has this inventory open run checks for changes\r\n          this.slotChangeEvent = onEntityInventorySlotChange.subscribe(\r\n            { type: ENTITY_INVENTORY },\r\n            (entity, change) => {\r\n              if (entity.id != this.entity.id) return;\r\n              this.onSlotChange(change);\r\n            }\r\n          );\r\n        }\r\n        this.hasChestOpen = true;\r\n      } else {\r\n        // Player does not have inventory open but item is held\r\n        try {\r\n          this.entity.teleport(\r\n            this.player.headLocation,\r\n            this.player.dimension,\r\n            this.player.rotation.x,\r\n            this.player.rotation.y,\r\n            true\r\n          );\r\n        } catch (error) {\r\n          this.despawn();\r\n        }\r\n      }\r\n    }, 5);\r\n  }\r\n\r\n  /**\r\n   * Sets this gui to a page of items\r\n   * @param pageId page to set this gui too\r\n   */\r\n  setPage(pageId: string, extras?: any) {\r\n    const c = this.entity.getComponent(\"inventory\").container;\r\n    for (let i = 0; i < c.size; i++) {\r\n      c.setItem(i, AIR);\r\n    }\r\n    if (!Object.keys(PAGES).includes(pageId))\r\n      throw new Error(`pageId ${pageId} does not exist!`);\r\n    const page = PAGES[pageId];\r\n    this.page = page;\r\n\r\n    page.fillType(this.entity, page, extras);\r\n    this.entity.nameTag = `size:54`;\r\n  }\r\n\r\n  /**\r\n   * This runs when a slot gets changed in the chest inventory\r\n   */\r\n  onSlotChange(change: ISlotChangeReturn) {\r\n    /**\r\n     * The guiItem that was changed\r\n     */\r\n    const slot: ISlot = this.page.slots[change.slot];\r\n\r\n    if (!slot) {\r\n      // item was added to page that is not a valid slot so set that slot back to air\r\n      this.entity.getComponent(\"inventory\").container.setItem(change.slot, AIR);\r\n    } else if (change.changeType == \"delete\") {\r\n      // item was taken from this page\r\n      if (slot.item) clearPlayersPointer(this.player, change.item);\r\n      /**\r\n       * if the slot has a item that returns when something is grabbed, this checks\r\n       * if there is a item put into the slot to return, if not it will not send a\r\n       * callback by returning before\r\n       */\r\n      if (!slot.item && !getItemAtSlot(this.entity, change.slot)) return;\r\n      slot.action(new ItemGrabbedCallback(this, slot, change));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes this gui and despawn its entity\r\n   */\r\n  despawn() {\r\n    try {\r\n      this.entity?.triggerEvent(\"despawn\");\r\n    } catch (error) {}\r\n    try {\r\n      delete CHESTGUIS[this.player.name];\r\n    } catch (error) {}\r\n    if (this.runScheduleId) system.clearRunSchedule(this.runScheduleId);\r\n    if (this.slotChangeEvent)\r\n      onEntityInventorySlotChange.unsubscribe(this.slotChangeEvent);\r\n  }\r\n}\r\n", "import {\r\n  Entity,\r\n  EntityQueryOptions,\r\n  ItemStack,\r\n  PlayerInventoryComponentContainer,\r\n  system,\r\n} from \"@minecraft/server\";\r\nimport { DIMENSIONS } from \"../../../utils.js\";\r\n\r\ntype onSlotChangeCallback = (entity: Entity, change: ISlotChangeReturn) => void;\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: onSlotChangeCallback;\r\n    entities: EntityQueryOptions;\r\n  };\r\n} = {};\r\n\r\nconst MAPPED_INVENTORIES: { [key: string]: Array<IMappedInventoryItem> } = {};\r\nexport const PREVIOUS_CHANGE: { [key: string]: ISlotChangeReturn } = {};\r\n\r\nexport interface ISlotChangeReturn {\r\n  /**\r\n   * Slot that changed\r\n   */\r\n  slot: number;\r\n  /**\r\n   * The uid of this item\r\n   */\r\n  uid: string;\r\n  /**\r\n   * The old uid of this item\r\n   */\r\n  oldUid?: string;\r\n  /**\r\n   * the item that was grabbed / put\r\n   */\r\n  item: ItemStack;\r\n  /**\r\n   * The old itemStack that was in this slot\r\n   */\r\n  oldItem?: ItemStack;\r\n  /**\r\n   * How the inventory has changed\r\n   */\r\n  changeType: \"delete\" | \"put\" | \"swap\" | \"fluctuation\" | \"move\";\r\n}\r\n\r\ninterface IMappedInventoryItem {\r\n  /**\r\n   * a unique id for a itemStack\r\n   */\r\n  uid: string;\r\n  /**\r\n   * the item\r\n   */\r\n  item: ItemStack;\r\n}\r\n\r\n/**\r\n * Finds and returns a slot change in a inventory\r\n */\r\nfunction getSlotChanges(\r\n  entity: Entity,\r\n  oldInv: Array<IMappedInventoryItem>,\r\n  newInv: Array<IMappedInventoryItem>\r\n): Array<ISlotChangeReturn> {\r\n  if (oldInv.length != newInv.length) return [];\r\n  const changes: Array<ISlotChangeReturn> = [];\r\n  for (let i = 0; i < newInv.length; i++) {\r\n    if (\r\n      oldInv[i]?.item?.amount < newInv[i]?.item?.amount ||\r\n      (oldInv[i]?.item?.amount > newInv[i]?.item?.amount &&\r\n        oldInv[i]?.item?.amount != 0)\r\n    ) {\r\n      // Checks if the item is the same but checks if the amount has changed\r\n      const change_data: ISlotChangeReturn = {\r\n        slot: i,\r\n        uid: newInv[i].uid,\r\n        oldUid: oldInv[i].uid,\r\n        item: newInv[i].item,\r\n        oldItem: oldInv[i].item,\r\n        changeType: \"fluctuation\",\r\n      };\r\n      changes.push(change_data);\r\n      PREVIOUS_CHANGE[entity.id] = change_data;\r\n      continue;\r\n    }\r\n    if (newInv[i].uid == oldInv[i].uid) continue; // no change\r\n    if (oldInv[i]?.item && newInv[i]?.item) {\r\n      // Checks if there was a new item but a new slot was not taken up\r\n      // Meaning that the item got used like using a bucket on a cow\r\n      const change_data: ISlotChangeReturn = {\r\n        slot: i,\r\n        uid: newInv[i].uid,\r\n        oldUid: oldInv[i].uid,\r\n        item: newInv[i].item,\r\n        oldItem: oldInv[i].item,\r\n        changeType: \"swap\",\r\n      };\r\n      changes.push(change_data);\r\n      PREVIOUS_CHANGE[entity.id] = change_data;\r\n    } else if (!newInv[i]?.item) {\r\n      // There is no more item in this slot\r\n      // Meaning the item has been moved across slots or been thrown out\r\n      const change_data: ISlotChangeReturn = {\r\n        slot: i,\r\n        uid: oldInv[i].uid,\r\n        item: oldInv[i].item,\r\n        changeType: \"delete\",\r\n      };\r\n      changes.push(change_data);\r\n      PREVIOUS_CHANGE[entity.id] = change_data;\r\n    } else if (newInv[i]?.item) {\r\n      // New item has been added in this slot\r\n      if (\r\n        PREVIOUS_CHANGE[entity.id]?.changeType == \"delete\" &&\r\n        PREVIOUS_CHANGE[entity.id]?.uid == newInv[i].uid\r\n      ) {\r\n        // item has been moved across slots\r\n        const change_data: ISlotChangeReturn = {\r\n          slot: i,\r\n          uid: newInv[i].uid,\r\n          item: newInv[i].item,\r\n          changeType: \"move\",\r\n        };\r\n        changes.push(change_data);\r\n        PREVIOUS_CHANGE[entity.id] = change_data;\r\n        continue;\r\n      } else {\r\n        const change_data: ISlotChangeReturn = {\r\n          slot: i,\r\n          uid: newInv[i].uid,\r\n          item: newInv[i].item,\r\n          changeType: \"put\",\r\n        };\r\n        changes.push(change_data);\r\n        PREVIOUS_CHANGE[entity.id] = change_data;\r\n      }\r\n    }\r\n  }\r\n  return changes;\r\n}\r\n\r\n/**\r\n * Converts a itemStack to a unique id\r\n * @param {ItemStack} item\r\n * @returns {string}\r\n */\r\nexport function getItemUid(item: ItemStack): string {\r\n  if (!item) return \"\";\r\n  const data = [];\r\n  data.push(item.typeId);\r\n  data.push(item.nameTag);\r\n  data.push(item.data);\r\n  data.push(item.getLore().join(\"\"));\r\n  return data.join(\"\");\r\n}\r\n\r\n/**\r\n * Gets an entity's inventory but with mapped data\r\n */\r\nfunction mapInventory(\r\n  container: PlayerInventoryComponentContainer\r\n): Array<IMappedInventoryItem> {\r\n  const inventory = [];\r\n\r\n  for (let i = 0; i < container.size; i++) {\r\n    let item = container.getItem(i);\r\n    inventory[i] = {\r\n      uid: getItemUid(item),\r\n      item: item,\r\n    };\r\n  }\r\n  return inventory;\r\n}\r\n\r\nsystem.runSchedule(() => {\r\n  for (const callback of Object.values(CALLBACKS)) {\r\n    for (const entity of DIMENSIONS.overworld.getEntities(callback.entities)) {\r\n      const inventory = mapInventory(\r\n        entity.getComponent(\"inventory\").container\r\n      );\r\n      const changes = getSlotChanges(\r\n        entity,\r\n        MAPPED_INVENTORIES[entity.id] ?? inventory,\r\n        inventory\r\n      );\r\n      MAPPED_INVENTORIES[entity.id] = inventory;\r\n      if (changes.length == 0) continue;\r\n      if (entity.hasTag(\"skipCheck\")) {\r\n        entity.removeTag(\"skipCheck\");\r\n        delete PREVIOUS_CHANGE[entity.id];\r\n        continue;\r\n      }\r\n      for (const change of changes) {\r\n        callback.callback(entity, change);\r\n      }\r\n    }\r\n  }\r\n}, 5);\r\n\r\nexport class onEntityInventorySlotChange {\r\n  /**\r\n   * Subscribes to a callback to get notified when a entities inventory changes\r\n   * @param callback what to be called when one of these entities inventory's changes\r\n   * @param entities the entity's to grab from\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(\r\n    entities: EntityQueryOptions,\r\n    callback: onSlotChangeCallback\r\n  ): number {\r\n    const key = Date.now();\r\n    CALLBACKS[key] = { callback: callback, entities: entities };\r\n    return key;\r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n", "import { Entity, ItemStack, Location, Player } from \"@minecraft/server\";\r\nimport type { ChestGUI } from \"./Models/EntityChest\";\r\nimport type { Page } from \"./Models/Page\";\r\n\r\n/**\r\n * This will link a players name to a chest gui instance\r\n */\r\nexport const CHESTGUIS: { [key: string]: ChestGUI } = {};\r\n\r\n/**\r\n * This will link a players name to a chest gui instance\r\n */\r\nexport const PAGES: { [key: string]: Page } = {};\r\n\r\n/**\r\n * Gets a players held item\r\n */\r\nexport function getHeldItem(player: Player): ItemStack {\r\n  const inventory = player.getComponent(\"minecraft:inventory\").container;\r\n  return inventory.getItem(player.selectedSlot);\r\n}\r\n\r\n/**\r\n * Clears the player of a item in there pointer slot\r\n */\r\nexport async function clearPlayersPointer(\r\n  player: Player,\r\n  ItemToClear: ItemStack\r\n) {\r\n  try {\r\n    const inventory = player.getComponent(\"minecraft:inventory\").container;\r\n    let itemsToLoad = [];\r\n    for (let i = 0; i < inventory.size; i++) {\r\n      const item = inventory.getItem(i);\r\n      if (!item) continue;\r\n      if (item?.typeId == ItemToClear?.typeId) {\r\n        itemsToLoad.push({ slot: i, item: item });\r\n        inventory.setItem;\r\n        if (i < 9) {\r\n          player.runCommandAsync(`replaceitem entity @s slot.hotbar ${i} air`);\r\n        } else {\r\n          player.runCommandAsync(\r\n            `replaceitem entity @s slot.inventory ${i - 9} air`\r\n          );\r\n        }\r\n      }\r\n    }\r\n    await player.runCommandAsync(\r\n      `clear @s ${ItemToClear?.typeId} ${ItemToClear.data} ${ItemToClear.amount}`\r\n    );\r\n    for (const item of itemsToLoad) {\r\n      inventory.setItem(item.slot, item.item);\r\n    }\r\n  } catch (error) {\r\n    // the item couldn't be cleared that means\r\n    // they now have a item witch is really BAD\r\n    [\r\n      ...player.dimension.getEntities({\r\n        type: \"minecraft:item\",\r\n        location: new Location(\r\n          player.location.x,\r\n          player.location.y,\r\n          player.location.z\r\n        ),\r\n        maxDistance: 2,\r\n        closest: 1,\r\n      }),\r\n    ].forEach((e) => e.kill());\r\n  }\r\n}\r\n\r\n/**\r\n * Gets an item at slot\r\n */\r\nexport function getItemAtSlot(entity: Entity, slot: number): ItemStack | null {\r\n  const inventory = entity.getComponent(\"minecraft:inventory\").container;\r\n  return inventory.getItem(slot);\r\n}\r\n", "import {\n  ActionFormData,\n  MessageFormData,\n  ModalFormData,\n  ActionFormResponse,\n  ModalFormResponse,\n  MessageFormResponse,\n} from \"@minecraft/server-ui\";\nimport { ChestGUI } from \"./EntityChest\";\nimport { ItemStack } from \"@minecraft/server\";\nimport type { ISlot } from \"./Page\";\nimport type { ISlotChangeReturn } from \"../../Events/onSlotChange\";\nimport { sleep } from \"../../../../utils\";\nimport { ItemDatabase } from \"../../../database/types/Item\";\n\ntype FormActionReturn<T> = T extends ActionFormData\n  ? Promise<ActionFormResponse>\n  : T extends ModalFormData\n  ? Promise<ModalFormResponse>\n  : Promise<MessageFormResponse>;\n\nexport class ItemGrabbedCallback {\n  gui: ChestGUI;\n  slot: ISlot;\n  change: ISlotChangeReturn;\n  /**\n   * New Callback\n   */\n  constructor(gui: ChestGUI, slot: ISlot, change: ISlotChangeReturn) {\n    this.gui = gui;\n    this.slot = slot;\n    this.change = change;\n  }\n\n  /**\n   * Messages to the owner of this gui\n   * @example ctx.reply('Hello World!');\n   */\n  message(text: string) {\n    this.gui.player.tell(text);\n  }\n\n  /**\n   * Gets the item added\n   */\n  getItemAdded(): ItemStack | null {\n    if (this.slot.item) return null;\n    return this.gui.entity\n      .getComponent(\"minecraft:inventory\")\n      .container.getItem(this.change.slot);\n  }\n\n  /**\n   * Gives the player the item the grabbed\n   */\n  GiveAction(item: ItemStack = this.slot.item.itemStack) {\n    this.gui.player.getComponent(\"minecraft:inventory\").container.addItem(item);\n  }\n\n  /**\n   * Gives the player the item that was grabbed also removes this item from the gui + db\n   * @param db the item database to remove this item from\n   */\n  TakeAction(db: ItemDatabase = null) {\n    this.gui.player\n      .getComponent(\"minecraft:inventory\")\n      .container.addItem(this.slot.item.itemStack);\n    this.gui.page.slots[this.change.slot] = null;\n    if (!db) return;\n    db.delete(this.slot.item.components.dbKey);\n  }\n\n  /**\n   * Changes the page of the chestGui when this item is grabbed\n   * @param page page to send to\n   * @param extras stuff to be passed onto the page\n   */\n  PageAction(page: string, extras?: any) {\n    this.gui.setPage(page, extras);\n  }\n\n  /**\n   * Closes the chest GUI when this item is grabbed\n   */\n  CloseAction() {\n    this.gui.despawn();\n  }\n\n  /**\n   * Sets the item back\n   */\n  SetAction() {\n    const container = this.gui.entity.getComponent(\n      \"minecraft:inventory\"\n    ).container;\n    container.setItem(this.change.slot, this.slot.item.itemStack);\n  }\n\n  /**\n   * Opens a form to the player\n   * @param {ActionFormData | ModalFormData | MessageFormData} form form to load\n   * @returns {Promise<ActionFormResponse | ModalFormResponse | MessageFormResponse>}\n   */\n  async FormAction<T extends ActionFormData | ModalFormData | MessageFormData>(\n    form: T\n  ): Promise<FormActionReturn<T>> {\n    this.CloseAction();\n    await sleep(5);\n    // @ts-ignore\n    return await form.show(this.gui.player);\n  }\n}\n", "import {\r\n  Enchantment,\r\n  EnchantmentList,\r\n  ItemStack,\r\n  ItemType,\r\n} from \"@minecraft/server\";\r\n\r\ninterface IPageItemComponents {\r\n  /**\r\n   * Number of the items in the stack. Valid values range between 0 and 64.\r\n   */\r\n  amount?: number;\r\n  /**\r\n   * A data value used to configure alternate states of the item.\r\n   */\r\n  data?: number;\r\n  /**\r\n   * Given name of this stack of items.\r\n   */\r\n  nameTag?: string;\r\n  /**\r\n   * a secondary display string - for an ItemStack.\r\n   */\r\n  loreList?: string[];\r\n  /**\r\n   * a collection of the enchantments on this item\r\n   */\r\n  enchantments?: Enchantment[];\r\n  /**\r\n   * A key that could be on this item, meaning its connect to database\r\n   */\r\n  dbKey?: string;\r\n}\r\n\r\nexport class PageItem {\r\n  /**\r\n   * The item type this item has\r\n   */\r\n  itemType: ItemType;\r\n  /**\r\n   * The components that this item\r\n   * this stores information such as data, enchantments etc\r\n   */\r\n  components: IPageItemComponents;\r\n\r\n  /**\r\n   * The itemStack that was set at item creation\r\n   */\r\n  setItemStack: ItemStack | null;\r\n\r\n  constructor(\r\n    itemType: ItemType,\r\n    components: IPageItemComponents = {},\r\n    itemStack?: ItemStack\r\n  ) {\r\n    this.itemType = itemType;\r\n    this.components = components;\r\n    this.setItemStack = itemStack;\r\n  }\r\n  /**\r\n   * gets itemStack that this PageItem is associated with\r\n   */\r\n  get itemStack(): ItemStack {\r\n    if (this.setItemStack) return this.setItemStack;\r\n    const itemStack = new ItemStack(this.itemType);\r\n    if (this.components) {\r\n      itemStack.amount = this.components?.amount ?? 1;\r\n      itemStack.data = this.components?.data ?? 0;\r\n      itemStack.nameTag = this.components?.nameTag;\r\n      itemStack.setLore(this.components?.loreList ?? []);\r\n      const enchantments: EnchantmentList =\r\n        itemStack.getComponent(\"enchantments\").enchantments;\r\n      for (const enchantment of this.components?.enchantments ?? []) {\r\n        enchantments.addEnchantment(enchantment);\r\n      }\r\n      itemStack.getComponent(\"enchantments\").enchantments = enchantments;\r\n    }\r\n    return itemStack;\r\n  }\r\n}\r\n", "import { Entity } from \"@minecraft/server\";\nimport { AIR } from \"../index\";\nimport { Page } from \"./Page.js\";\n\nexport type FillTypeCallback = (\n  entity: Entity,\n  page: Page,\n  extras: any\n) => void;\n\n/**\n * Fills a entity with desired items\n */\nexport function DefaultFill(entity: Entity, page: Page, extras: any) {\n  const container = entity.getComponent(\"minecraft:inventory\").container;\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n}\n", "import { PAGES } from \"../utils.js\";\r\nimport { DefaultFill, FillTypeCallback } from \"./FillTypes\";\r\nimport { ItemGrabbedCallback } from \"./ItemGrabbedCallback.js\";\r\nimport type { PageItem } from \"./PageItem\";\r\n\r\nexport interface ISlot {\r\n  /**\r\n   * The item that should be in this slot\r\n   */\r\n  item: PageItem;\r\n  /**\r\n   * What happens when there is a change in this slot\r\n   */\r\n  action: (ctx: ItemGrabbedCallback) => void;\r\n}\r\n\r\nexport class Page {\r\n  /**\r\n   * The id this page has\r\n   */\r\n  id: string;\r\n  /**\r\n   * How this page fills, these can be custom or kept default\r\n   */\r\n  fillType: FillTypeCallback;\r\n\r\n  /**\r\n   * The slots in this gui\r\n   */\r\n  slots: ISlot[];\r\n\r\n  constructor(id: string, fillType: FillTypeCallback = DefaultFill) {\r\n    if (Object.keys(PAGES).includes(id))\r\n      throw new Error(`Page: ${id}, Already exists!`);\r\n    this.id = id;\r\n    this.fillType = fillType;\r\n    this.slots = [];\r\n    PAGES[id] = this;\r\n  }\r\n\r\n  /**\r\n   * Sets slots in this page\r\n   */\r\n  setSlots(\r\n    slot: Array<number>,\r\n    item: PageItem,\r\n    action: (ctx: ItemGrabbedCallback) => void\r\n  ): Page {\r\n    const data = item ? { item: item, action: action } : null;\r\n    for (const i of slot) {\r\n      this.slots[i] = data;\r\n    }\r\n    return this;\r\n  }\r\n}\r\n", "import { PageItem } from \"../Models/PageItem.js\";\r\nimport { Page } from \"../Models/Page.js\";\r\nimport { MinecraftItemTypes } from \"@minecraft/server\";\r\n\r\n/**\r\n * The Home page of this GUI this is the most important because\r\n * when the GUI is opened it will open up here, any plugin can\r\n * change this but this is the default screen\r\n */\r\nexport let HOME_PAGE = new Page(\"home\")\r\n  .setSlots(\r\n    [22],\r\n    new PageItem(MinecraftItemTypes.enderChest, {\r\n      nameTag: \"\u00A7l\u00A7bInventory Viewer\",\r\n    }),\r\n    (ctx) => {\r\n      ctx.PageAction(\"moderation:see\");\r\n    }\r\n  )\r\n  .setSlots(\r\n    [54],\r\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\r\n    (ctx) => {\r\n      ctx.CloseAction();\r\n    }\r\n  );\r\n", "import {\n  world,\n  Player,\n  BlockLocation,\n  MinecraftBlockTypes,\n  Enchantment,\n  GameMode,\n} from \"@minecraft/server\";\nimport type { ConfigType, ROLES } from \"./types\";\nimport { Region } from \"./modules/models/Region.js\";\nimport { ChangePlayerRoleTask } from \"./modules/models/Task\";\nimport { APPEAL_LINK, BANNED_BLOCKS, BANNED_ITEMS } from \"./config/moderation\";\nimport { ENCHANTMENTS } from \"./config/enchantments\";\nimport { DIMENSIONS } from \"../../utils.js\";\nimport { TABLES } from \"./tables.js\";\n\n/**\n * Kicks a player\n * @param player player who should be kicked\n * @param message the message that should be show to player\n * @param onFail this needs to be used for loops to unregister\n */\nexport function kick(\n  player: Player,\n  message: Array<String> = [],\n  onFail?: () => void\n): void {\n  if (isServerOwner(player)) {\n    console.warn(`[WARNING]: TRIED TO KICK OWNER`);\n    player.tell(`You have been tried to kick, but you cant!`);\n    return onFail?.();\n  }\n  try {\n    player.runCommandAsync(`kick \"${player.name}\" \u00A7r${message.join(\"\\n\")}`);\n    player.triggerEvent(\"kick\");\n  } catch (error) {\n    player.triggerEvent(\"kick\");\n    if (!/\"statusCode\":-2147352576/.test(error)) return;\n    // This function just tried to kick the owner\n    if (onFail) onFail();\n  }\n}\n\n/**\n * Gets the role of this player\n * @param player player to get role from\n * @example getRole(\"Smell of curry\")\n */\nexport function getRole(player: Player | string): keyof typeof ROLES {\n  if (player instanceof Player) {\n    return TABLES.roles.get(player.name) ?? \"member\";\n  } else {\n    return TABLES.roles.get(player) ?? \"member\";\n  }\n}\n\n/**\n * Sets the role of this player\n * @example setRole(\"Smell of curry\", \"admin\")\n */\nexport function setRole(\n  player: Player | string,\n  value: keyof typeof ROLES\n): void {\n  if (typeof player == \"string\") {\n    // we need to create a task that will update the role for\n    // that player when they join\n    // also we need to set there db_role back\n    TABLES.roles.set(player, value);\n    /**\n     * If the player is in the game just set it now\n     * if they are not in the game we will need to create a task\n     * to set there role when they join\n     */\n    const inGamePlayer = [...world.getPlayers()].find((p) => p.name == player);\n    if (inGamePlayer) {\n      inGamePlayer.setDynamicProperty(\"role\", value);\n    } else {\n      new ChangePlayerRoleTask(player, value);\n    }\n  } else {\n    // just change both of them no need for task\n    TABLES.roles.set(player.name, value);\n    player.setDynamicProperty(\"role\", value);\n  }\n}\n\n/**\n * Checks if a player is the owner of this world that was set using `/function`\n * @param player player to test\n * @returns if player is owner\n */\nexport function isServerOwner(player: Player): boolean {\n  return world.getDynamicProperty(\"worldsOwner\") == player.id;\n}\n\n/**\n * Gets the server owner\n * @returns server owners id\n */\nexport function getServerOwner(): string | null {\n  const id = world.getDynamicProperty(\"worldsOwner\") as string;\n  if (!id || id == \"\") return null;\n  return id;\n}\n\n/**\n * Gets the server owners name\n * @returns server owners name\n */\nexport function getServerOwnerName(): string | null {\n  const ownerId = getServerOwner();\n  if (!ownerId) return null;\n  const ids = TABLES.ids.collection();\n  return Object.keys(ids).find((key) => ids[key] === ownerId);\n}\n\n/**\n * Sets the server owner\n * @param player player to set the server owner too\n */\nexport function setServerOwner(player: Player) {\n  if (!player) return world.setDynamicProperty(\"worldsOwner\", \"\");\n  world.setDynamicProperty(\"worldsOwner\", player.id.toString());\n}\n\n/**\n * Checks if the server is locked down\n */\nexport function isLockedDown(): boolean {\n  return (world.getDynamicProperty(\"isLockDown\") ?? false) as boolean;\n}\n\n/**\n * Sets the server's lock down status\n * @param val if the server is locked down or not\n */\nexport function setLockDown(val: boolean) {\n  world.setDynamicProperty(\"isLockDown\", val);\n}\n\n/**\n * Sets Deny blocks at bottom of region every 5 mins\n */\nexport function loadRegionDenys() {\n  for (const region of Region.getAllRegions()) {\n    const loc1 = new BlockLocation(\n      region.from.x,\n      region.dimensionId == \"minecraft:overworld\" ? -64 : 0,\n      region.from.z\n    );\n    const loc2 = new BlockLocation(\n      region.to.x,\n      region.dimensionId == \"minecraft:overworld\" ? -64 : 0,\n      region.to.z\n    );\n    for (const blockLocation of loc1.blocksBetween(loc2)) {\n      DIMENSIONS[region.dimensionId as keyof typeof DIMENSIONS]\n        .getBlock(blockLocation)\n        ?.setType(MinecraftBlockTypes.deny);\n    }\n  }\n}\n\n/**\n * Grabs config data from the database\n * @param id id to grab\n */\nexport function getConfigId<T extends keyof ConfigType>(id: T): ConfigType[T] {\n  switch (id) {\n    case \"banned_items\":\n      return TABLES.config.get(\"banned_items\") ?? BANNED_ITEMS;\n    case \"banned_blocks\":\n      return TABLES.config.get(\"banned_blocks\") ?? BANNED_BLOCKS;\n    case \"enchantments\":\n      return TABLES.config.get(\"enchantments\") ?? ENCHANTMENTS;\n    case \"appealLink\":\n      return TABLES.config.get(\"appealLink\") ?? APPEAL_LINK;\n  }\n}\n\n/**\n * Sets a config id\n * @param key key to set\n * @param value value to set key to\n */\nexport function setConfigId<T extends keyof ConfigType>(\n  key: T,\n  value: ConfigType[T]\n) {\n  TABLES.config.set(key, value);\n}\n\n/**\n * Gets the max level of a enchantment\n * @param enchantment enchantment to get\n * @returns max level\n * @example ```\n * getMaxLevel(MinecraftEnchantmentTypes.sharpness): 5\n * ```\n */\nexport function getMaxEnchantmentLevel(enchantment: Enchantment): number {\n  const MAX_ENCHANTMENTS = getConfigId(\"enchantments\");\n  return (\n    MAX_ENCHANTMENTS[enchantment.type.id as keyof typeof ENCHANTMENTS] ??\n    enchantment.type.maxLevel\n  );\n}\n\n/**\n * Gets the Gamemode of a player\n * @param {Player} player player to get\n * @returns {keyof typeof GameMode}\n * @example if (getGamemode(player) == \"creative\") return;\n */\nexport function getGamemode(player: Player): keyof typeof GameMode {\n  return Object.values(GameMode).find(\n    (g) => [...world.getPlayers({ name: player.name, gameMode: g })].length\n  );\n}\n", "import { BlockLocation, Entity, MinecraftBlockTypes } from \"@minecraft/server\";\nimport { DEFAULT_REGION_PERMISSIONS } from \"../../config/region\";\nimport { TABLES } from \"../../tables.js\";\nimport type { IRegionCords, IRegionPermissions } from \"../../types\";\nimport { loadRegionDenys } from \"../../utils.js\";\nimport { betweenVector3, DIMENSIONS } from \"../../../../utils\";\n\n/**\n * Holds all regions in memory so its not grabbing them so much\n */\nexport let REGIONS: Array<Region> = [];\n\n/**\n * If the regions have been grabbed if not it will grab them and set this to true\n */\nlet REGIONS_HAVE_BEEN_GRABBED: boolean = false;\n\n/**\n * The Lowest Y value in minecraft\n */\nconst LOWEST_Y_VALUE: number = -64;\n\n/**\n * The HIGHEST Y value in minecraft\n */\nconst HIGHEST_Y_VALUE: number = 320;\n\nexport class Region {\n  dimensionId: string;\n  from: IRegionCords;\n  to: IRegionCords;\n  key: string;\n  permissions: IRegionPermissions;\n\n  /**\n   * Gets all regions\n   */\n  static async getAllRegionsSync(): Promise<Array<Region>> {\n    if (REGIONS_HAVE_BEEN_GRABBED) return REGIONS;\n    const regions = (await TABLES.regions.valuesSync()).map(\n      (region) =>\n        new Region(\n          region.from,\n          region.to,\n          region.dimensionId,\n          region.permissions,\n          region.key\n        )\n    );\n    regions.forEach((r) => {\n      REGIONS.push(r);\n    });\n    REGIONS_HAVE_BEEN_GRABBED = true;\n    return regions;\n  }\n\n  static getAllRegions(): Array<Region> {\n    if (REGIONS_HAVE_BEEN_GRABBED) return REGIONS;\n    const regions = TABLES.regions\n      .values()\n      .map(\n        (region) =>\n          new Region(\n            region.from,\n            region.to,\n            region.dimensionId,\n            region.permissions,\n            region.key\n          )\n      );\n    regions.forEach((r) => {\n      REGIONS.push(r);\n    });\n    REGIONS_HAVE_BEEN_GRABBED = true;\n    return regions;\n  }\n\n  /**\n   * Checks if a block location is in region\n   */\n  static blockLocationInRegion(\n    blockLocation: BlockLocation,\n    dimensionId: string\n  ): Region | undefined {\n    return this.getAllRegions().find(\n      (region) =>\n        region.dimensionId == dimensionId &&\n        betweenVector3(\n          blockLocation,\n          { x: region.from.x, y: LOWEST_Y_VALUE, z: region.from.z },\n          { x: region.to.x, y: HIGHEST_Y_VALUE, z: region.to.z }\n        )\n    );\n  }\n\n  /**\n   * Checks if a block location is in region\n   */\n  static async blockLocationInRegionSync(\n    blockLocation: BlockLocation,\n    dimensionId: string\n  ): Promise<Region | undefined> {\n    return (await this.getAllRegionsSync()).find(\n      (region) =>\n        region.dimensionId == dimensionId &&\n        betweenVector3(\n          blockLocation,\n          { x: region.from.x, y: LOWEST_Y_VALUE, z: region.from.z },\n          { x: region.to.x, y: HIGHEST_Y_VALUE, z: region.to.z }\n        )\n    );\n  }\n\n  /**\n   * Removes a region at a block Location\n   * @param dimensionId the id of this dimension\n   * @returns if the region was removed or not\n   */\n  static async removeRegionAtBlockLocation(\n    blockLocation: BlockLocation,\n    dimensionId: string\n  ): Promise<boolean> {\n    const region = this.blockLocationInRegion(blockLocation, dimensionId);\n    if (!region) return false;\n    return TABLES.regions.delete(region.key);\n  }\n  /**\n   * Creates a new Region to store in db\n   */\n  constructor(\n    from: IRegionCords,\n    to: IRegionCords,\n    dimensionId: string,\n    permissions?: IRegionPermissions,\n    key?: string\n  ) {\n    this.from = from;\n    this.to = to;\n    this.dimensionId = dimensionId;\n    this.permissions = permissions ?? DEFAULT_REGION_PERMISSIONS;\n    this.key = key ? key : Date.now().toString();\n\n    if (!key) {\n      this.update().then(() => {\n        loadRegionDenys();\n        REGIONS.push(this);\n      });\n    }\n  }\n\n  /**\n   * Updates this region in the database\n   */\n  async update(): Promise<void> {\n    return TABLES.regions.set(this.key, {\n      key: this.key,\n      from: this.from,\n      dimensionId: this.dimensionId,\n      permissions: this.permissions,\n      to: this.to,\n    });\n  }\n\n  /**\n   * removes this region\n   * @returns if the region was removed successfully\n   */\n  async delete(): Promise<boolean> {\n    const region = TABLES.regions.get(this.key);\n    const loc1 = new BlockLocation(\n      region.from.x,\n      region.dimensionId == \"minecraft:overworld\" ? -64 : 0,\n      region.from.z\n    );\n    const loc2 = new BlockLocation(\n      region.to.x,\n      region.dimensionId == \"minecraft:overworld\" ? -64 : 0,\n      region.to.z\n    );\n    for (const blockLocation of loc1.blocksBetween(loc2)) {\n      DIMENSIONS[region.dimensionId as keyof typeof DIMENSIONS]\n        .getBlock(blockLocation)\n        ?.setType(MinecraftBlockTypes.bedrock);\n    }\n    REGIONS = REGIONS.filter((r) => r.key != this.key);\n    return TABLES.regions.delete(this.key);\n  }\n\n  /**\n   * Checks if a player is in this region\n   * @returns if a entity is in this region or not\n   */\n  entityInRegion(entity: Entity): Boolean {\n    return (\n      this.dimensionId == entity.dimension.id &&\n      betweenVector3(\n        entity.location,\n        { x: this.from.x, y: LOWEST_Y_VALUE, z: this.from.z },\n        { x: this.to.x, y: HIGHEST_Y_VALUE, z: this.to.z }\n      )\n    );\n  }\n\n  /**\n   * Changes a permission to on or off\n   */\n  changePermission<T extends keyof IRegionPermissions>(\n    key: T,\n    value: IRegionPermissions[T]\n  ): void {\n    this.permissions[key] = value;\n    this.update();\n  }\n}\n", "/**\n * The default permissions for all regions made\n */\nexport const DEFAULT_REGION_PERMISSIONS = {\n  /**\n   * If players in this region can use doors, trapdoors, and switches like buttons and levers\n   */\n  doorsAndSwitches: true,\n  /**\n   * If players in this region can open containers, this is like chests, furnaces, hoppers, etc\n   */\n  openContainers: true,\n  /**\n   * If the players in this region can fight each other\n   */\n  pvp: false,\n  /**\n   * the entities allowed in this region\n   */\n  allowedEntities: [\n    \"minecraft:player\",\n    \"minecraft:npc\",\n    \"minecraft:item\",\n    \"rubedo:inventory\",\n    \"rubedo:database\",\n  ],\n};\n\n/**\n * All doors and switches in minecraft\n */\nexport const DOORS_SWITCHES = [\n  \"minecraft:acacia_door\",\n  \"minecraft:acacia_trapdoor\",\n  \"minecraft:acacia_button\",\n  \"minecraft:birch_door\",\n  \"minecraft:birch_trapdoor\",\n  \"minecraft:birch_button\",\n  \"minecraft:crimson_door\",\n  \"minecraft:crimson_trapdoor\",\n  \"minecraft:crimson_button\",\n  \"minecraft:dark_oak_door\",\n  \"minecraft:dark_oak_trapdoor\",\n  \"minecraft:dark_oak_button\",\n  \"minecraft:jungle_door\",\n  \"minecraft:jungle_trapdoor\",\n  \"minecraft:jungle_button\",\n  \"minecraft:mangrove_door\",\n  \"minecraft:mangrove_trapdoor\",\n  \"minecraft:mangrove_button\",\n  \"minecraft:spruce_door\",\n  \"minecraft:spruce_trapdoor\",\n  \"minecraft:spruce_button\",\n  \"minecraft:warped_door\",\n  \"minecraft:warped_trapdoor\",\n  \"minecraft:warped_button\",\n  \"minecraft:wooden_door\",\n  \"minecraft:wooden_button\",\n  \"minecraft:trapdoor\",\n  \"minecraft:iron_door\",\n  \"minecraft:iron_trapdoor\",\n  \"minecraft:polished_blackstone_button\",\n  \"minecraft:lever\",\n];\n\n/**\n * A List of all containers a item could be in\n */\nexport const BLOCK_CONTAINERS = [\n  \"minecraft:chest\",\n  \"minecraft:ender_chest\",\n  \"minecraft:barrel\",\n  \"minecraft:trapped_chest\",\n  \"minecraft:dispenser\",\n  \"minecraft:dropper\",\n  \"minecraft:furnace\",\n  \"minecraft:blast_furnace\",\n  \"minecraft:lit_furnace\",\n  \"minecraft:lit_blast_furnace\",\n  \"minecraft:hopper\",\n  \"minecraft:shulker_box\",\n  \"minecraft:undyed_shulker_box\",\n  \"minecraft:lit_smoker\",\n  \"minecraft:smoker\",\n];\n", "import { TABLES } from \"../../tables.js\";\r\nimport type { IChangePlayerRoleData } from \"../../../../types\";\r\nimport type { ROLES } from \"../../types.js\";\r\n\r\nexport class ChangePlayerRoleTask {\r\n  /**\r\n   * The name of the player\r\n   */\r\n  playerName: string;\r\n  /**\r\n   * The role that the player should be set to\r\n   */\r\n  role: keyof typeof ROLES;\r\n\r\n  /**\r\n   *  gets all tasks that are present\r\n   * @returns all tasks\r\n   */\r\n  static getTasks(): Array<IChangePlayerRoleData> {\r\n    return TABLES.tasks.get(\"changePlayerRole\") ?? [];\r\n  }\r\n\r\n  /**\r\n   * Gets the role this player needs to be set to\r\n   * @param playerName name\r\n   */\r\n  static getPlayersRoleToSet(playerName: string): keyof typeof ROLES | null {\r\n    const tasks = ChangePlayerRoleTask.getTasks();\r\n    return tasks.find((t) => t.playerName == playerName)?.role;\r\n  }\r\n\r\n  constructor(playerName: string, role: keyof typeof ROLES) {\r\n    let tasks = ChangePlayerRoleTask.getTasks();\r\n    tasks.push({ playerName: playerName, role: role });\r\n    TABLES.tasks.set(\"changePlayerRole\", tasks);\r\n  }\r\n}\r\n", "import { MinecraftBlockTypes, MinecraftItemTypes } from \"@minecraft/server\";\n\n/*\n|--------------------------------------------------------------------------\n| Appeal Link\n|--------------------------------------------------------------------------\n|\n| This is the appeal link that gets showed when someone gets banned\n| this link pops up at the bottom of the ban message to show\n| where they can appeal there ban.\n|\n*/\nexport const APPEAL_LINK = \"https://discord.gg/dMa3A5UYKX\";\n\n/**\n * Items that simply get removed from inventory but will not ban\n */\nexport const FORBIDDEN_ITEMS = [\n  // Common CBE Items\n  MinecraftItemTypes.beehive.id,\n  MinecraftItemTypes.beeNest.id,\n  MinecraftItemTypes.axolotlBucket.id,\n  MinecraftItemTypes.codBucket.id,\n  MinecraftItemTypes.tadpoleBucket.id,\n  MinecraftItemTypes.tropicalFishBucket.id,\n  MinecraftItemTypes.salmonBucket.id,\n  MinecraftItemTypes.pufferfishBucket.id,\n];\n\n/**\n * List of items that if you hold you will be automatically banned\n */\nexport const BANNED_ITEMS = [\n  // Op Only Items\n  MinecraftItemTypes.allow.id,\n  MinecraftItemTypes.barrier.id,\n  MinecraftItemTypes.borderBlock.id,\n  MinecraftItemTypes.debugStick?.id ?? \"minecraft:debug_stick\",\n  MinecraftItemTypes.deny.id,\n  MinecraftItemTypes.jigsaw.id,\n  MinecraftItemTypes.lightBlock.id,\n  MinecraftItemTypes.commandBlock.id,\n  MinecraftItemTypes.repeatingCommandBlock.id,\n  MinecraftItemTypes.chainCommandBlock.id,\n  MinecraftItemTypes.commandBlockMinecart.id,\n  MinecraftItemTypes.structureBlock.id,\n  MinecraftItemTypes.structureVoid.id,\n\n  // Not Normal Items\n  MinecraftItemTypes.bedrock.id,\n  MinecraftItemTypes.endPortalFrame.id,\n\n  // Server Movement Blocks\n  \"minecraft:info_update\",\n  \"minecraft:info_update2\",\n  \"minecraft:reserved3\",\n  \"minecraft:reserved4\",\n  \"minecraft:reserved6\",\n  \"minecraft:movingBlock\",\n  \"minecraft:moving_block\",\n  \"minecraft:movingblock\",\n  \"minecraft:piston_arm_collision\",\n  \"minecraft:piston_arm_collision\",\n  \"minecraft:pistonarmcollision\",\n  \"minecraft:stickyPistonArmCollision\",\n  \"minecraft:sticky_piston_arm_collision\",\n  \"minecraft:unknown\",\n\n  // Common Hacked Items\n  \"minecraft:glowingobsidian\",\n  \"minecraft:invisible_bedrock\",\n  \"minecraft:invisiblebedrock\",\n  \"minecraft:netherreactor\",\n  \"minecraft:portal\",\n  \"minecraft:fire\",\n  \"minecraft:water\",\n  \"minecraft:lava\",\n  \"minecraft:flowing_lava\",\n  \"minecraft:flowing_water\",\n  \"minecraft:soul_fire\",\n];\n\n/**\n * Blocks in this list are forbidden from being placed but will not ban the placer\n */\nexport const FORBIDDEN_BLOCKS = [\n  // Common CBE Blocks\n  MinecraftBlockTypes.dispenser.id,\n];\n\n/**\n * List of blocks that cannot be placed down\n */\nexport const BANNED_BLOCKS = [\n  // Should Not be Placed\n  MinecraftBlockTypes.bedrock.id,\n  MinecraftBlockTypes.barrier.id,\n  \"minecraft:invisiblebedrock\",\n  \"minecraft:movingBlock\",\n  \"minecraft:movingblock\",\n  \"minecraft:moving_block\",\n];\n\n/**\n * A List of containers\n */\nexport const CONTAINERS = [\n  MinecraftItemTypes.chest.id,\n  MinecraftItemTypes.trappedChest.id,\n  MinecraftItemTypes.barrel.id,\n  MinecraftItemTypes.dispenser.id,\n  MinecraftItemTypes.dropper.id,\n  MinecraftItemTypes.furnace.id,\n  \"minecraft:lit_furnace\",\n  MinecraftItemTypes.blastFurnace.id,\n  \"minecraft:lit_blast_furnace\",\n  MinecraftItemTypes.smoker.id,\n  \"minecraft:lit_smoker\",\n  MinecraftItemTypes.hopper.id,\n  MinecraftItemTypes.shulkerBox.id,\n  MinecraftItemTypes.undyedShulkerBox.id,\n];\n\n\n", "/*\n|--------------------------------------------------------------------------\n| Enchantments\n|--------------------------------------------------------------------------\n|\n| This is the default enchantments that can be added to items\n| each enchantment is set to its desired max level this can be changed here\n| or in game using -config enchantments set \"enchantment\" value\n|\n*/\nexport const ENCHANTMENTS = {\n  aquaAffinity: 1,\n  baneOfArthropods: 5,\n  binding: 1,\n  blastProtection: 4,\n  channeling: 1,\n  depthStrider: 3,\n  efficiency: 5,\n  featherFalling: 4,\n  fireAspect: 2,\n  fireProtection: 4,\n  flame: 1,\n  fortune: 3,\n  frostWalker: 2,\n  impaling: 5,\n  infinity: 1,\n  knockback: 2,\n  looting: 3,\n  loyalty: 4,\n  luckOfTheSea: 3,\n  lure: 3,\n  mending: 1,\n  multishot: 1,\n  piercing: 4,\n  power: 5,\n  projectileProtection: 4,\n  protection: 4,\n  punch: 2,\n  quickCharge: 3,\n  respiration: 3,\n  riptide: 3,\n  sharpness: 5,\n  silkTouch: 1,\n  smite: 5,\n  soulSpeed: 3,\n  swiftSneak: 4,\n  thorns: 3,\n  unbreaking: 3,\n  vanishing: 1,\n};\n", "import {\r\n  DynamicPropertiesDefinition,\r\n  EntityTypes,\r\n  world,\r\n} from \"@minecraft/server\";\r\nimport { ENTITY_IDENTIFIER, ENTITY_LOCATION } from \"../config/database\";\r\nimport { DIMENSIONS } from \"../../utils.js\";\r\n\r\nworld.events.worldInitialize.subscribe(({ propertyRegistry }) => {\r\n  /**\r\n   * Loads Ticking Area\r\n   */\r\n  DIMENSIONS.overworld.runCommandAsync(\r\n    `tickingarea add ${ENTITY_LOCATION.x} ${ENTITY_LOCATION.y} ${ENTITY_LOCATION.z} ${ENTITY_LOCATION.x} ${ENTITY_LOCATION.y} ${ENTITY_LOCATION.z} db true`\r\n  );\r\n\r\n  let def = new DynamicPropertiesDefinition();\r\n  def.defineString(\"tableName\", 30);\r\n  def.defineNumber(\"index\");\r\n  propertyRegistry.registerEntityTypeDynamicProperties(\r\n    def,\r\n    EntityTypes.get(ENTITY_IDENTIFIER)\r\n  );\r\n});\r\n", "import { system, world } from \"@minecraft/server\";\r\nimport { API_CONTAINERS, CHECK_SIZE } from \"../../config/containers\";\r\nimport { Container } from \"./Container\";\r\nimport { vector3ToBlockLocation } from \"../../../utils\";\r\nimport type { IContainerLocation } from \"../../../types\";\r\n\r\n/**\r\n * storage of all container locations in the world\r\n */\r\nexport let CONTAINER_LOCATIONS: IContainerLocation = {};\r\n\r\nsystem.runSchedule(() => {\r\n  CONTAINER_LOCATIONS = {};\r\n  for (const player of world.getPlayers()) {\r\n    if (player.dimension.id != \"minecraft:overworld\") continue;\r\n    const blockLoc = vector3ToBlockLocation(player.location);\r\n    const pos1 = blockLoc.offset(CHECK_SIZE.x, CHECK_SIZE.y, CHECK_SIZE.z);\r\n    const pos2 = blockLoc.offset(-CHECK_SIZE.x, -CHECK_SIZE.y, -CHECK_SIZE.z);\r\n\r\n    for (const location of pos1.blocksBetween(pos2)) {\r\n      if (location.y < -64) continue;\r\n      const block = player.dimension.getBlock(location);\r\n      if (!block) continue;\r\n      if (!API_CONTAINERS.includes(block.typeId)) continue;\r\n      CONTAINER_LOCATIONS[JSON.stringify(location)] = new Container(\r\n        block.getComponent(\"inventory\").container\r\n      );\r\n    }\r\n  }\r\n}, 100);\r\n", "import { MinecraftBlockTypes } from \"@minecraft/server\";\r\n\r\n/**\r\n * The currently supported block containers by script api\r\n */\r\nexport const API_CONTAINERS = [\r\n  MinecraftBlockTypes.chest.id,\r\n  MinecraftBlockTypes.trappedChest.id,\r\n];\r\n\r\n/**\r\n * The block size to check for blockContainers\r\n */\r\nexport const CHECK_SIZE = { x: 7, y: 7, z: 7 };\r\n", "import { BlockInventoryComponentContainer, ItemStack } from \"@minecraft/server\";\r\n\r\nexport class Container {\r\n  emptySlotsCount: number;\r\n  size: number;\r\n  items: Array<ItemStack>;\r\n  /**\r\n   * Coverts a blockInventoryComponentContainer and saves it\r\n   * @param {BlockInventoryComponentContainer} inventory\r\n   */\r\n  constructor(inventory: BlockInventoryComponentContainer) {\r\n    this.emptySlotsCount = inventory.emptySlotsCount;\r\n    this.size = inventory.size;\r\n    this.items = [];\r\n    for (let i = 0; i < this.size; i++) {\r\n      this.items[i] = inventory.getItem(i);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads this inventory onto a BlockInventoryComponentContainer\r\n   * @param {BlockInventoryComponentContainer} block block to load on\r\n   */\r\n  load(block: BlockInventoryComponentContainer) {\r\n    for (let i = 0; i < block.size; i++) {\r\n      if (!this.items[i]) continue;\r\n      block.setItem(i, this.items[i]);\r\n    }\r\n  }\r\n}\r\n", "import type { Protection } from \"./modules/models/Protection\";\r\nimport { TABLES } from \"./tables\";\r\n\r\n/**\r\n * All protections in this anti-cheat\r\n */\r\nexport const PROTECTIONS: { [key: string]: Protection<any> } = {};\r\n\r\nTABLES.protections.onLoad(() => {\r\n  for (const protection of Object.values(PROTECTIONS)) {\r\n    if (!protection.getConfig().enabled ?? protection.isEnabledByDefault)\r\n      continue;\r\n    protection.enable();\r\n  }\r\n});\r\n", "import { Player } from \"@minecraft/server\";\nimport { TABLES } from \"../../tables.js\";\nimport type { IBanData } from \"../../types.js\";\nimport { durationToMs } from \"../../../../utils.js\";\n\nfunction setBan(\n  player: string | Player,\n  id: string,\n  duration?: string,\n  reason: string = \"No Reason\",\n  by: string = \"Rubedo Auto Mod\"\n) {\n  const data: IBanData = {\n    key: id,\n    playerName: player instanceof Player ? player.name : player,\n    date: Date.now(),\n    duration: duration ? durationToMs(duration) : null,\n    expire: duration ? durationToMs(duration) + Date.now() : null,\n    reason: reason,\n    by: by,\n  };\n  TABLES.bans.set(id, data);\n}\n\nexport class Ban {\n  /**\n   * Ban a player for a set length\n   */\n  constructor(\n    player: string | Player,\n    duration?: string,\n    reason: string = \"No Reason\",\n    by: string = \"Rubedo Auto Mod\"\n  ) {\n    if (player instanceof Player) {\n      setBan(player, player.id, duration, reason, by);\n    } else {\n      setBan(player, TABLES.ids.get(player), duration, reason, by);\n    }\n  }\n}\n", "import { Player } from \"@minecraft/server\";\r\nimport { MessageFormData } from \"@minecraft/server-ui\";\r\nimport { TIMEOUT_THRESHOLD } from \"../../../config/form\";\r\nimport type { ButtonCallback, IMessageFormButton } from \"../types\";\r\n\r\nexport class MessageForm {\r\n  /**\r\n   *  the title that this form should have\r\n   */\r\n  title?: string;\r\n  /**\r\n   * extra text that should be displayed in the form\r\n   */\r\n  body?: string;\r\n  /**\r\n   * The default minecraft form this form is based on\r\n   */\r\n  private form: MessageFormData;\r\n  /**\r\n   * the first button of the dialog.\r\n   */\r\n  private button1: IMessageFormButton;\r\n  /**\r\n   * the second button of the dialog.\r\n   */\r\n  private button2: IMessageFormButton;\r\n  /**\r\n   * The amount of times it takes to show this form in ms\r\n   * if this value goes above 200 it will time out\r\n   */\r\n  private triedToShow: number;\r\n\r\n  /**\r\n   * Creates a new form to be shown to a player\r\n   * @param title the title that this form should have\r\n   * @param body extra text that should be displayed in the form\r\n   */\r\n  constructor(title?: string, body?: string) {\r\n    this.title = title;\r\n    this.body = body;\r\n    this.form = new MessageFormData();\r\n\r\n    if (title) this.form.title(title);\r\n    if (body) this.form.body(body);\r\n\r\n    this.triedToShow = 0;\r\n  }\r\n\r\n  /**\r\n   * Method that sets the text for the first button of the dialog.\r\n   * @param text text to show on this button\r\n   * @param callback what happens when this button is clicked\r\n   * @example ```\r\n   * setButton1(\"settings\", () => {})\r\n   * ```\r\n   */\r\n  setButton1(text: string, callback?: ButtonCallback): MessageForm {\r\n    this.button1 = { text: text, callback: callback };\r\n    this.form.button1(text);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Method that sets the text for the second button of the dialog.\r\n   * @param text text to show on this button\r\n   * @param callback what happens when this button is clicked\r\n   * @example ```\r\n   * setButton2(\"settings\", () => {})\r\n   * ```\r\n   */\r\n  setButton2(text: string, callback?: ButtonCallback): MessageForm {\r\n    this.button2 = { text: text, callback: callback };\r\n    this.form.button2(text);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows this form to the player\r\n   * @param player player to show to\r\n   */\r\n  show(player: Player): void {\r\n    this.form.show(player).then((response) => {\r\n      if (response.canceled) {\r\n        if (response.cancelationReason == \"userBusy\") {\r\n          // check time and reshow form\r\n          if (this.triedToShow > TIMEOUT_THRESHOLD)\r\n            return player.tell(\r\n              `\u00A7cForm Timeout: tried to show form, but you were busy (close chat after running command)`\r\n            );\r\n          this.triedToShow++;\r\n          this.show(player);\r\n        }\r\n        return;\r\n      }\r\n      if (response.selection == 1) this.button1?.callback?.();\r\n      if (response.selection == 0) this.button2?.callback?.();\r\n    });\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { MessageForm } from \"./Models/MessageForm\";\r\n\r\n/**\r\n * Sends a confirmation message to a player to confirm a action\r\n * @param action action message to confirm\r\n * @param onConfirm callback to run when a player confirms the action\r\n * @param onCancel callback to run when a player cancels the action, this can be null\r\n * @example ```\r\n * confirmAction(\"Ban Smell of curry\", () => {\r\n * new Ban(\"Smell of curry\")\r\n * })\r\n * ```\r\n */\r\nexport function confirmAction(\r\n    player: Player,\r\n    action: string,\r\n    onConfirm: () => void,\r\n    onCancel: () => void = () => {}\r\n  ) {\r\n    new MessageForm(\"Confirm To Continue\", action)\r\n      .setButton1(\"Confirm\", onConfirm)\r\n      .setButton2(\"Never Mind\", onCancel)\r\n      .show(player);\r\n  }\r\n  ", "import { Location, Player } from \"@minecraft/server\";\r\nimport {\r\n  LiteralArgumentType,\r\n  IArgumentType,\r\n  LocationArgumentType,\r\n  StringArgumentType,\r\n  IntegerArgumentType,\r\n  ArrayArgumentType,\r\n  BooleanArgumentType,\r\n} from \"./ArgumentTypes.js\";\r\nimport { CommandCallback } from \"./Callback.js\";\r\nimport { COMMANDS } from \"./index.js\";\r\nimport type { AppendArgument, ICommandData, ArgReturn } from \"./types\";\r\nexport { ArgumentTypes } from \"./ArgumentTypes\";\r\n\r\nexport class Command<\r\n  Callback extends Function = (ctx: CommandCallback) => void\r\n> {\r\n  /**\r\n   * The Arguments on this command\r\n   */\r\n  children: Command<any>[];\r\n\r\n  /**\r\n   * Function to run when this command is called\r\n   */\r\n  callback: Callback;\r\n\r\n  constructor(\r\n    public data: ICommandData,\r\n    public type?: IArgumentType,\r\n    public depth: number = 0,\r\n    public parent?: Command<any>\r\n  ) {\r\n    if (!data.requires) data.requires = (player: Player) => true;\r\n    this.data = data;\r\n    this.type = type ?? new LiteralArgumentType(this.data.name);\r\n    this.children = [];\r\n    this.depth = depth;\r\n    this.parent = parent;\r\n    this.callback = null;\r\n\r\n    COMMANDS.push(this);\r\n  }\r\n\r\n  /**\r\n   * Adds a ranch to this command of your own type\r\n   * @param type a special type to be added\r\n   * @returns new branch to this command\r\n   */\r\n  argument<T extends IArgumentType>(type: T): ArgReturn<Callback, T[\"type\"]> {\r\n    const cmd = new Command<AppendArgument<Callback, T[\"type\"]>>(\r\n      this.data,\r\n      type,\r\n      this.depth + 1,\r\n      this\r\n    );\r\n    this.children.push(cmd);\r\n    return cmd;\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  string(name: string): ArgReturn<Callback, string> {\r\n    return this.argument(new StringArgumentType(name));\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  int(name: string): ArgReturn<Callback, number> {\r\n    return this.argument(new IntegerArgumentType(name));\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  array<T extends ReadonlyArray<string>>(\r\n    name: string,\r\n    types: T\r\n  ): ArgReturn<Callback, T[number]> {\r\n    return this.argument(new ArrayArgumentType(name, types));\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  boolean(name: string): ArgReturn<Callback, boolean> {\r\n    return this.argument(new BooleanArgumentType(name));\r\n  }\r\n\r\n  /**\r\n   * Adds a argument to this command to add 3 parameters with location types and to return a Location\r\n   * @param name name this argument  should have\r\n   * @returns new branch to this command\r\n   */\r\n  location(name: string): ArgReturn<Callback, Location> {\r\n    const cmd = this.argument(new LocationArgumentType(name));\r\n    if (!name.endsWith(\"*\")) {\r\n      const newArg = cmd.location(name + \"_y*\").location(name + \"_z*\");\r\n      //@ts-ignore\r\n      return newArg;\r\n    }\r\n    //@ts-ignore\r\n    return cmd;\r\n  }\r\n\r\n  /**\r\n   * Adds a subCommand to this argument\r\n   * @param name name this literal should have\r\n   * @returns new branch to this command\r\n   */\r\n  literal(data: ICommandData): Command<Callback> {\r\n    const cmd = new Command<Callback>(\r\n      data,\r\n      new LiteralArgumentType(data.name),\r\n      this.depth + 1,\r\n      this\r\n    );\r\n    this.children.push(cmd);\r\n    return cmd;\r\n  }\r\n\r\n  /**\r\n   * Registers this command and its appending arguments\r\n   * @param callback what to run when this command gets called\r\n   */\r\n  executes(callback: Callback): Command<Callback> {\r\n    this.callback = callback;\r\n    return this;\r\n  }\r\n}\r\n", "export const text = {\n  \"api.name\": () => \"Smelly API\",\n  \"api.error.unknown\": () => \"An unknown error has occurred.\",\n  \"api.database.error.table_name\": (a: string, b: number) =>\n    `The display name ${a} is too long for an objective, it can be at most ${b} characters long`,\n  \"api.utilities.formatter.error.ms\": (a: string) =>\n    `${a} is not a string or a number`,\n  \"api.Providers.form.invalidType\": (a: string, b: string) =>\n    `Type ${a} is not a valid type to add a ${b}`,\n  \"modules.protections.cps.clickingToFast\": () =>\n    `You are clicking to fast! Please click slower!`,\n  \"modules.managers.mute.isMuted\": () =>\n    `\u00A7cYou've been temporarily muted in chat.`,\n  \"modules.commands.ban.reply\": (\n    playerName: string,\n    duration: string,\n    reason: string = \"\"\n  ) =>\n    `\u00A7cBanned \u00A7f\"\u00A7a${playerName}\u00A7f\" \u00A7cfor ${duration} Because: \"${\n      reason ?? \"No reason Provided\"\n    }\" \u00A7aSuccessfully`,\n  \"lockdown.kick.message\": () => [\n    `\u00A7cYou have been kicked!`,\n    `\u00A7aReason: \u00A7fServer is currently under LockDown`,\n    `\u00A7fServer will be up soon, Try to join later`,\n  ],\n  \"commands.ban.list.player\": (name: string, reason: string, expire: string) =>\n    `- \"${name}\" Because: ${reason}, Expiry ${expire}`,\n  \"commands.freeze.list.player\": (name: string, reason: string) =>\n    `- \"${name}\" Because: ${reason}`,\n  \"commands.mutes.list.player\": (\n    name: string,\n    reason: string,\n    expire: string\n  ) => `- \"${name}\" Because: ${reason}, Expiry: ${expire}`,\n  \"commands.lockdown.confirm\":\n    \"Are you sure you want to lockdown the server, this will kick all active players and all players who try to join who are not admin\",\n};\n", "import { TABLES } from \"../../tables.js\";\nimport { msToTime } from \"../../../../utils.js\";\nimport { getRole } from \"../../utils.js\";\nimport { Ban } from \"../models/Ban.js\";\nimport { confirmAction } from \"../../../../rubedo/lib/Form/utils.js\";\nimport {\n  ArgumentTypes,\n  Command,\n} from \"../../../../rubedo/lib/Command/Command.js\";\nimport { text } from \"../../../../rubedo/lang/text.js\";\nimport type { CommandCallback } from \"../../../../rubedo/lib/Command/Callback.js\";\n\nfunction ban(\n  ctx: CommandCallback,\n  player: string,\n  duration: string,\n  reason: string,\n  by: string\n) {\n  if (TABLES.bans.get(TABLES.ids.get(player)))\n    return ctx.reply(`\u00A7c${player} is already banned`);\n  ctx.reply(`\u00A7aClose chat to confirm`);\n  confirmAction(\n    ctx.sender,\n    `Are you sure you want to ban ${player}, for ${duration ?? \"forever\"}`,\n    () => {\n      new Ban(player, duration, reason, ctx.sender.name);\n      ctx.reply(text[\"modules.commands.ban.reply\"](player, duration, reason));\n    }\n  );\n}\n\nconst root = new Command({\n  name: \"ban\",\n  description: \"Manage bans\",\n  requires: (player) => [\"admin\", \"moderator\"].includes(getRole(player)),\n});\n\nroot\n  .literal({\n    name: \"add\",\n    description: \"Bans a player\",\n  })\n  .argument(new ArgumentTypes.playerName())\n  .executes((ctx, player) => {\n    ban(ctx, player, null, null, ctx.sender.name);\n  })\n  .argument(new ArgumentTypes.duration(\"duration\"))\n  .executes((ctx, player, duration) => {\n    ban(ctx, player, duration, null, ctx.sender.name);\n  })\n  .string(\"reason\")\n  .executes((ctx, player, duration, reason) => {\n    ban(ctx, player, duration, reason, ctx.sender.name);\n  });\n\nroot\n  .literal({\n    name: \"remove\",\n    description: \"un-bans a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const banData = TABLES.bans\n      .values()\n      .find((ban) => ban.playerName == playerName);\n    if (!banData) return ctx.reply(`${playerName} is not banned`);\n    if (TABLES.bans.delete(banData.key)) {\n      ctx.reply(`\u00A7a${playerName}\u00A7r has been Unbanned!`);\n    } else {\n      ctx.reply(`\u00A7cFailed to un-ban ${playerName}`);\n    }\n  });\n\nroot\n  .literal({\n    name: \"list\",\n    description: \"Lists all bans\",\n  })\n  .executes((ctx) => {\n    const bans = TABLES.bans.values();\n    if (bans.length == 0) return ctx.sender.tell(`\u00A7cNo one is banned!`);\n    ctx.sender.tell(`\u00A72--- Showing Bans (${bans.length}) ---`);\n    for (const ban of bans) {\n      ctx.sender.tell(\n        text[\"commands.ban.list.player\"](\n          ban.playerName,\n          ban.reason,\n          ban.expire ? msToTime(ban.duration) : \"Forever\"\n        )\n      );\n    }\n  });", "import { Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { TABLES } from \"../../tables.js\";\nimport { getRole } from \"../../utils\";\n\nconst root = new Command({\n  name: \"database\",\n  description: \"Interacts with SA Database\",\n  aliases: [\"db\"],\n  requires: (player) => getRole(player) == \"admin\",\n});\n\nroot\n  .literal({\n    name: \"get\",\n  })\n  .string(\"table\")\n  .string(\"key\")\n  .executes((ctx, table, key) => {\n    try {\n      const data = TABLES[table as keyof typeof TABLES].get(key);\n      if (data) {\n        ctx.reply(JSON.stringify(data));\n      } else {\n        ctx.reply(`No data could be found for key ${key}`);\n      }\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n\nroot\n  .literal({\n    name: \"set\",\n  })\n  .string(\"table\")\n  .string(\"key\")\n  .string(\"value\")\n  .executes((ctx, table, key, value) => {\n    try {\n      TABLES[table as keyof typeof TABLES].set(key, value);\n      ctx.reply(`Set Key: \"${key}\", to value: \"${value}\" on table: \"${table}\"`);\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n\nroot\n  .literal({\n    name: \"clear\",\n  })\n  .string(\"table\")\n  .executes((ctx, table) => {\n    try {\n      TABLES[table as keyof typeof TABLES].clear();\n      ctx.reply(`Cleared Table ${table}`);\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n\nroot\n  .literal({\n    name: \"keys\",\n    description: \"Returns all keys on a database\",\n  })\n  .string(\"table\")\n  .executes((ctx, table) => {\n    try {\n      const keys = TABLES[table as keyof typeof TABLES].keys();\n      ctx.reply(`Keys on database: ${table}: ${keys}`);\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n\nroot\n  .literal({\n    name: \"values\",\n    description: \"Returns all values on a database\",\n  })\n  .string(\"table\")\n  .executes((ctx, table) => {\n    try {\n      const values = TABLES[table as keyof typeof TABLES].values();\n      ctx.reply(\n        `Values on database: ${table}: ${JSON.stringify(values, null, 2)}`\n      );\n    } catch (error) {\n      // likely occurs when table is empty\n      if (error instanceof TypeError) {\n        ctx.reply(`No values on database ${table}`);\n      } else {\n        ctx.reply(error + error.stack);\n      }\n    }\n  });\n", "import { ArgumentTypes, Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { getRole } from \"../../utils.js\";\n\nnew Command({\n  name: \"ecwipe\",\n  description: \"Clears a players ender chest\",\n  requires: (player) => getRole(player) == \"admin\",\n})\n  .argument(new ArgumentTypes.player(\"player\"))\n  .executes((ctx, player) => {\n    for (let i = 0; i < 27; i++) {\n      player.runCommandAsync(`replaceitem entity @s slot.enderchest ${i} air`);\n    }\n    ctx.reply(`\u00A7aCleared \"${player.name}\"'s Ender chest!`);\n  });\n", "import { Player } from \"@minecraft/server\";\nimport { TABLES } from \"../../tables.js\";\nimport type { IFreezeData } from \"../../types.js\";\n\nexport class Freeze {\n  /**\n   * Freeze a player\n   */\n  constructor(player: Player, reason: string = \"No Reason\") {\n    const data: IFreezeData = {\n      playerName: player.name,\n      key: player.id,\n      reason: reason,\n      location: {\n        x: player.location.x,\n        y: player.location.y,\n        z: player.location.z,\n        dimension: player.dimension.id,\n      },\n    };\n    TABLES.freezes.set(player.id, data);\n  }\n}\n", "import { ArgumentTypes, Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { Freeze } from \"../models/Freeze.js\";\nimport { getRole } from \"../../utils.js\";\nimport { TABLES } from \"../../tables.js\";\nimport { text } from \"../../../../rubedo/lang/text.js\";\n\nconst root = new Command({\n  name: \"freeze\",\n  description: \"Manage Freezes\",\n  requires: (player) => [\"admin\", \"moderator\"].includes(getRole(player)),\n});\n\nroot\n  .literal({\n    name: \"add\",\n    description: \"Freezes a player\",\n  })\n  .argument(new ArgumentTypes.player(\"player\"))\n  .string(\"reason\")\n  .executes((ctx, player, reason) => {\n    new Freeze(player, reason);\n    ctx.reply(\n      `\u00A7cFroze \u00A7f\"\u00A7a${player.name}\u00A7f\" Because: \"${reason}\" \u00A7aSuccessfully`\n    );\n    ctx.sender.tell(\n      `\u00A7cYou have been frozen by \u00A7f\"\u00A7a${ctx.sender.name}\u00A7f\" Because: \"${reason}\"`\n    );\n  });\n\nroot\n  .literal({\n    name: \"remove\",\n    description: \"unfreezes a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const freeze = TABLES.freezes\n      .values()\n      .find((freeze) => freeze.playerName == playerName);\n    if (!freeze) return ctx.reply(`${playerName} is not frozen`);\n\n    TABLES.freezes.delete(freeze.key);\n\n    ctx.reply(`\u00A7a${playerName}\u00A7r has been UnFrozen!`);\n  });\n\nroot\n  .literal({\n    name: \"list\",\n    description: \"Lists all freezes\",\n  })\n  .executes((ctx) => {\n    const freezes = TABLES.freezes.values();\n    if (freezes.length == 0) return ctx.sender.tell(`\u00A7cNo one is frozen!`);\n    ctx.sender.tell(`\u00A72--- Showing Freezes (${freezes.length}) ---`);\n    for (const freeze of freezes) {\n      ctx.sender.tell(\n        text[\"commands.freeze.list.player\"](freeze.playerName, freeze.reason)\n      );\n    }\n  });\n", "import { Player } from \"@minecraft/server\";\nimport { PREFIX } from \"../../../../rubedo/config/commands.js\";\nimport type {\n  IArgumentType,\n  IArgumentReturnData,\n} from \"../../../../rubedo/lib/Command/ArgumentTypes.js\";\nimport { Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { COMMANDS } from \"../../../../rubedo/lib/Command/index.js\";\n\nclass CommandNameArgumentType implements IArgumentType {\n  type: string;\n  typeName = \"CommandName\";\n  matches(value: string): IArgumentReturnData<string> {\n    return {\n      success: Boolean(\n        COMMANDS.find((c) => c.depth == 0 && c.data.name == value)\n      ),\n      value: value,\n    };\n  }\n  fail(value: string): string {\n    return `\"${value}\" is not a valid command`;\n  }\n  constructor(public name: string) {}\n}\n\n/**\n * Sends text in chat relation to the args in the command to player\n */\nfunction sendCommandType(\n  baseCommand: Command,\n  args: Command[],\n  player: Player\n) {\n  player.tell(\n    `${PREFIX}${baseCommand.data.name} ${args\n      .map((a) =>\n        a.type.typeName == \"literal\"\n          ? a.data.name\n          : `<${a.type.name}: ${a.type.typeName}>`\n      )\n      .join(\" \")}`\n  );\n}\n\nfunction sendArguments(bc: Command, c: Command, args: Command[], p: Player) {\n  if (!c.data?.requires(p)) return;\n  if (c.callback) {\n    // command has a callback\n    sendCommandType(bc, c.depth == 0 ? args : args.concat(c), p);\n  }\n  if (c.children.length > 0) {\n    // cmd has arguments\n    for (const child of c.children) {\n      sendArguments(bc, child, c.depth == 0 ? args : args.concat(c), p);\n    }\n  }\n}\n\nfunction sendPageHeader(player: Player, p: number, maxPages: number) {\n  player.tell(\n    `\u00A72--- Showing help page ${p} of ${maxPages} (${PREFIX}help <page: int>) ---`\n  );\n}\n\nfunction getCommands(player: Player): Command<any>[] {\n  return COMMANDS.filter((c) => {\n    return c.depth == 0 && c.data?.requires(player);\n  });\n}\n\nfunction getMaxPages(player: Player): number {\n  const commands = getCommands(player);\n  if (commands.length == 0) return 0;\n  return Math.ceil(commands.length / 5);\n}\n\nconst root = new Command({\n  name: \"help\",\n  description: \"Provides help/list of commands.\",\n  aliases: [\"?\", \"h\"],\n}).executes((ctx) => {\n  // show page 1\n  const maxPages = getMaxPages(ctx.sender);\n  const commands = getCommands(ctx.sender).slice(1 * 5 - 5, 1 * 5);\n  sendPageHeader(ctx.sender, 1, maxPages);\n  for (const cmd of commands) {\n    sendArguments(cmd, cmd, [], ctx.sender);\n  }\n});\n\nroot.int(\"page\").executes((ctx, p) => {\n  // shows page\n  const maxPages = getMaxPages(ctx.sender);\n  if (p > maxPages) p = maxPages;\n  const commands = getCommands(ctx.sender).slice(p * 5 - 5, p * 5);\n  sendPageHeader(ctx.sender, p, maxPages);\n  for (const cmd of commands) {\n    sendArguments(cmd, cmd, [], ctx.sender);\n  }\n});\n\nroot\n  .argument(new CommandNameArgumentType(\"command\"))\n  .executes((ctx, command) => {\n    // shows command\n    const cmd = COMMANDS.filter(\n      (c) => c.depth == 0 && c.data.name == command\n    )[0];\n    ctx.sender.tell(\n      `\u00A7e${cmd.data.name}: ${\n        cmd.data.aliases ? `aliases (${cmd.data.aliases.join(\", \")})` : \"\"\n      }`\n    );\n    ctx.sender.tell(`\u00A7e${cmd.data.description}`);\n    ctx.sender.tell(`Usage:`);\n    sendArguments(cmd, cmd, [], ctx.sender);\n  });\n", "import { world } from \"@minecraft/server\";\r\nimport { text } from \"../../../../rubedo/lang/text.js\";\r\nimport { Command } from \"../../../../rubedo/lib/Command/Command.js\";\r\nimport { confirmAction } from \"../../../../rubedo/lib/Form/utils.js\";\r\nimport { getRole, isLockedDown, kick, setLockDown } from \"../../utils.js\";\r\n\r\nnew Command({\r\n  name: \"lockdown\",\r\n  description: \"Toggles the servers lockdown, meaning no one can join\",\r\n  requires: (player) => getRole(player) == \"admin\",\r\n}).executes((ctx) => {\r\n  if (isLockedDown()) {\r\n    setLockDown(false);\r\n    ctx.sender.tell(`\u00A7aUnlocked the server!`);\r\n  } else {\r\n    ctx.reply(`\u00A7aClose chat to confirm lockdown`);\r\n    confirmAction(ctx.sender, text[\"commands.lockdown.confirm\"], () => {\r\n      setLockDown(true);\r\n      for (const player of world.getPlayers()) {\r\n        if (getRole(player) == \"admin\") continue;\r\n        kick(player, text[\"lockdown.kick.message\"]());\r\n      }\r\n      world.say(`\u00A7l\u00A7cServer is now LOCKED!`);\r\n    });\r\n  }\r\n});\r\n", "import { Player } from \"@minecraft/server\";\nimport { TABLES } from \"../../tables.js\";\nimport type { IMuteData } from \"../../types.js\";\nimport { durationToMs } from \"../../../../utils.js\";\n\nexport class Mute {\n  length: number;\n  /**\n   * Gets the mute data for this player\n   */\n  static getMuteData(player: Player): IMuteData {\n    return TABLES.mutes.get(player.name);\n  }\n  /**\n   * Mutes a player for a length\n   */\n  constructor(\n    player: Player,\n    duration?: string,\n    reason: string = \"No Reason\",\n    by: string = \"Rubedo Auto Mod\"\n  ) {\n    const msLength = duration ? durationToMs(duration) : null;\n    const data: IMuteData = {\n      playerName: player.name,\n      date: Date.now(),\n      duration: msLength,\n      expire: msLength ? msLength + Date.now() : null,\n      reason: reason,\n      by: by,\n    };\n    TABLES.mutes.set(player.name, data);\n  }\n}\n", "import { ArgumentTypes, Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { Mute } from \"../models/Mute.js\";\nimport { getRole } from \"../../utils.js\";\nimport { TABLES } from \"../../tables.js\";\nimport { msToTime } from \"../../../../utils.js\";\nimport { text } from \"../../../../rubedo/lang/text.js\";\n\nconst root = new Command({\n  name: \"mute\",\n  description: \"Manage Mutes\",\n  requires: (player) => [\"admin\", \"moderator\"].includes(getRole(player)),\n});\n\nroot\n  .literal({\n    name: \"add\",\n    description: \"Mutes a player\",\n  })\n  .argument(new ArgumentTypes.player(\"player\"))\n  .argument(new ArgumentTypes.duration(\"duration\"))\n  .string(\"reason\")\n  .executes((ctx, player, duration, reason) => {\n    new Mute(player, duration, reason, ctx.sender.name);\n    ctx.reply(\n      `\u00A7cMuted \u00A7f\"\u00A7a${player.name}\u00A7f\" \u00A7cfor ${duration} Because: \"${reason}\" \u00A7aSuccessfully`\n    );\n    player.tell(\n      `\u00A7cYou have been muted by \u00A7f\"${ctx.sender.name}\" \u00A7cfor ${duration} Because: \"${reason}\"`\n    );\n  });\n\nroot\n  .literal({\n    name: \"remove\",\n    description: \"un-mutes a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const mute = TABLES.mutes\n      .values()\n      .find((mute) => mute.playerName == playerName);\n    if (!mute) return ctx.reply(`${playerName} is not muted!`);\n\n    TABLES.mutes.delete(mute.playerName);\n    try {\n      ctx.sender.runCommandAsync(`ability \"${playerName}\" mute false`);\n    } catch (error) {}\n    ctx.reply(`\u00A7a${playerName}\u00A7r has been UnMuted!`);\n  });\n\nroot\n  .literal({\n    name: \"list\",\n    description: \"Lists all freezes\",\n  })\n  .executes((ctx) => {\n    const mutes = TABLES.mutes.values();\n    if (mutes.length == 0) return ctx.sender.tell(`\u00A7cNo one is muted!`);\n    ctx.sender.tell(`\u00A72--- Showing Mutes (${mutes.length}) ---`);\n    for (const mute of mutes) {\n      ctx.sender.tell(\n        text[\"commands.mutes.list.player\"](\n          mute.playerName,\n          mute.reason,\n          mute.expire ? msToTime(mute.expire) : \"Forever\"\n        )\n      );\n    }\n  });\n", "import { Location } from \"@minecraft/server\";\nimport { Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { getRole } from \"../../utils.js\";\nimport { Npc } from \"../models/Npc.js\";\n\nnew Command({\n  name: \"npc\",\n  description: \"Spawns a npc at your coordinates\",\n  requires: (player) => getRole(player) == \"admin\",\n}).executes((ctx) => {\n  const { x, y, z } = ctx.sender.location;\n  new Npc(new Location(x, y, z), ctx.sender.dimension);\n  ctx.reply(`Spawned a verified npc at your current location`);\n});\n", "import { Dimension, Entity, Location } from \"@minecraft/server\";\r\nimport { clearNpcLocations, NPC_LOCATIONS } from \"../../index.js\";\r\nimport { TABLES } from \"../../tables.js\";\r\nimport type { INpcLocation } from \"../../types.js\";\r\nimport { LocationEquals } from \"../../../../utils.js\";\r\n\r\nexport class Npc {\r\n  /**\r\n   * Checks if a entity is a valid npc\r\n   * @param entity npc\r\n   */\r\n  static isValid(entity: Entity): boolean {\r\n    if (entity.typeId != \"minecraft:npc\") return false;\r\n    if (NPC_LOCATIONS.find((l) => LocationEquals(l, entity.location)))\r\n      return true;\r\n    return TABLES.npcs.keys().find((key) => entity.id == key) ? true : false;\r\n  }\r\n  /**\r\n   * Adds a new verified npc to the world\r\n   */\r\n  constructor(location: Location, dimension: Dimension) {\r\n    NPC_LOCATIONS.push(location);\r\n    const entity = dimension.spawnEntity(\"minecraft:npc\", location);\r\n\r\n    const data: INpcLocation = {\r\n      dimension: entity.dimension.id,\r\n      x: entity.location.x,\r\n      y: entity.location.y,\r\n      z: entity.location.z,\r\n    };\r\n    TABLES.npcs.set(entity.id, data);\r\n    clearNpcLocations();\r\n  }\r\n}\r\n", "import { system } from \"@minecraft/server\";\nimport { Command } from \"../../../../rubedo/lib/Command/Command\";\n\nasync function getServerTPS(): Promise<number> {\n  let startTime = Date.now();\n  let ticks = 0;\n  return new Promise((resolve) => {\n    let s = system.runSchedule(() => {\n      if (Date.now() - startTime < 1000) {\n        ticks++;\n      } else {\n        system.clearRunSchedule(s);\n        resolve(ticks);\n      }\n    });\n  });\n}\n\nnew Command({\n  name: \"ping\",\n  description: \"Returns the current Ticks Per Second of the servers ping\",\n}).executes(async (ctx) => {\n  let ticks = await getServerTPS();\n  ctx.reply(\n    `\u00A7aCurrent Ticks Per Second: ${\n      ticks > 18 ? \"\u00A7f{ \u00A7aGood\" : ticks > 13 ? \"\u00A7f{ \u00A7eOk\" : \"\u00A7f{ \u00A7cSevere\"\n    } ${ticks} \u00A7f}`\n  );\n});\n", "import { BlockLocation } from \"@minecraft/server\";\nimport { Region } from \"../models/Region.js\";\nimport { getRole } from \"../../utils.js\";\nimport { Command } from \"../../../../rubedo/lib/Command/Command.js\";\n\nconst command = new Command({\n  name: \"region\",\n  description: \"Create a Region\",\n  requires: (player) => getRole(player) == \"admin\",\n});\n\ncommand\n  .literal({\n    name: \"add\",\n    description: \"Adds a new protection region\",\n  })\n  .int(\"from_x\")\n  .int(\"from_z\")\n  .int(\"to_x\")\n  .int(\"to_z\")\n  .executes((ctx, from_x, from_z, to_x, to_z) => {\n    new Region(\n      { x: from_x, z: from_z },\n      { x: to_x, z: to_z },\n      ctx.sender.dimension.id\n    );\n    ctx.reply(\n      `Created Region From ${from_x} -64 ${from_z} ${to_x} 320 ${to_z}`\n    );\n  });\n\ncommand\n  .literal({\n    name: \"remove\",\n    description: \"Removes a region at the players current position\",\n  })\n  .executes((ctx) => {\n    const loc = new BlockLocation(\n      ctx.sender.location.x,\n      ctx.sender.location.y,\n      ctx.sender.location.z\n    );\n    const r = Region.removeRegionAtBlockLocation(loc, ctx.sender.dimension.id);\n    if (r) {\n      ctx.reply(`Removed Region at ${loc.x} ${loc.y} ${loc.z}`);\n    } else {\n      ctx.reply(`Failed to find/remove region at ${loc.x} ${loc.y} ${loc.z}`);\n    }\n  });\n\ncommand\n  .literal({\n    name: \"removeAll\",\n    description: \"Removes all regions\",\n  })\n  .executes((ctx) => {\n    Region.getAllRegions().forEach((r) => r.delete());\n    ctx.reply(`Removed All regions`);\n  });\n\ncommand\n  .literal({\n    name: \"list\",\n    description: \"Lists all regions and positions\",\n  })\n  .executes((ctx) => {\n    const regions = Region.getAllRegions();\n    for (const region of regions) {\n      ctx.reply(\n        `Region from ${region.from.x}, ${region.from.z} to ${region.to.x}, ${region.to.z} in dimension ${region.dimensionId}`\n      );\n    }\n    if (regions.length == 0) return ctx.reply(`No regions have been made yet`);\n  });\n\nconst permission = command.literal({\n  name: \"permission\",\n  description: \"Handles permissions for regions\",\n});\n\npermission\n  .literal({\n    name: \"set\",\n    description:\n      \"Sets a certain permission on the region the player is currently in to a value\",\n  })\n  .array(\"key\", [\"doorsAndSwitches\", \"openContainers\", \"pvp\"] as const)\n  .boolean(\"value\")\n  .executes((ctx, key, value) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    region.changePermission(key, value);\n    ctx.reply(`Changed permission ${key} to ${value}`);\n  });\n\npermission\n  .literal({\n    name: \"list\",\n    description: \"Lists the permissions for the current region\",\n  })\n  .executes((ctx) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    ctx.reply(\n      `Current region permissions ${JSON.stringify(region.permissions)}`\n    );\n  });\n\nconst entityCommands = permission.literal({\n  name: \"entities\",\n  description: \"Holds the subCommands for adding or removing allowedEntities\",\n});\n\nentityCommands\n  .literal({\n    name: \"add\",\n    description: \"Adds a entity to the allowed entities list\",\n  })\n  .string(\"entity\")\n  .executes((ctx, entity) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    const currentAllowedEntities = region.permissions.allowedEntities;\n    currentAllowedEntities.push(entity);\n    region.changePermission(\"allowedEntities\", currentAllowedEntities);\n    ctx.reply(\n      `Added entity ${entity} to the allowed entities of the region your currently standing in`\n    );\n  });\n\nentityCommands\n  .literal({\n    name: \"remove\",\n    description: \"Removes a entity from the allowed entities in the region\",\n  })\n  .string(\"entity\")\n  .executes((ctx, entity) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    let currentAllowedEntities = region.permissions.allowedEntities;\n    if (!currentAllowedEntities.includes(entity))\n      return ctx.reply(\n        `The entity ${entity} is not allowed to enter the region`\n      );\n    currentAllowedEntities = currentAllowedEntities.filter((v) => v != entity);\n    region.changePermission(\"allowedEntities\", currentAllowedEntities);\n    ctx.reply(\n      `Removed entity ${entity} to the allowed entities of the region your currently standing in`\n    );\n  });\n", "import { Events } from \"@minecraft/server\";\r\nimport { ENCHANTMENTS } from \"./config/enchantments\";\r\n\r\n/**\r\n * The roles that are in this server\r\n */\r\nexport enum ROLES {\r\n  member,\r\n  admin,\r\n  moderator,\r\n  builder,\r\n}\r\n\r\nexport type ConfigType = {\r\n  /**\r\n   * {@link BANNED_ITEMS}\r\n   */\r\n  banned_items: string[];\r\n  /**\r\n   * {@link BANNED_BLOCKS}\r\n   */\r\n  banned_blocks: string[];\r\n  /**\r\n   * {@link ENCHANTMENTS}\r\n   */\r\n  enchantments: {\r\n    [Property in keyof typeof ENCHANTMENTS]: number;\r\n  };\r\n  /**\r\n   * Appeal Link for the server\r\n   */\r\n  appealLink: string;\r\n};\r\n\r\nexport interface LogData {\r\n  /**\r\n   * An optional playerName who is associated with this log\r\n   * @example \"Smell of curry\"\r\n   */\r\n  playerName?: string;\r\n  /**\r\n   * The message for this log\r\n   * @example \"Smell of curry is bad\"\r\n   */\r\n  message: string;\r\n  /**\r\n   * An optional property to list what protection this was from\r\n   */\r\n  protection?: string;\r\n}\r\n\r\nexport type EventsReturnType<T extends keyof Events> = (\r\n  arg: Parameters<Parameters<Events[T][\"subscribe\"]>[0]>[0]\r\n) => void;\r\n\r\nexport type IProtectionsConfig = {\r\n  [key: string]: boolean | string | number;\r\n  /**\r\n   * If this protection is enabled\r\n   */\r\n  enabled: boolean;\r\n};\r\n\r\nexport interface IBanData {\r\n  /**\r\n   * The unique id of this ban\r\n   */\r\n  key: string;\r\n  /**\r\n   * The playersName of who was banned\r\n   * @example \"Smell of curry\"\r\n   */\r\n  playerName: string;\r\n  /**\r\n   * The date in MS when this player was banned\r\n   */\r\n  date: number;\r\n  /**\r\n   * The duration in ms that this ban will be for\r\n   * if null player is banned forever\r\n   */\r\n  duration?: number;\r\n  /**\r\n   * When this ban will expire, if null it will never expire meaning player is banned forever\r\n   */\r\n  expire?: number;\r\n  /**\r\n   * The reason for why this player was banned\r\n   * @example \"Hacking\"\r\n   */\r\n  reason?: string;\r\n  /**\r\n   * Who banned this player\r\n   * @example \"Smell of curry\"\r\n   * @example \"Rubedo Anti Cheat\"\r\n   */\r\n  by?: string;\r\n}\r\n\r\nexport interface IFreezeData {\r\n  /**\r\n   * Players name of who was banned\r\n   */\r\n  playerName: string;\r\n  /**\r\n   * Unique id of this freeze instance\r\n   */\r\n  key: string;\r\n  /**\r\n   * The reason for this freeze\r\n   */\r\n  reason?: string;\r\n  /**\r\n   * The location of this freeze\r\n   */\r\n  location: {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    dimension: string;\r\n  };\r\n}\r\n\r\nexport interface IMuteData {\r\n  /**\r\n   * Players name of who is muted\r\n   * @example \"Smell of curry\"\r\n   */\r\n  playerName: string;\r\n  /**\r\n   * The date this player got muted\r\n   */\r\n  date: number;\r\n  /**\r\n   * The duration of this mute in ms\r\n   * if null player is muted forever\r\n   */\r\n  duration?: number;\r\n  /**\r\n   * When this players mute will expire in ms\r\n   * if null this mute will never expire\r\n   */\r\n  expire?: number;\r\n  /**\r\n   * Why this player is muted\r\n   * @example \"Spamming\"\r\n   */\r\n  reason?: string;\r\n  /**\r\n   * Who muted this player\r\n   * @example \"Smell of curry\"\r\n   * @example \"Rubedo Anti Cheat\"\r\n   */\r\n  by?: string;\r\n}\r\n\r\nexport interface INpcLocation {\r\n  dimension: string;\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n}\r\n\r\nexport interface IRegionDB {\r\n  dimensionId: string;\r\n  from: IRegionCords;\r\n  to: IRegionCords;\r\n  key: string;\r\n  permissions: IRegionPermissions;\r\n}\r\n\r\nexport interface IRegionCords {\r\n  x: number;\r\n  z: number;\r\n}\r\n\r\nexport interface IRegionPermissions {\r\n  /**\r\n   * if the player can use chests, default: true\r\n   */\r\n  doorsAndSwitches: Boolean;\r\n  /**\r\n   * if the player can use doors, default: true\r\n   */\r\n  openContainers: Boolean;\r\n  /**\r\n   * if players can fight, default: false\r\n   */\r\n  pvp: Boolean;\r\n  /**\r\n   * the entities allowed in this region\r\n   */\r\n  allowedEntities: Array<string>;\r\n}\r\n", "import {\n  ArgumentTypes,\n  Command,\n} from \"../../../../rubedo/lib/Command/Command.js\";\nimport {\n  getRole,\n  getServerOwner,\n  isServerOwner,\n  setRole,\n  setServerOwner,\n} from \"../../utils.js\";\nimport { TABLES } from \"../../tables.js\";\nimport { confirmAction } from \"../../../../rubedo/lib/Form/utils\";\nimport { ROLES } from \"../../types\";\n\n// Helper\nconst StringIsNumber = (value: any) => isNaN(Number(value)) === false;\n\n// Turn enum into array\nfunction ToArray(enumme: any) {\n  return (\n    Object.keys(enumme)\n      // @ts-ignore\n      .filter(StringIsNumber)\n      .map((key) => enumme[key])\n  );\n}\n\nconst root = new Command({\n  name: \"role\",\n  description: \"Changes the role for a player\",\n  requires: (player) => getRole(player) == \"admin\" || isServerOwner(player),\n});\n\nroot\n  .literal({\n    name: \"set\",\n    description: \"Sets the role for a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .argument(new ArgumentTypes.array(\"role\", ToArray(ROLES) as string[]))\n  .executes((ctx, playerName, role) => {\n    setRole(playerName, role as keyof typeof ROLES);\n    ctx.reply(`Changed role of ${playerName} to ${role}`);\n  });\n\nroot\n  .literal({\n    name: \"get\",\n    description: \"Gets the role of a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const role = getRole(playerName);\n    ctx.reply(`${playerName} has role: ${role}`);\n  });\n\nconst ownerRoot = root.literal({\n  name: \"owner\",\n  description: \"Manages the owner\",\n});\n\nownerRoot\n  .literal({\n    name: \"get\",\n    description: \"Gets the owner of the world\",\n  })\n  .executes((ctx) => {\n    const ownerId = getServerOwner();\n    const ids = TABLES.ids.collection();\n    const ownerName = Object.keys(ids).find((key) => ids[key] === ownerId);\n    ctx.reply(`\u00A7aServer Owner: ${ownerName} (id: ${ownerId})`);\n  });\n\nownerRoot\n  .literal({\n    name: \"transfer\",\n    description: \"Transfers the owner of the world\",\n    requires: (player) => isServerOwner(player),\n  })\n  .argument(new ArgumentTypes.player())\n  .executes((ctx, player) => {\n    confirmAction(\n      ctx.sender,\n      `Are you sure you want to transfer the server ownership to ${player.name}, this action is not reversible!`,\n      () => {\n        setServerOwner(player);\n        ctx.reply(\n          `\u00A7aSet the server Owner to: ${player.name} (id: ${player.id})`\n        );\n      }\n    );\n    ctx.reply(`\u00A7aClose chat to confirm`);\n  });\n\nownerRoot\n  .literal({\n    name: \"clear\",\n    description: \"clear's the owner of the world\",\n    requires: (player) => isServerOwner(player),\n  })\n  .executes((ctx) => {\n    confirmAction(\n      ctx.sender,\n      \"Are you sure you want to clear the server owner, this action is not reversible!\",\n      () => {\n        setServerOwner(null);\n        ctx.reply(\n          `\u00A7aCleared the server owner! run \"/reload\" or reload world to run \"/function start\" again!`\n        );\n      }\n    );\n    ctx.reply(`\u00A7aClose chat to confirm`);\n  });\n", "import { Player } from \"@minecraft/server\";\r\nimport { ActionFormData } from \"@minecraft/server-ui\";\r\nimport { TIMEOUT_THRESHOLD } from \"../../../config/form\";\r\nimport type { ButtonCallback, IActionFormButton } from \"../types\";\r\n\r\nexport class ActionForm {\r\n  /**\r\n   *  the title that this form should have\r\n   */\r\n  title?: string;\r\n  /**\r\n   * extra text that should be displayed in the form\r\n   */\r\n  body?: string;\r\n  /**\r\n   * The buttons this form has\r\n   */\r\n  private buttons: IActionFormButton[];\r\n\r\n  /**\r\n   * The default minecraft form this form is based on\r\n   */\r\n  private form: ActionFormData;\r\n\r\n  /**\r\n   * The amount of times it takes to show this form in ms\r\n   * if this value goes above 200 it will time out\r\n   */\r\n  private triedToShow: number;\r\n\r\n  /**\r\n   * Creates a new form to be shown to a player\r\n   * @param title the title that this form should have\r\n   * @param body extra text that should be displayed in the form\r\n   */\r\n  constructor(title?: string, body?: string) {\r\n    this.title = title;\r\n    this.body = body;\r\n    this.form = new ActionFormData();\r\n\r\n    if (title) this.form.title(title);\r\n    if (body) this.form.body(body);\r\n\r\n    this.buttons = [];\r\n\r\n    this.triedToShow = 0;\r\n  }\r\n\r\n  /**\r\n   * Adds a button to this form\r\n   * @param text text to show on this button\r\n   * @param iconPath the path this button shows\r\n   * @param callback what happens when this button is clicked\r\n   * @example ```\r\n   * addButton(\"settings\", \"textures/items/sum\")\r\n   * ```\r\n   */\r\n  addButton(\r\n    text: string,\r\n    iconPath: string = null,\r\n    callback: ButtonCallback\r\n  ): ActionForm {\r\n    this.buttons.push({\r\n      text: text,\r\n      iconPath: iconPath,\r\n      callback: callback,\r\n    });\r\n    this.form.button(text, iconPath);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows this form to the player\r\n   * @param player player to show to\r\n   */\r\n  show(player: Player): void {\r\n    this.form.show(player).then((response) => {\r\n      if (response.canceled) {\r\n        if (response.cancelationReason == \"userBusy\") {\r\n          // check time and reshow form\r\n          if (this.triedToShow > TIMEOUT_THRESHOLD)\r\n            return player.tell(\r\n              `\u00A7cForm Timeout: tried to show form, but you were busy (close chat after running command)`\r\n            );\r\n          this.triedToShow++;\r\n          this.show(player);\r\n        }\r\n        return;\r\n      }\r\n      this.buttons[response.selection].callback?.();\r\n    });\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { ModalFormData } from \"@minecraft/server-ui\";\r\nimport { TIMEOUT_THRESHOLD } from \"../../../config/form\";\r\nimport type { AppendFormField, IModalFormArg, Range } from \"../types\";\r\nimport { FormCallback } from \"./FormCallback\";\r\n\r\nexport class ModalForm<\r\n  Callback extends Function = (ctx: FormCallback) => void\r\n> {\r\n  /**\r\n   *  the title that this form should have\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * The default minecraft form this form is based on\r\n   */\r\n  private form: ModalFormData;\r\n\r\n  /**\r\n   * The arguments this form has\r\n   */\r\n  private args: IModalFormArg[];\r\n\r\n  /**\r\n   * Creates a new form to be shown to a player\r\n   * @param title the title that this form should have\r\n   */\r\n  constructor(title?: string) {\r\n    this.title = title;\r\n    this.form = new ModalFormData();\r\n\r\n    if (title) this.form.title(title);\r\n\r\n    this.args = [];\r\n  }\r\n\r\n  /**\r\n   * Adds a dropdown to this form\r\n   * @param label label to show on dropdown\r\n   * @param options the available options for this dropdown\r\n   * @param defaultValueIndex the default value index\r\n   * @returns this\r\n   */\r\n  addDropdown<T extends ReadonlyArray<string>>(\r\n    label: string,\r\n    options: T,\r\n    defaultValueIndex?: number\r\n  ): ModalForm<AppendFormField<Callback, T[number]>> {\r\n    // @ts-ignore\r\n    this.args.push({ type: \"dropdown\", options: options });\r\n    // @ts-ignore\r\n    this.form.dropdown(label, options, defaultValueIndex);\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a slider to this form\r\n   * @param label label to be shown on this slider\r\n   * @param minimumValue the smallest value this can be\r\n   * @param maximumValue the maximum value this can be\r\n   * @param valueStep how this slider increments\r\n   * @param defaultValue the default value in slider\r\n   * @returns this\r\n   */\r\n  addSlider<T extends number, U extends number>(\r\n    label: string,\r\n    minimumValue: T,\r\n    maximumValue: U,\r\n    valueStep: number,\r\n    defaultValue?: number\r\n  ): ModalForm<AppendFormField<Callback, Range<T, U>>> {\r\n    this.args.push({ type: \"slider\" });\r\n    this.form.slider(\r\n      label,\r\n      minimumValue,\r\n      maximumValue,\r\n      valueStep,\r\n      defaultValue\r\n    );\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a toggle to this form\r\n   * @param label the name of this toggle\r\n   * @param defaultValue the default toggle value could be true or false\r\n   * @returns\r\n   */\r\n  addToggle(\r\n    label: string,\r\n    defaultValue?: boolean\r\n  ): ModalForm<AppendFormField<Callback, boolean>> {\r\n    this.args.push({ type: \"toggle\" });\r\n    this.form.toggle(label, defaultValue);\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a text field to this form\r\n   * @param label label for this textField\r\n   * @param placeholderText the text that shows on this field\r\n   * @param defaultValue the default value that this field has\r\n   */\r\n  addTextField(\r\n    label: string,\r\n    placeholderText: string,\r\n    defaultValue?: string\r\n  ): ModalForm<AppendFormField<Callback, string>> {\r\n    this.args.push({ type: \"textField\" });\r\n    this.form.textField(label, placeholderText, defaultValue);\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows this form to a player\r\n   * @param player player to show to\r\n   * @param callback sends a callback when this form is submitted\r\n   */\r\n  async show(player: Player, callback: Callback) {\r\n    for (let i = 0; i < TIMEOUT_THRESHOLD; i++) {\r\n      let response = await this.form.show(player);\r\n      if (response.cancelationReason == \"userBusy\") continue;\r\n      callback(\r\n        new FormCallback(this, player, callback),\r\n        ...response.formValues.map((v, i) =>\r\n          this.args[i].type == \"dropdown\" ? this.args[i].options[v] : v\r\n        )\r\n      );\r\n      return;\r\n    }\r\n    return player.tell(\r\n      `\u00A7cForm Timeout: tried to show form, but you were busy (close chat after running command)`\r\n    );\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { ActionForm } from \"./ActionForm\";\r\nimport { MessageForm } from \"./MessageForm\";\r\nimport { ModalForm } from \"./ModelForm\";\r\n\r\nexport class FormCallback {\r\n  /**\r\n   * form that was used in this call\r\n   */\r\n  private form: ActionForm | MessageForm | ModalForm<any>;\r\n  /**\r\n   * player that this form used\r\n   */\r\n  private player: Player;\r\n\r\n  /**\r\n   * the function that was called\r\n   */\r\n  private callback: () => void;\r\n\r\n  /**\r\n   * Creates a new form callback instance that can be used by\r\n   * buttons, and args to run various functions\r\n   * @param form form that is used in this call\r\n   */\r\n  constructor(\r\n    form: ActionForm | MessageForm | ModalForm<any>,\r\n    player: Player,\r\n    callback: any\r\n  ) {\r\n    this.form = form;\r\n    this.player = player;\r\n    this.callback = callback;\r\n  }\r\n\r\n  /**\r\n   * Reshow the form and shows the user a error message\r\n   * @param message error message to show\r\n   */\r\n  error(message: string) {\r\n    new MessageForm(\"Error\", message)\r\n      .setButton1(\"Return to form\", () => {\r\n        this.form.show(this.player, this.callback);\r\n      })\r\n      .setButton2(\"Cancel\", null)\r\n      .show(this.player);\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { ENCHANTMENTS } from \"../../config/enchantments\";\r\nimport { getConfigId, setConfigId } from \"../../utils\";\r\nimport { APPEAL_LINK } from \"../../config/moderation\";\r\nimport { ActionForm } from \"../../../../rubedo/lib/Form/Models/ActionForm\";\r\nimport { ModalForm } from \"../../../../rubedo/lib/Form/Models/ModelForm\";\r\n\r\nexport function manageBannedItemsForm(player: Player) {\r\n  new ActionForm(\"Manage Banned Items\")\r\n    .addButton(\"Remove a Banned Item\", null, () => {\r\n      removeBannedItemForm(player);\r\n    })\r\n    .addButton(\"Ban an item\", null, () => {\r\n      addBannedItemForm(player);\r\n    })\r\n    .show(player);\r\n}\r\nexport function removeBannedItemForm(player: Player) {\r\n  new ModalForm(\"Remove Banned Items\")\r\n    .addDropdown(\"Select item to remove\", getConfigId(\"banned_items\"))\r\n    .show(player, (ctx, item) => {\r\n      let items = getConfigId(\"banned_items\");\r\n      items = items.filter((p) => p != item);\r\n      setConfigId(\"banned_items\", items);\r\n      player.tell(`Removed Banned item \"${item}\"`);\r\n    });\r\n}\r\n\r\nexport function addBannedItemForm(player: Player) {\r\n  new ModalForm(\"Add Banned Item\")\r\n    .addTextField(\"Item Id\", \"minecraft:string\")\r\n    .show(player, (ctx, item) => {\r\n      let items = getConfigId(\"banned_items\");\r\n      if (items.includes(item))\r\n        return ctx.error(`\u00A7cItem \"${item}\" is already banned`);\r\n      items.push(item);\r\n      setConfigId(\"banned_items\", items);\r\n      player.tell(`Banned the item \"${item}\"`);\r\n    });\r\n}\r\n\r\nexport function manageBannedBlocksForm(player: Player) {\r\n  new ActionForm(\"Manage Banned Blocks\")\r\n    .addButton(\"Remove a Banned Block\", null, () => {\r\n      removeBannedBlockForm(player);\r\n    })\r\n    .addButton(\"Ban an block\", null, () => {\r\n      addBannedBlockForm(player);\r\n    })\r\n    .show(player);\r\n}\r\n\r\nexport function removeBannedBlockForm(player: Player) {\r\n  new ModalForm(\"Remove Banned Block\")\r\n    .addDropdown(\"Select block to remove\", getConfigId(\"banned_blocks\"))\r\n    .show(player, (ctx, block) => {\r\n      let blocks = getConfigId(\"banned_blocks\");\r\n      blocks = blocks.filter((p) => p != block);\r\n      setConfigId(\"banned_blocks\", blocks);\r\n      player.tell(`Removed Banned block \"${block}\"`);\r\n    });\r\n}\r\n\r\nexport function addBannedBlockForm(player: Player) {\r\n  new ModalForm(\"Add Banned Block\")\r\n    .addTextField(\"Block Id\", \"minecraft:barrier\")\r\n    .show(player, (ctx, block) => {\r\n      let blocks = getConfigId(\"banned_blocks\");\r\n      if (blocks.includes(block))\r\n        return ctx.error(`\u00A7cBlock \"${block}\" is already banned`);\r\n      blocks.push(block);\r\n      setConfigId(\"banned_blocks\", blocks);\r\n      player.tell(`Banned the block \"${block}\"`);\r\n    });\r\n}\r\n\r\nexport function manageEnchantmentLevelsForm(player: Player) {\r\n  new ModalForm(\"Manage Enchantment Levels\")\r\n    .addDropdown(\"Enchantment to change\", Object.keys(ENCHANTMENTS), 0)\r\n    .addTextField(\"Level (number)\", \"5\")\r\n    .show(player, (ctx, enchantment, levelString) => {\r\n      if (isNaN(levelString as any))\r\n        return ctx.error(\r\n          `\u00A7c\"${levelString}\" is not a number, please enter a value like, \"3\", \"9\", etc.`\r\n        );\r\n      const level = parseInt(levelString);\r\n      let enchants = getConfigId(\"enchantments\");\r\n      enchants[enchantment as keyof typeof ENCHANTMENTS] = level;\r\n      setConfigId(\"enchantments\", enchants);\r\n      player.tell(`Set max level for ${enchantment} to ${level}`);\r\n    });\r\n}\r\n\r\nexport function manageAppealLinkForm(player: Player) {\r\n  new ModalForm(\"Manage Appeal Link\")\r\n    .addTextField(\"Appeal Link\", APPEAL_LINK)\r\n    .show(player, (ctx, link) => {\r\n      setConfigId(\"appealLink\", link);\r\n      player.tell(`Changed the servers appeal link to ${link}`);\r\n    });\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport type { IProtectionsConfig } from \"../../types\";\r\nimport { PROTECTIONS } from \"../../protections\";\r\nimport { Protection } from \"../models/Protection\";\r\nimport { showHomeForm } from \"./home\";\r\nimport { ModalForm } from \"../../../../rubedo/lib/Form/Models/ModelForm\";\r\nimport { ActionForm } from \"../../../../rubedo/lib/Form/Models/ActionForm\";\r\n\r\nexport function showAutoModHomeForm(player: Player) {\r\n  const form = new ActionForm(\"Manage Protections\");\r\n\r\n  for (const protection of Object.values(PROTECTIONS)) {\r\n    form.addButton(protection.name, protection.iconPath, () => {\r\n      showProtectionConfig(protection, player);\r\n    });\r\n  }\r\n  form\r\n    .addButton(\"Back\", \"textures/ui/arrow_dark_left_stretch.png\", () => {\r\n      showHomeForm(player);\r\n    })\r\n    .show(player);\r\n}\r\n\r\nexport function showProtectionConfig(protection: Protection, player: Player) {\r\n  const data = protection.getConfig();\r\n  const form = new ModalForm(\r\n    `Manage ${protection.name} Protection Config`\r\n  ).addToggle(\"Enabled\", data[\"enabled\"]);\r\n  let keys: string[] = [];\r\n  for (const [key, value] of Object.entries(protection.configDefault)) {\r\n    keys.push(key);\r\n    if (typeof value.defaultValue == \"boolean\") {\r\n      form.addToggle(value.description, data[key] as boolean);\r\n    } else if (typeof value.defaultValue == \"number\") {\r\n      form.addSlider(value.description, 0, 100, 1, data[key] as number);\r\n    } else {\r\n      form.addTextField(value.description, null, data[key] as string);\r\n    }\r\n  }\r\n  form.show(player, (ctx, enabled, ...keys) => {\r\n    if (enabled != data[\"enabled\"]) {\r\n      if (enabled) protection.enable();\r\n      if (!enabled) protection.disable();\r\n    }\r\n    let config: IProtectionsConfig = {\r\n      enabled: enabled,\r\n    };\r\n    for (const [i, key] of Object.keys(protection.configDefault).entries()) {\r\n      config[key] = keys[i];\r\n    }\r\n    protection.setConfig(config);\r\n    player.tell(`Updated config for ${protection.name}!`);\r\n  });\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport * as settings from \"./settings\";\r\nimport * as automod from \"./automod\";\r\nimport { ActionForm } from \"../../../../rubedo/lib/Form/Models/ActionForm\";\r\n\r\nexport function showHomeForm(player: Player) {\r\n  new ActionForm(\"Rubedo Settings\")\r\n    .addButton(\"Auto Mod\", \"textures/ui/permissions_op_crown.png\", () => {\r\n      automod.showAutoModHomeForm(player);\r\n    })\r\n    .addButton(\"Banned items\", \"textures/blocks/sculk_shrieker_top.png\", () => {\r\n      settings.manageBannedItemsForm(player);\r\n    })\r\n    .addButton(\"Banned blocks\", \"textures/blocks/barrier.png\", () => {\r\n      settings.manageBannedBlocksForm(player);\r\n    })\r\n    .addButton(\"Enchantments\", \"textures/items/book_enchanted.png\", () => {\r\n      settings.manageEnchantmentLevelsForm(player);\r\n    })\r\n    .addButton(\"Appeal Link\", \"textures/ui/Feedback.png\", () => {\r\n      settings.manageAppealLinkForm(player);\r\n    })\r\n    .show(player);\r\n}\r\n", "import { Command } from \"../../../../rubedo/lib/Command/Command.js\";\r\nimport { getRole } from \"../../utils.js\";\r\nimport { showHomeForm } from \"../forms/home.js\";\r\n\r\nnew Command({\r\n  name: \"settings\",\r\n  description: \"Opens up the settings menu for the player\",\r\n  requires: (player) => [\"admin\", \"moderator\"].includes(getRole(player)),\r\n}).executes((ctx) => {\r\n  showHomeForm(ctx.sender);\r\n  ctx.sender.tell(`\u00A7aForm request sent, close chat to continue!`);\r\n});\r\n", "import { Player, world } from \"@minecraft/server\";\nimport { Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { getRole } from \"../../utils.js\";\n\nfunction vanish(player: Player, say: boolean) {\n  if (player.hasTag(`spectator`)) {\n    player.runCommandAsync(`gamemode c`);\n    player.triggerEvent(`removeSpectator`);\n    player.removeTag(`spectator`);\n    if (!say) return;\n    world.say({\n      rawtext: [\n        {\n          translate: \"multiplayer.player.joined\",\n          with: [`\u00A7e${player.name}`],\n        },\n      ],\n    });\n  } else {\n    player.runCommandAsync(`gamemode spectator`);\n    player.triggerEvent(`addSpectator`);\n    player.addTag(`spectator`);\n    if (!say) return;\n    world.say({\n      rawtext: [\n        {\n          translate: \"multiplayer.player.left\",\n          with: [`\u00A7e${player.name}`],\n        },\n      ],\n    });\n  }\n}\n\nnew Command({\n  name: \"vanish\",\n  description: \"Toggles Vanish Mode on the sender\",\n  requires: (player) => getRole(player) == \"admin\",\n})\n  .executes((ctx) => {\n    vanish(ctx.sender, false);\n  })\n  .boolean(\"say\")\n  .executes((ctx, say) => {\n    vanish(ctx.sender, say);\n  });\n", "/*\r\n|--------------------------------------------------------------------------\r\n| Version\r\n|--------------------------------------------------------------------------\r\n|\r\n| This is the version of rubedo recommended to NOT CHANGE could cause bugs.\r\n|\r\n*/\r\nexport const VERSION = \"2.7.0-beta\";\r\n\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Game Version\r\n|--------------------------------------------------------------------------\r\n|\r\n| This is the version of minecraft that this version of rubedo\r\n| was made for its a simple constant to tell creators what version\r\n| this gametest api is supposed to work perfectly for.\r\n|\r\n*/\r\nexport const GAME_VERSION = \"1.19.50\";\r\n", "import { VERSION } from \"../../../../rubedo/config/app\";\nimport { Command } from \"../../../../rubedo/lib/Command/Command\";\n\nnew Command({\n  name: \"version\",\n  description: \"Get Current Rubedo Version\",\n  aliases: [\"v\"],\n}).executes((ctx) => {\n  ctx.reply(`Current Rubedo Version: ${VERSION}`);\n});\n", "import { ArgumentTypes, Command } from \"../../../../rubedo/lib/Command/Command.js\";\r\nimport { getRole, kick } from \"../../utils\";\r\n\r\nnew Command({\r\n  name: \"kick\",\r\n  description: \"Kicks a player from the game\",\r\n  requires: (player) => getRole(player) == \"admin\",\r\n})\r\n  .argument(new ArgumentTypes.player())\r\n  .string(\"reason\")\r\n  .executes((ctx, player, reason) => {\r\n    kick(player, [reason]);\r\n    ctx.reply(`\u00A7aKicked ${player.name} from world`);\r\n  });\r\n", "import { TABLES } from \"../../tables.js\";\r\nimport type { LogData } from \"../../types\";\r\n\r\nexport class Log {\r\n  /**\r\n   * The data on this Log\r\n   */\r\n  data: LogData;\r\n  constructor(data: LogData) {\r\n    this.data = data;\r\n    console.warn(`[LOG]: ${data.message}`);\r\n    TABLES.logs.set(Date.now().toString(), data);\r\n  }\r\n}\r\n", "import { PREFIX } from \"../../../../rubedo/config/commands.js\";\r\nimport { ArgumentTypes, Command } from \"../../../../rubedo/lib/Command/Command.js\";\r\nimport { TABLES } from \"../../tables.js\";\r\nimport { getRole } from \"../../utils\";\r\nimport { Log } from \"../models/Log\";\r\n\r\nfunction timeDifference(previous: number) {\r\n  var msPerMinute = 60 * 1000;\r\n  var msPerHour = msPerMinute * 60;\r\n  var msPerDay = msPerHour * 24;\r\n  var msPerMonth = msPerDay * 30;\r\n  var msPerYear = msPerDay * 365;\r\n\r\n  var elapsed = Date.now() - previous;\r\n\r\n  if (elapsed < msPerMinute) {\r\n    return Math.round(elapsed / 1000) + \" seconds ago\";\r\n  } else if (elapsed < msPerHour) {\r\n    return Math.round(elapsed / msPerMinute) + \" minutes ago\";\r\n  } else if (elapsed < msPerDay) {\r\n    return Math.round(elapsed / msPerHour) + \" hours ago\";\r\n  } else if (elapsed < msPerMonth) {\r\n    return \"approximately \" + Math.round(elapsed / msPerDay) + \" days ago\";\r\n  } else if (elapsed < msPerYear) {\r\n    return \"approximately \" + Math.round(elapsed / msPerMonth) + \" months ago\";\r\n  } else {\r\n    return \"approximately \" + Math.round(elapsed / msPerYear) + \" years ago\";\r\n  }\r\n}\r\n\r\nconst root = new Command({\r\n  name: \"log\",\r\n  description: \"Manages the log command\",\r\n  requires: (player) => getRole(player) == \"admin\",\r\n});\r\n\r\nroot\r\n  .literal({\r\n    name: \"add\",\r\n    description: \"Adds a new log\",\r\n  })\r\n  .string(\"message\")\r\n  .executes((ctx, message) => {\r\n    new Log({ message: message });\r\n    ctx.reply(`\u00A7aAdded new log: ${message}`);\r\n  });\r\n\r\nroot\r\n  .literal({\r\n    name: \"getAll\",\r\n    description: \"Gets all logs sorted in descending\",\r\n  })\r\n  .int(\"page\")\r\n  .array(\"order\", [\"ascending\", \"descending\"] as const)\r\n  .executes((ctx, page, order) => {\r\n    const allLogs = Object.entries(TABLES.logs.collection()).sort((a, b) =>\r\n      order == \"ascending\"\r\n        ? parseInt(b[0]) - parseInt(a[0])\r\n        : parseInt(a[0]) - parseInt(b[0])\r\n    );\r\n    if (allLogs.length == 0) return ctx.reply(`\u00A7cNo Logs have been made!`);\r\n    const maxPages = Math.ceil(allLogs.length / 8);\r\n    if (page > maxPages) page = maxPages;\r\n    ctx.reply(\r\n      `\u00A72--- Showing logs page ${page} of ${maxPages} (${PREFIX}log getAll <page: int>) ---`\r\n    );\r\n\r\n    for (const [key, value] of allLogs.slice(page * 8 - 8, page * 8)) {\r\n      ctx.reply(`${timeDifference(parseInt(key))}: ${value.message}`);\r\n    }\r\n  });\r\n\r\nroot\r\n  .literal({\r\n    name: \"getPlayersLogs\",\r\n    description: \"Gets all logs associated with a player\",\r\n  })\r\n  .argument(new ArgumentTypes.playerName())\r\n  .int(\"page\")\r\n  .array(\"order\", [\"ascending\", \"descending\"] as const)\r\n  .executes((ctx, playerName, page, order) => {\r\n    const allLogs = Object.entries(TABLES.logs.collection())\r\n      .filter((v) => v[1].playerName == playerName)\r\n      .sort((a, b) =>\r\n        order == \"ascending\"\r\n          ? parseInt(b[0]) - parseInt(a[0])\r\n          : parseInt(a[0]) - parseInt(b[0])\r\n      );\r\n    if (allLogs.length == 0)\r\n      return ctx.reply(`\u00A7cNo Logs exists for \"${playerName}\"!`);\r\n    const maxPages = Math.ceil(allLogs.length / 8);\r\n    if (page > maxPages) page = maxPages;\r\n    ctx.reply(\r\n      `\u00A72--- Showing logs for \"${playerName}\" page ${page} of ${maxPages} ---`\r\n    );\r\n\r\n    for (const [key, value] of allLogs.slice(page * 8 - 8, page * 8)) {\r\n      ctx.reply(`${timeDifference(parseInt(key))}: ${value.message}`);\r\n    }\r\n  });\r\n\r\nroot\r\n  .literal({\r\n    name: \"getProtectionLogs\",\r\n    description: \"Gets all logs associated with a protection\",\r\n  })\r\n  .string(\"protection\")\r\n  .int(\"page\")\r\n  .array(\"order\", [\"ascending\", \"descending\"] as const)\r\n  .executes((ctx, protection, page, order) => {\r\n    const allLogs = Object.entries(TABLES.logs.collection())\r\n      .filter((v) => v[1].protection == protection)\r\n      .sort((a, b) =>\r\n        order == \"ascending\"\r\n          ? parseInt(b[0]) - parseInt(a[0])\r\n          : parseInt(a[0]) - parseInt(b[0])\r\n      );\r\n    if (allLogs.length == 0)\r\n      return ctx.reply(`\u00A7cNo Logs exists for protection: \"${protection}\"!`);\r\n    const maxPages = Math.ceil(allLogs.length / 8);\r\n    if (page > maxPages) page = maxPages;\r\n    ctx.reply(\r\n      `\u00A72--- Showing logs for Protection: \"${protection}\" page ${page} of ${maxPages} ---`\r\n    );\r\n\r\n    for (const [key, value] of allLogs.slice(page * 8 - 8, page * 8)) {\r\n      ctx.reply(`${timeDifference(parseInt(key))}: ${value.message}`);\r\n    }\r\n  });\r\n\r\nroot\r\n  .literal({\r\n    name: \"clearAll\",\r\n    description: \"Clears all logs\",\r\n  })\r\n  .executes((ctx) => {\r\n    TABLES.logs.clear();\r\n    ctx.reply(`\u00A7aCleared All logs!`);\r\n  });\r\n", "import { ArgumentTypes, Command } from \"../../../../rubedo/lib/Command/Command.js\";\r\nimport { getRole } from \"../../utils\";\r\n\r\nconst root = new Command({\r\n  name: \"teleport\",\r\n  description: \"Teleports entities (players, mobs, etc.).\",\r\n  aliases: [\"tp\"],\r\n  requires: (player) => getRole(player) == \"admin\",\r\n});\r\n\r\nroot\r\n  .argument(new ArgumentTypes.player())\r\n  .location(\"destination\")\r\n  .executes((ctx, player, destination) => {\r\n    player.addTag(\"skip-movement-check\");\r\n    player.teleport(destination, player.dimension, 0, 0);\r\n    ctx.reply(\r\n      `Teleported ${player.name} to ${destination.x} ${destination.y} ${destination.z}`\r\n    );\r\n  });\r\n", "import { Player, system, world } from \"@minecraft/server\";\r\nimport { EntitiesLoad } from \"./EntitiesLoad\";\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: (player: Player) => void;\r\n    delay: number;\r\n    lastCall: number;\r\n  };\r\n} = {};\r\n\r\nEntitiesLoad.subscribe(() => {\r\n  system.runSchedule(() => {\r\n    const players = [...world.getPlayers()];\r\n    for (const [i, player] of players.entries()) {\r\n      for (const CALLBACK of Object.values(CALLBACKS)) {\r\n        if (\r\n          CALLBACK.delay != 0 &&\r\n          system.currentTick - CALLBACK.lastCall < CALLBACK.delay\r\n        )\r\n          continue;\r\n        CALLBACK.callback(player);\r\n        if (i == players.length - 1) CALLBACK.lastCall = system.currentTick;\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\nexport class forEachPlayer {\r\n  /**\r\n   * Subscribes to a callback that returns every player\r\n   * @param callback what to be called for each player\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(\r\n    callback: (player: Player) => void,\r\n    delay: number = 0\r\n  ): number {\r\n    const key = Object.keys(CALLBACKS).length;\r\n    CALLBACKS[key] = { callback: callback, delay: delay, lastCall: 0 };\r\n    return key;\r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n", "import { TABLES } from \"../../tables.js\";\nimport { msToTime } from \"../../../../utils.js\";\nimport { kick, getConfigId } from \"../../utils.js\";\nimport { forEachPlayer } from \"../../../../rubedo/lib/Events/forEachPlayer.js\";\n\nTABLES.bans.onLoad(() => {\n  forEachPlayer.subscribe((player) => {\n    try {\n      const banData = TABLES.bans.get(player.id);\n      if (!banData) return;\n      if (banData.expire && banData.expire < Date.now())\n        return TABLES.bans.delete(player.id);\n      kick(\n        player,\n        [\n          `\u00A7cYou have been banned!`,\n          `\u00A7aReason: \u00A7f${banData.reason}`,\n          `\u00A7fExpiry: \u00A7b${\n            banData.expire ? msToTime(banData.expire - Date.now()) : \"Forever\"\n          }`,\n          `\u00A7fAppeal at: \u00A7b${getConfigId(\"appealLink\")}`,\n        ],\n        () => {\n          console.warn(new Error(\"Failed to kick player\"));\n          TABLES.bans.delete(player.id);\n        }\n      );\n    } catch (error) {\n      console.warn(error + error.stack);\n    }\n  }, 100);\n});\n", "import { Location } from \"@minecraft/server\";\nimport { TABLES } from \"../../tables.js\";\nimport { DIMENSIONS } from \"../../../../utils.js\";\nimport { forEachPlayer } from \"../../../../rubedo/lib/Events/forEachPlayer.js\";\n\nforEachPlayer.subscribe((player) => {\n  try {\n    const freezeData = TABLES.freezes.get(player.id);\n\n    if (!freezeData)\n      return player.getComponent(\"movement\").resetToDefaultValue();\n    player.getComponent(\"movement\").setCurrent(0);\n\n    player.teleport(\n      new Location(\n        freezeData.location.x,\n        freezeData.location.y,\n        freezeData.location.z\n      ),\n      DIMENSIONS[freezeData.location.dimension as keyof typeof DIMENSIONS],\n      0,\n      0\n    );\n  } catch (error) {}\n}, 200);\n", "import { world, BeforeChatEvent } from \"@minecraft/server\";\r\nimport { PREFIX } from \"../../config/commands\";\r\n\r\ntype beforeChatCallback = (arg: BeforeChatEvent) => void;\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: beforeChatCallback;\r\n  };\r\n} = {};\r\n\r\nworld.events.beforeChat.subscribe((data) => {\r\n  if (data.message.startsWith(PREFIX)) return; // This is a command\r\n  for (const callback of Object.values(CALLBACKS)) {\r\n    callback.callback(data);\r\n  }\r\n});\r\n\r\nexport class beforeChat {\r\n  /**\r\n   * Subscribes to a callback to get notified when a chat is sent that is not a command\r\n   * @param callback what to be called when one of these entity's inventory changes\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(callback: beforeChatCallback): number {\r\n    const key = Date.now();\r\n    CALLBACKS[key] = { callback: callback };\r\n    return key;\r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n", "import { Mute } from \"../models/Mute.js\";\nimport { TABLES } from \"../../tables.js\";\nimport { text } from \"../../../../rubedo/lang/text.js\";\nimport { beforeChat } from \"../../../../rubedo/lib/Events/beforeChat.js\";\n\nbeforeChat.subscribe((data) => {\n  const muteData = Mute.getMuteData(data.sender);\n  if (!muteData) return;\n  if (muteData.expire && muteData.expire < Date.now())\n    return TABLES.mutes.delete(data.sender.name);\n  data.cancel = true;\n  data.sender.tell(text[\"modules.managers.mute.isMuted\"]());\n});\n", "import { BlockLocation, Player, system, world } from \"@minecraft/server\";\nimport { Region } from \"../models/Region.js\";\nimport { getRole, loadRegionDenys } from \"../../utils.js\";\nimport { BLOCK_CONTAINERS, DOORS_SWITCHES } from \"../../config/region.js\";\nimport { DIMENSIONS } from \"../../../../utils.js\";\nimport { EntitiesLoad } from \"../../../../rubedo/lib/Events/EntitiesLoad.js\";\nimport { forEachPlayer } from \"../../../../rubedo/lib/Events/forEachPlayer.js\";\nimport { TABLES } from \"../../tables.js\";\n\n/**\n * Sets Deny blocks at bottom of region every 5 mins\n */\nsystem.runSchedule(() => {\n  loadRegionDenys();\n}, 6000);\n\n/**\n * Permissions for region\n */\nworld.events.beforeItemUseOn.subscribe((data) => {\n  if ([\"moderator\", \"admin\"].includes(getRole(data.source as Player))) return;\n  const region = Region.blockLocationInRegion(\n    data.blockLocation,\n    data.source.dimension.id\n  );\n  if (!region) return;\n  const block = data.source.dimension.getBlock(data.blockLocation);\n  if (\n    DOORS_SWITCHES.includes(block.typeId) &&\n    region.permissions.doorsAndSwitches\n  )\n    return;\n  if (\n    BLOCK_CONTAINERS.includes(block.typeId) &&\n    region.permissions.openContainers\n  )\n    return;\n  data.cancel = true;\n});\n\nworld.events.beforeExplosion.subscribe((data) => {\n  for (let i = 0; i < data.impactedBlocks.length; i++) {\n    const bL = data.impactedBlocks[i];\n    let region = Region.blockLocationInRegion(bL, data.dimension.id);\n    if (region) return (data.cancel = true);\n  }\n});\n\nworld.events.entitySpawn.subscribe(async ({ entity }) => {\n  const region = await Region.blockLocationInRegionSync(\n    new BlockLocation(entity.location.x, entity.location.y, entity.location.z),\n    entity.dimension.id\n  );\n  if (!region) return;\n  if (region.permissions.allowedEntities.includes(entity.typeId)) return;\n  entity.teleport({ x: 0, y: -64, z: 0 }, entity.dimension, 0, 0);\n  entity.kill();\n});\n\nEntitiesLoad.subscribe(() => {\n  system.runSchedule(async () => {\n    for (const region of await Region.getAllRegionsSync()) {\n      for (const entity of DIMENSIONS[\n        region.dimensionId as keyof typeof DIMENSIONS\n      ].getEntities({ excludeTypes: region.permissions.allowedEntities })) {\n        if (!region.entityInRegion(entity)) continue;\n        entity.teleport({ x: 0, y: -64, z: 0 }, entity.dimension, 0, 0);\n        entity.kill();\n      }\n    }\n  }, 100);\n});\n\n/**\n * Gives player a tag if they are in a region\n */\nTABLES.regions.onLoad(() => {\n  forEachPlayer.subscribe((player) => {\n    for (const region of Region.getAllRegions()) {\n      if (region.entityInRegion(player)) {\n        player.addTag(`inRegion`);\n        if (!region.permissions.pvp) player.addTag(`region-protected`);\n      } else {\n        player.removeTag(`inRegion`);\n        player.removeTag(`region-protected`);\n      }\n    }\n  }, 5);\n});\n", "import { world } from \"@minecraft/server\";\r\nimport { TABLES } from \"../../tables.js\";\r\nimport { getRole, isLockedDown, kick, setRole } from \"../../utils\";\r\nimport { Mute } from \"../models/Mute\";\r\nimport { ChangePlayerRoleTask } from \"../models/Task\";\r\nimport { text } from \"../../../../rubedo/lang/text.js\";\r\n\r\nworld.events.playerSpawn.subscribe(({ player }) => {\r\n  TABLES.ids.onLoad(() => {\r\n    if (isLockedDown() && getRole(player) != \"admin\")\r\n      return kick(player, text[\"lockdown.kick.message\"]());\r\n    // --\r\n    if (Mute.getMuteData(player))\r\n      player.runCommandAsync(`ability @s mute true`);\r\n    if (!TABLES.ids.has(player.name)) {\r\n      // Player is new!\r\n      TABLES.ids.set(player.name, player.id);\r\n    }\r\n    /**\r\n     * This is a role that was tried to push when the player was offline\r\n     * so were setting it now because the player just joined\r\n     */\r\n    const roleToSet = ChangePlayerRoleTask.getPlayersRoleToSet(player.name);\r\n    if (roleToSet) setRole(player, roleToSet);\r\n  });\r\n});\r\n", "import {\n  Entity,\n  InventoryComponentContainer,\n  Items,\n  MinecraftItemTypes,\n  world,\n} from \"@minecraft/server\";\nimport { AIR } from \"../../../../rubedo/lib/Chest GUI\";\nimport { PageItem } from \"../../../../rubedo/lib/Chest GUI/Models/PageItem\";\nimport { Page } from \"../../../../rubedo/lib/Chest GUI/Models/Page\";\nimport { CHESTGUIS } from \"../../../../rubedo/lib/Chest GUI/utils\";\n\n/**\n * The possible fillable slots where items can be put\n * this is for inventory fill\n */\nconst FILLABLE_SLOTS = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44,\n];\n\n/**\n * Fills the chest Screen with the desired kit\n */\nexport function ViewPlayersFill(entity: Entity, page: Page, extras: any) {\n  const container: InventoryComponentContainer = entity.getComponent(\n    \"minecraft:inventory\"\n  ).container;\n\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n  for (const [i, player] of [...world.getPlayers()].entries()) {\n    const slot = FILLABLE_SLOTS[i];\n    const item = new PageItem(MinecraftItemTypes.skull, {\n      nameTag: player.name,\n      data: 3,\n    });\n    container.setItem(slot, item.itemStack);\n    page.slots[slot] = {\n      item: item,\n      action: (ctx) => {\n        ctx.PageAction(\"moderation:see_inventory\", { name: player.name });\n      },\n    };\n  }\n}\n\n/**\n * Fills the chest Screen with the desired kit\n */\nexport function ViewPlayerInventoryFill(\n  entity: Entity,\n  page: Page,\n  extras: any\n) {\n  const container = entity.getComponent(\"minecraft:inventory\").container;\n\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n\n  const player = [...world.getPlayers()].find((p) => p.name == extras.name);\n  if (!player) {\n    const gui = Object.values(CHESTGUIS).find((e) => e.entity.id == entity.id);\n    gui.despawn();\n    player.tell(`\"${extras.name}\" Could not be found, Gui Crashed`);\n  }\n  const inventory = player.getComponent(\"inventory\").container;\n  /**\n   * the value of how many slots have been taken\n   */\n  let used_slots = 0;\n  for (let i = 0; i < inventory.size; i++) {\n    const item = inventory.getItem(i);\n    const slot = FILLABLE_SLOTS[used_slots];\n    used_slots++;\n    if (!item) {\n      container.setItem(slot, AIR);\n      continue;\n    }\n    container.setItem(slot, item);\n    page.slots[slot] = {\n      item: new PageItem(\n        Items.get(item.typeId),\n        { amount: item.amount, data: item.data },\n        item\n      ),\n      action: (ctx) => {\n        if (i < 9) {\n          player.runCommandAsync(`replaceitem entity @s slot.hotbar ${i} air`);\n        } else {\n          player.runCommandAsync(\n            `replaceitem entity @s slot.inventory ${i - 9} air`\n          );\n        }\n        ctx.GiveAction();\n        page.slots[slot] = {\n          item: null,\n          action: (ctx) => {\n            inventory.addItem(ctx.getItemAdded());\n          },\n        };\n      },\n    };\n  }\n}\n\nnew Page(\"moderation:see\", ViewPlayersFill)\n  .setSlots(\n    [50],\n    new PageItem(MinecraftItemTypes.arrow, {\n      nameTag: \"\u00A7fBack\",\n    }),\n    (ctx) => {\n      ctx.PageAction(\"home\");\n    }\n  )\n  .setSlots(\n    [48],\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\n    (ctx) => {\n      ctx.CloseAction();\n    }\n  );\n\nnew Page(\"moderation:see_inventory\", ViewPlayerInventoryFill)\n  .setSlots(\n    [50],\n    new PageItem(MinecraftItemTypes.arrow, {\n      nameTag: \"\u00A7fBack\",\n    }),\n    (ctx) => {\n      ctx.PageAction(\"moderation:see\");\n    }\n  )\n  .setSlots(\n    [48],\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\n    (ctx) => {\n      ctx.CloseAction();\n    }\n  );\n", "import { GameMode, world } from \"@minecraft/server\";\nimport { getRole } from \"../../utils.js\";\nimport { Ban } from \"../models/Ban.js\";\nimport { Protection } from \"../models/Protection.js\";\nimport { Log } from \"../models/Log.js\";\nimport { PlayerLog } from \"../../../../rubedo/database/types/PlayerLog.js\";\n\n/**\n * The gamemode that you cannot be in unless you have staff tag\n */\nconst ILLEGAL_GAMEMODE = GameMode.creative;\n\n/**\n * Stores per world load violation data for players\n */\nconst ViolationCount = new PlayerLog<number>();\n\nconst protection = new Protection<{\n  clearPlayer: boolean;\n  setToSurvival: boolean;\n  banPlayer: boolean;\n  violationCount: number;\n}>(\n  \"gamemode\",\n  \"Blocks illegal gamemode\",\n  \"textures/ui/creative_icon.png\",\n  true\n).setConfigDefault({\n  clearPlayer: {\n    description: \"Whether to clear players inventory.\",\n    defaultValue: true,\n  },\n  setToSurvival: {\n    description: \"If player should be set to survival after being flagged.\",\n    defaultValue: true,\n  },\n  banPlayer: {\n    description: \"If player should be banned after violation count is met.\",\n    defaultValue: false,\n  },\n  violationCount: {\n    description: \"The amount of violations before ban.\",\n    defaultValue: 0,\n  },\n});\n\nprotection.runSchedule(() => {\n  const config = protection.getConfig();\n  for (const player of world.getPlayers({ gameMode: ILLEGAL_GAMEMODE })) {\n    if ([\"moderator\", \"admin\", \"builder\"].includes(getRole(player))) continue;\n    try {\n      if (config.setToSurvival) player.runCommandAsync(`gamemode s`);\n      if (config.clearPlayer) player.runCommandAsync(`clear @s`);\n    } catch (error) {}\n    new Log({\n      playerName: player.name,\n      protection: \"Gamemode\",\n      message: `${player.name} has entered into a illegal gamemode!`,\n    });\n    const count = (ViolationCount.get(player) ?? 0) + 1;\n    ViolationCount.set(player, count);\n    if (config.banPlayer && count >= config.violationCount)\n      new Ban(player, null, \"Illegal Gamemode\");\n  }\n}, 20);\n", "import { Events, Player, system, world } from \"@minecraft/server\";\r\nimport { TABLES } from \"../../tables.js\";\r\nimport { EventsReturnType, IProtectionsConfig } from \"../../types.js\";\r\nimport { PROTECTIONS } from \"../../protections.js\";\r\nimport { forEachPlayer } from \"../../../../rubedo/lib/Events/forEachPlayer.js\";\r\n\r\n/**\r\n * A protection instance\r\n */\r\nexport class Protection<Config = IProtectionsConfig> {\r\n  /**\r\n   * Events that this is subscribed to\r\n   */\r\n  private events: {\r\n    -readonly [Key in keyof Events]+?: {\r\n      /**\r\n       * Callback this event is to run.\r\n       */\r\n      callback: ReturnType<Events[Key][\"subscribe\"]>;\r\n      /**\r\n       * If this has been triggered on world.events\r\n       */\r\n      triggered: boolean;\r\n    };\r\n  };\r\n\r\n  /**\r\n   * List of events that this protection is scheduled\r\n   */\r\n  private schedules: {\r\n    /**\r\n     * Callback to run\r\n     */\r\n    callback: () => void;\r\n    /**\r\n     * Delay in ticks\r\n     */\r\n    tickInterval: number;\r\n    /**\r\n     * If null, this event hasn't been registered by {@link system.runSchedule}\r\n     * if {@link number}, the event has been registered and this key can be used to {@link system.clearRunSchedule}\r\n     */\r\n    runScheduleId: number | null;\r\n  }[];\r\n\r\n  /**\r\n   * A list of forEachPlayer keys used to unsubscribe\r\n   */\r\n  private forEachPlayers: {\r\n    /**\r\n     * Callback to run\r\n     * @param player\r\n     * @returns\r\n     */\r\n    callback: (player: Player) => void;\r\n    /**\r\n     * Delay in ticks\r\n     */\r\n    delay: number;\r\n    /**\r\n     * If null, this event hasn't been registered by {@link forEachPlayer}\r\n     * if {@link number}, the event has been registered and this key can be used to unsubscribe\r\n     */\r\n    key: number | null;\r\n  }[];\r\n\r\n  /**\r\n   * Callback to run on enable\r\n   */\r\n  private onEnableCallback: () => void | undefined;\r\n\r\n  /**\r\n   * Callback to run on disable\r\n   */\r\n  private onDisableCallback: () => void | undefined;\r\n\r\n  /**\r\n   * If this protection is enabled\r\n   */\r\n  private isEnabled: boolean;\r\n\r\n  /**\r\n   * The default config object\r\n   */\r\n  configDefault:\r\n    | {\r\n        [key in keyof Config]: {\r\n          description: string;\r\n          defaultValue: Config[key];\r\n        };\r\n      }\r\n    | {};\r\n\r\n  /**\r\n   * Creates a new protection module\r\n   */\r\n  constructor(\r\n    public name: string,\r\n    public description: string,\r\n    public iconPath: string,\r\n    public isEnabledByDefault: boolean\r\n  ) {\r\n    this.name = name;\r\n    this.description = description;\r\n    this.iconPath = iconPath;\r\n    this.configDefault = {};\r\n    this.isEnabled = false;\r\n    this.isEnabledByDefault = isEnabledByDefault;\r\n    // ---- events\r\n    this.events = {};\r\n    this.schedules = [];\r\n    this.forEachPlayers = [];\r\n    // Save protection\r\n    PROTECTIONS[this.name] = this;\r\n  }\r\n\r\n  /**\r\n   * Sets the config to a typed object\r\n   * @param data typed object\r\n   * @returns\r\n   */\r\n  setConfigDefault(data: {\r\n    [key in keyof Config]: {\r\n      description: string;\r\n      defaultValue: Config[key];\r\n    };\r\n  }): Protection<Config> {\r\n    this.configDefault = data;\r\n    TABLES.protections.hasSync(this.name).then((v) => {\r\n      if (v) return;\r\n      let saveData: IProtectionsConfig = {\r\n        enabled: true,\r\n      };\r\n      for (const key of Object.keys(data)) {\r\n        // @ts-ignore\r\n        saveData[key] = data[key as keyof typeof data].defaultValue;\r\n      }\r\n      TABLES.protections.set(this.name, saveData);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the config data\r\n   * @returns Config\r\n   */\r\n  getConfig(): Config {\r\n    let config = TABLES.protections.get(this.name);\r\n    if (!config) config = { enabled: this.isEnabled };\r\n    return config as Config;\r\n  }\r\n\r\n  async setConfig(data: Config) {\r\n    return TABLES.protections.set(this.name, data as IProtectionsConfig);\r\n  }\r\n\r\n  /**\r\n   * Triggers a change to a activate this module or not.\r\n   * @param enabled if this protection is enabled or not\r\n   */\r\n  private triggerChange(enabled: boolean) {\r\n    if (enabled) {\r\n      this.isEnabled = true;\r\n      // Enable this protection\r\n      this.onEnableCallback?.();\r\n      for (const [key, value] of Object.entries(this.events)) {\r\n        if (value.triggered) continue;\r\n        let callback = world.events[key as keyof Events].subscribe(\r\n          // @ts-ignore\r\n          value.callback\r\n        );\r\n        value.triggered = true;\r\n        value.callback = callback;\r\n      }\r\n      for (const v of this.forEachPlayers) {\r\n        if (v.key) continue;\r\n        let key = forEachPlayer.subscribe(v.callback, v.delay);\r\n        v.key = key;\r\n      }\r\n      for (const v of this.schedules) {\r\n        if (v.runScheduleId) continue;\r\n        let runScheduleId = system.runSchedule(v.callback);\r\n        v.runScheduleId = runScheduleId;\r\n      }\r\n    } else {\r\n      this.isEnabled = false;\r\n      // Disable this protection\r\n      this.onDisableCallback?.();\r\n      for (const [key, value] of Object.entries(this.events)) {\r\n        if (!value.triggered) continue;\r\n        // @ts-ignore\r\n        world.events[key as keyof Events].unsubscribe(value.callback);\r\n        value.triggered = false;\r\n      }\r\n      for (const v of this.forEachPlayers) {\r\n        if (!v.key) continue;\r\n        forEachPlayer.unsubscribe(v.key);\r\n        v.key = null;\r\n      }\r\n      for (const v of this.schedules) {\r\n        if (!v.runScheduleId) continue;\r\n        system.clearRunSchedule(v.runScheduleId);\r\n        v.runScheduleId = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Runs a callback once this protection is activated\r\n   * @param callback function to run\r\n   */\r\n  onEnable(callback: () => void): Protection<Config> {\r\n    this.onEnableCallback = callback;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Runs a callback once this protection is disabled\r\n   * @param callback function to run\r\n   */\r\n  onDisable(callback: () => void): Protection<Config> {\r\n    this.onDisableCallback = callback;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Subscribes to a worldEvent\r\n   * @param id event id to subscribe\r\n   * @param callback what to run on event callback\r\n   * @returns this\r\n   */\r\n  subscribe<T extends keyof Events>(\r\n    id: T,\r\n    callback: EventsReturnType<T>\r\n  ): Protection<Config> {\r\n    this.events[id] = {\r\n      callback: callback,\r\n      triggered: false,\r\n    };\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Schedules a callback to be run every x number of ticks\r\n   * @param callback callback\r\n   * @param tickInterval ticks\r\n   */\r\n  runSchedule(callback: () => void, tickInterval?: number): Protection<Config> {\r\n    this.schedules.push({\r\n      callback: callback,\r\n      tickInterval: tickInterval,\r\n      runScheduleId: null,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Callback for each valid players\r\n   * @param callback\r\n   * @param delay\r\n   */\r\n  forEachPlayer(\r\n    callback: (player: Player) => void,\r\n    delay: number = 0\r\n  ): Protection<Config> {\r\n    this.forEachPlayers.push({\r\n      callback: callback,\r\n      delay: delay,\r\n      key: null,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables this protection\r\n   */\r\n  enable() {\r\n    this.triggerChange(true);\r\n  }\r\n\r\n  /**\r\n   * Disables this protection\r\n   */\r\n  disable() {\r\n    this.triggerChange(false);\r\n  }\r\n}\r\n", "import { Player, world } from \"@minecraft/server\";\r\n\r\nexport class PlayerLog<T extends any = any> {\r\n  data: Map<string, T>;\r\n  events: Object;\r\n\r\n  constructor() {\r\n    this.data = new Map();\r\n    this.events = {\r\n      playerLeave: world.events.playerLeave.subscribe((data) =>\r\n        this.data.delete(data.playerName)\r\n      ),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Logs a player to a value\r\n   */\r\n  set(player: Player, value: T): void {\r\n    this.data.set(player.name, value);\r\n  }\r\n\r\n  /**\r\n   * Gets a players value\r\n   */\r\n  get(player: Player): T | undefined {\r\n    return this.data.get(player.name);\r\n  }\r\n\r\n  /**\r\n   * Tests if a player is on this log\r\n   * @param player \r\n   * @returns \r\n   */\r\n  has(player: Player): boolean {\r\n    return this.data.has(player.name);\r\n  }\r\n\r\n  /**\r\n   * Deletes a player from log\r\n   */\r\n  delete(player: Player) {\r\n    this.data.delete(player.name);\r\n  }\r\n\r\n  /**\r\n   * Clears this Player log\r\n   */\r\n  clear() {\r\n    this.data.clear();\r\n  }\r\n\r\n  /**\r\n   * Gets all the players in the log\r\n   */\r\n  playerNames(): Array<string> {\r\n    return [...this.data.keys()];\r\n  }\r\n\r\n  /**\r\n   * Checks to see if a player is in this list\r\n   * @param player player to check\r\n   * @returns\r\n   */\r\n  includes(player: Player): boolean {\r\n    return this.playerNames().includes(player.name);\r\n  }\r\n}\r\n", "import {\r\n  MinecraftBlockTypes,\r\n  MinecraftEffectTypes,\r\n  MinecraftItemTypes,\r\n  Player,\r\n  system,\r\n  Vector3,\r\n} from \"@minecraft/server\";\r\nimport { PlayerLog } from \"../../../../rubedo/database/types/PlayerLog\";\r\nimport {\r\n  ILocationLog,\r\n  onPlayerMove,\r\n} from \"../../../../rubedo/lib/Events/onPlayerMove\";\r\nimport { vector3ToBlockLocation } from \"../../../../utils\";\r\nimport {\r\n  ANTI_TP_DISTANCE_THRESHOLD,\r\n  DIMENSION_SWITCH_Y,\r\n  MOVEMENT_CONSTANTS,\r\n  MOVEMENT_DISTANCE_THRESHOLD,\r\n  RIPTIDE_TIMEOUT,\r\n  SPEED_EFFECT_INCREASE,\r\n  TAGS,\r\n} from \"../../config/movement\";\r\nimport { getRole } from \"../../utils\";\r\nimport { Protection } from \"../models/Protection\";\r\nimport { VALID_BLOCK_TAGS } from \"./nuker\";\r\n\r\nconst violations = new PlayerLog<number>();\r\n\r\n/**\r\n * Players that are on riptide timeout for using a trident\r\n */\r\nconst ON_RIPTIDE_TIMEOUT = new PlayerLog<boolean>();\r\n\r\n/**\r\n * Calculates the distance from loc1 to loc2\r\n * @param {Location} loc1 location 1\r\n * @param {Location} loc2 location 2\r\n * @returns {number}\r\n */\r\nfunction distanceBetween(loc1: Vector3, loc2: Vector3): number {\r\n  return Math.hypot(loc2.x - loc1.x, loc2.z - loc1.z);\r\n}\r\n\r\n/**\r\n * Gets the speed offset based on a players SpeedEffect\r\n * @param player player to get\r\n */\r\nfunction getSpeedOffset(player: Player): number {\r\n  const speed = player.getEffect(MinecraftEffectTypes.speed)?.amplifier ?? 0;\r\n  return speed * SPEED_EFFECT_INCREASE;\r\n}\r\n\r\n/**\r\n * Checks if a distance traveled is big enough to be flagged\r\n * @param distance distance the player has traveled\r\n * @returns if this distance is bad\r\n */\r\nfunction isDistanceFlag(\r\n  distance: number,\r\n  tick: number,\r\n  player: Player\r\n): boolean {\r\n  const speedIntensity = getSpeedOffset(player);\r\n  /**\r\n   * This is the amount of ticks that have passed\r\n   */\r\n  const ticks = system.currentTick - tick;\r\n  const offset = MOVEMENT_CONSTANTS.run.distance + MOVEMENT_DISTANCE_THRESHOLD;\r\n  return distance / ticks > speedIntensity + offset;\r\n}\r\n\r\nfunction flag(player: Player, old: ILocationLog) {\r\n  const violationCount = (violations.get(player) ?? 0) + 1;\r\n  violations.set(player, violationCount);\r\n  onPlayerMove.delete(player); // Reset Players old location\r\n  if (violationCount < 3) return;\r\n  player.teleport(\r\n    old.location,\r\n    old.dimension,\r\n    player.rotation.x,\r\n    player.rotation.y\r\n  );\r\n}\r\n\r\nfunction flagPhase(player: Player): boolean {\r\n  const blockIn = player.dimension.getBlock(\r\n    vector3ToBlockLocation(player.location)\r\n  );\r\n  if (blockIn.getTags().some((tag) => VALID_BLOCK_TAGS.includes(tag))) return;\r\n  if (blockIn.type.id.endsWith(\"grass\")) return;\r\n  if (blockIn.type.id.endsWith(\"water\")) return;\r\n  if (blockIn.type.id.endsWith(\"lava\")) return;\r\n  if (blockIn.type.id.endsWith(\"portal\")) return;\r\n  if (blockIn.type.id.endsWith(\"gateway\")) return;\r\n\r\n  if (\r\n    blockIn.typeId != MinecraftBlockTypes.air.id &&\r\n    !blockIn.type.canBeWaterlogged\r\n  )\r\n    return true;\r\n}\r\n\r\n/**\r\n * The key used to unsubscribe from this event\r\n */\r\nlet onPlayerMoveSubKey: number = null;\r\n\r\nconst protection = new Protection<{\r\n  tpCheck: boolean;\r\n}>(\r\n  \"movement\",\r\n  \"Blocks illegal movements on players\",\r\n  \"textures/ui/move.png\",\r\n  false\r\n).setConfigDefault({\r\n  tpCheck: {\r\n    description: \"If teleports should be flagged\",\r\n    defaultValue: true,\r\n  },\r\n});\r\n\r\nprotection\r\n  .onEnable(() => {\r\n    const config = protection.getConfig();\r\n    onPlayerMoveSubKey = onPlayerMove.subscribe((player, old) => {\r\n      if (getRole(player) == \"admin\") return;\r\n      if (player.dimension.id != old.dimension.id) return;\r\n      if (player.getTags().some((tag) => TAGS.includes(tag))) return;\r\n      const distance = distanceBetween(player.location, old.location);\r\n      if (player.hasTag(`skip-movement-check`))\r\n        return player.removeTag(`skip-movement-check`);\r\n      if (old.location.y == DIMENSION_SWITCH_Y) return;\r\n      if (ON_RIPTIDE_TIMEOUT.has(player)) return;\r\n      if (flagPhase(player)) return flag(player, old);\r\n      if (distance > ANTI_TP_DISTANCE_THRESHOLD) {\r\n        if (!config.tpCheck) return;\r\n        // Anti Tp.\r\n        flag(player, old);\r\n      } else {\r\n        // Anti speed/jet pack\r\n        if (!isDistanceFlag(distance, old.currentTick, player)) return;\r\n        // Flagged\r\n        flag(player, old);\r\n      }\r\n    });\r\n  })\r\n  .onDisable(() => {\r\n    onPlayerMove.unsubscribe(onPlayerMoveSubKey);\r\n  });\r\n\r\nprotection.subscribe(\"dataDrivenEntityTriggerEvent\", (data) => {\r\n  if (!(data.entity instanceof Player)) return;\r\n  if (data.id != \"on_death\") return;\r\n  const player = data.entity;\r\n  system.run(() => {\r\n    onPlayerMove.delete(player);\r\n  }); // Reset Players old location\r\n});\r\n\r\nprotection.subscribe(\"projectileHit\", ({ projectile, source }) => {\r\n  if (projectile.typeId != MinecraftItemTypes.enderPearl.id) return;\r\n  if (!(source instanceof Player)) return;\r\n  onPlayerMove.delete(source); // Reset Players old location\r\n});\r\n\r\nprotection.subscribe(\"itemCompleteCharge\", ({ itemStack, source }) => {\r\n  if (itemStack.typeId != MinecraftItemTypes.chorusFruit.id) return;\r\n  if (!(source instanceof Player)) return;\r\n  onPlayerMove.delete(source); // Reset Players old location\r\n});\r\n\r\nprotection.subscribe(\"itemReleaseCharge\", ({ itemStack, source }) => {\r\n  if (itemStack.typeId != MinecraftItemTypes.trident.id) return;\r\n  if (!(source instanceof Player)) return;\r\n  ON_RIPTIDE_TIMEOUT.set(source, true);\r\n  system.runSchedule(() => {\r\n    ON_RIPTIDE_TIMEOUT.delete(source);\r\n  }, RIPTIDE_TIMEOUT);\r\n});\r\n", "import { Dimension, Player, system, Vector3, world } from \"@minecraft/server\";\r\nimport { PlayerLog } from \"../../database/types/PlayerLog\";\r\n\r\ntype onPlayerMoveCallback = (player: Player, data: ILocationLog) => void;\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: onPlayerMoveCallback;\r\n  };\r\n} = {};\r\n\r\nexport interface ILocationLog {\r\n  /**\r\n   * The Location this is\r\n   */\r\n  location: Vector3;\r\n  /**\r\n   * The dimension this location was in\r\n   */\r\n  dimension: Dimension;\r\n  /**\r\n   * The tick this was set at\r\n   */\r\n  currentTick: number\r\n}\r\n\r\n/**\r\n * Checks if two vectors are the same\r\n * @param from first vector\r\n * @param to second vector\r\n */\r\nfunction vector3Equals(from: Vector3, to: Vector3): boolean {\r\n  if (from.x != to.x) return false;\r\n  if (from.y != to.y) return false;\r\n  if (from.z != to.z) return false;\r\n  return true;\r\n}\r\n\r\n/**\r\n * Stores Last Previous grounded location\r\n */\r\nexport const playerLocation = new PlayerLog<ILocationLog>();\r\n\r\nsystem.runSchedule(() => {\r\n  const sendCallback = (player: Player, data: ILocationLog) => {\r\n    for (const callback of Object.values(CALLBACKS)) {\r\n      callback.callback(player, data);\r\n    }\r\n  };\r\n  for (const player of world.getPlayers()) {\r\n    const oldLocation = playerLocation.get(player);\r\n    if (oldLocation) {\r\n      if (vector3Equals(player.location, oldLocation.location)) {\r\n        continue;\r\n      }\r\n    }\r\n    playerLocation.set(player, {\r\n      location: player.location,\r\n      dimension: player.dimension,\r\n      currentTick: system.currentTick\r\n    });\r\n    if (!oldLocation) continue;\r\n    sendCallback(player, oldLocation);\r\n  }\r\n});\r\n\r\nexport class onPlayerMove {\r\n  /**\r\n   * Subscribes to a callback to get notified when a player moves\r\n   * @param callback what to be called when one of these entity's inventory changes\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(callback: onPlayerMoveCallback): number {\r\n    const key = Date.now();\r\n    CALLBACKS[key] = { callback: callback };\r\n    return key;\r\n    \r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n  /**\r\n   * Clears a players location\r\n   * @param player player to clear\r\n   */\r\n  static delete(player: Player): void {\r\n    playerLocation.delete(player);\r\n  }\r\n}\r\n", "/**\r\n * The leeway that the distances can be off before it flags\r\n */\r\nexport const MOVEMENT_DISTANCE_THRESHOLD = 0.60;\r\n\r\n/**\r\n * Constant of speeds when players are moving per tick\r\n */\r\nexport const MOVEMENT_CONSTANTS = {\r\n  walk: {\r\n    velocity: 0.17 as const,\r\n    distance: 0.23 as const,\r\n  },\r\n  run: {\r\n    velocity: 0.19 as const,\r\n    distance: 0.35 as const,\r\n  },\r\n};\r\n\r\n/**\r\n * The distance increase per speed effect increase\r\n */\r\nexport const SPEED_EFFECT_INCREASE = 0.056;\r\n\r\n/**\r\n * if the distance is over this amount the system will automatically flag tp\r\n */\r\nexport const ANTI_TP_DISTANCE_THRESHOLD = 10;\r\n\r\n/**\r\n * If your \r\n */\r\nexport const TAGS = [\"gliding\", \"riding\"];\r\n\r\n/**\r\n * This is a Y value that occurs when you die in another dimension and \r\n * you get teleported twice, this should be ignored\r\n */\r\nexport const DIMENSION_SWITCH_Y = 32767.001953125\r\n\r\n/**\r\n * Time in ticks that a player will be on timeout\r\n * for this check\r\n */\r\nexport const RIPTIDE_TIMEOUT = 60", "import {\r\n  world,\r\n  Location,\r\n  Block,\r\n  BlockPermutation,\r\n  Dimension,\r\n  Player,\r\n  system,\r\n} from \"@minecraft/server\";\r\nimport { API_CONTAINERS } from \"../../config/containers.js\";\r\nimport { CONTAINER_LOCATIONS } from \"../Containers/index.js\";\r\n\r\ntype beforeBlockBreakCallback = (arg0: BeforeBlockBreakEvent) => void;\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: beforeBlockBreakCallback;\r\n  };\r\n} = {};\r\n\r\nworld.events.blockBreak.subscribe((data) => {\r\n  for (const callback of Object.values(CALLBACKS)) {\r\n    callback.callback(\r\n      new BeforeBlockBreakEvent(\r\n        data.block,\r\n        data.brokenBlockPermutation,\r\n        data.dimension,\r\n        data.player\r\n      )\r\n    );\r\n  }\r\n});\r\n\r\nexport class beforeBlockBreak {\r\n  /**\r\n   * Subscribes to a callback to get notified when a chat is sent that is not a command\r\n   * @param callback what to be called when one of these entities inventory's changes\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(callback: beforeBlockBreakCallback): number {\r\n    const key = Date.now();\r\n    CALLBACKS[key] = { callback: callback };\r\n    return key;\r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n\r\nclass BeforeBlockBreakEvent {\r\n  /**\r\n   * Contains information regarding an event before a player breaks a block.\r\n   * @param block Block broken in this event. Note that because this event fires right after a block is broken, the block you will receive will likely be of type 'minecraft:air'. See the .brokenBlockPermutation property for information on this block before it was broken.\r\n   * @param brokenBlockPermutation Returns permutation information about this block before it was broken.\r\n   * @param dimension Dimension that contains the block that has been broken in this event.\r\n   * @param player Player that broke the block for this event.\r\n   */\r\n  constructor(\r\n    public block: Block,\r\n    public brokenBlockPermutation: BlockPermutation,\r\n    public dimension: Dimension,\r\n    public player: Player\r\n  ) {\r\n    this.block = block;\r\n    this.brokenBlockPermutation = brokenBlockPermutation;\r\n    this.dimension = dimension;\r\n    this.player = player;\r\n  }\r\n\r\n  set cancel(value: boolean) {\r\n    // setting block back\r\n    this.dimension\r\n      .getBlock(this.block.location)\r\n      .setPermutation(this.brokenBlockPermutation.clone());\r\n    // setting chest inventory back\r\n    if (API_CONTAINERS.includes(this.brokenBlockPermutation.type.id)) {\r\n      const OLD_INVENTORY =\r\n        CONTAINER_LOCATIONS[JSON.stringify(this.block.location)];\r\n      if (OLD_INVENTORY) {\r\n        OLD_INVENTORY.load(this.block.getComponent(\"inventory\").container);\r\n      }\r\n    }\r\n    // killing dropped items\r\n    system.run(() => {\r\n      [\r\n        ...this.dimension.getEntities({\r\n          maxDistance: 2,\r\n          type: \"minecraft:item\",\r\n          location: new Location(\r\n            this.block.location.x,\r\n            this.block.location.y,\r\n            this.block.location.z\r\n          ),\r\n        }),\r\n      ].forEach((e) => e.kill());\r\n    });\r\n  }\r\n}\r\n", "import { getRole } from \"../../utils.js\";\nimport { Ban } from \"../models/Ban.js\";\nimport { Protection } from \"../models/Protection.js\";\nimport { PlayerLog } from \"../../../../rubedo/database/types/PlayerLog.js\";\nimport { beforeBlockBreak } from \"../../../../rubedo/lib/Events/beforeBlockBreak.js\";\n\n/**\n * The log of the players break times\n */\nconst log = new PlayerLog();\n\n/**\n * if a block is broken faster than this time it is considered hacking\n */\nconst IMPOSSIBLE_BREAK_TIME = 15;\n\n/**\n * When breaking vegetation blocks it could cause a false trigger\n * so when a block gets broken and it has one of the block tags\n * it gets skipped and doesn't count in the nuker event\n *\n * @link https://wiki.bedrock.dev/blocks/block-tags.html\n */\nexport const VALID_BLOCK_TAGS = [\n  \"snow\",\n  \"lush_plants_replaceable\",\n  \"azalea_log_replaceable\",\n  \"minecraft:crop\",\n  \"fertilize_area\",\n  \"plant\"\n];\n\n/**\n * A list of all the blocks that are impossible to break unless you have hacks\n */\nconst IMPOSSIBLE_BREAKS = [\n  \"minecraft:water\",\n  \"minecraft:flowing_water\",\n  \"minecraft:lava\",\n  \"minecraft:flowing_lava\",\n  \"minecraft:bedrock\",\n];\n\n/**\n * Stores per world load violation data for players\n */\nconst ViolationCount = new PlayerLog<number>();\n\nlet beforeBlockBreakKey: number = null;\n\nconst protection = new Protection<{\n  banPlayer: boolean;\n  violationCount: number;\n}>(\n  \"nuker\",\n  \"Blocks block breaking too fast\",\n  \"textures/blocks/dirt.png\",\n  true\n).setConfigDefault({\n  banPlayer: {\n    description: \"If the player should be banned once violation count is met\",\n    defaultValue: false,\n  },\n  violationCount: {\n    description: \"Violations before ban\",\n    defaultValue: 0,\n  },\n});\n\nprotection\n  .onEnable(() => {\n    const config = protection.getConfig();\n    beforeBlockBreakKey = beforeBlockBreak.subscribe((data) => {\n      if ([\"moderator\", \"admin\"].includes(getRole(data.player))) return;\n      if (data.block.getTags().some((tag) => VALID_BLOCK_TAGS.includes(tag)))\n        return;\n      const old = log.get(data.player);\n      log.set(data.player, Date.now());\n      if (!old) return;\n\n      // If block is impossible to break skip check, reduces lag.\n      if (!IMPOSSIBLE_BREAKS.includes(data.block.typeId)) {\n        if (old < Date.now() - IMPOSSIBLE_BREAK_TIME) return;\n        const count = (ViolationCount.get(data.player) ?? 0) + 1;\n        ViolationCount.set(data.player, count);\n        if (config.banPlayer && count >= config.violationCount)\n          new Ban(data.player, null, \"Using Nuker\");\n      }\n      data.cancel = true;\n    });\n  })\n  .onDisable(() => {\n    beforeBlockBreak.unsubscribe(beforeBlockBreakKey);\n  });\n", "import { PREFIX } from \"../../../../rubedo/config/commands\";\r\nimport { PlayerLog } from \"../../../../rubedo/database/types/PlayerLog\";\r\nimport { getRole } from \"../../utils\";\r\nimport { Mute } from \"../models/Mute\";\r\nimport { Protection } from \"../models/Protection\";\r\n\r\nconst previousMessage = new PlayerLog<string>();\r\n\r\n/**\r\n * Stores per world load violation data for players\r\n */\r\nconst ViolationCount = new PlayerLog<number>();\r\n\r\nconst protection = new Protection<{\r\n  permMutePlayer: boolean;\r\n  violationCount: number;\r\n  repeatedMessages: boolean;\r\n  zalgo: boolean;\r\n}>(\r\n  \"spam\",\r\n  \"Blocks spam in chat\",\r\n  \"textures/ui/mute_on.png\",\r\n  false\r\n).setConfigDefault({\r\n  permMutePlayer: {\r\n    description:\r\n      \"If player should be permanently muted once violation count is met.\",\r\n    defaultValue: false,\r\n  },\r\n  violationCount: {\r\n    description: \"Violation count before permanent mute\",\r\n    defaultValue: 0,\r\n  },\r\n  repeatedMessages: {\r\n    description: \"Blocks repeated messages\",\r\n    defaultValue: true,\r\n  },\r\n  zalgo: {\r\n    description: \"Blocks zalgo\",\r\n    defaultValue: true,\r\n  },\r\n});\r\n\r\nprotection.subscribe(\"beforeChat\", (data) => {\r\n  try {\r\n    if (data.message.startsWith(PREFIX)) return;\r\n    if ([\"admin\", \"moderator\"].includes(getRole(data.sender))) return;\r\n    const config = protection.getConfig();\r\n    const isSpam = () => {\r\n      const count = (ViolationCount.get(data.sender) ?? 0) + 1;\r\n      ViolationCount.set(data.sender, count);\r\n      if (config.permMutePlayer && count >= config.violationCount)\r\n        new Mute(data.sender, null, \"Spamming\");\r\n    };\r\n    if (\r\n      config.repeatedMessages &&\r\n      previousMessage.get(data.sender) == data.message\r\n    ) {\r\n      data.cancel = true;\r\n      isSpam();\r\n      return data.sender.tell(`\u00A7cRepeated message detected!`);\r\n    }\r\n    if (config.zalgo && /%CC%/g.test(encodeURIComponent(data.message))) {\r\n      data.cancel = true;\r\n      isSpam();\r\n      return data.sender.tell(\r\n        `\u00A7cYou message contains some type of zalgo and cannot be sent!`\r\n      );\r\n    }\r\n    previousMessage.set(data.sender, data.message);\r\n  } catch (error) {\r\n    console.warn(error + error.stack);\r\n  }\r\n});\r\n", "import { MinecraftEffectTypes, Player, world } from \"@minecraft/server\";\r\nimport { getServerOwnerName, setRole, setServerOwner } from \"../../utils\";\r\n\r\nlet e = world.events.beforeDataDrivenEntityTriggerEvent.subscribe((data) => {\r\n  if (!(data.entity instanceof Player)) return;\r\n  if (data.id != \"rubedo:becomeAdmin\") return;\r\n  // Rubedo is now verified to be at the top\r\n  data.entity.removeTag(\"CHECK_PACK\");\r\n  const serverOwnerName = getServerOwnerName();\r\n  if (serverOwnerName) {\r\n    data.entity.playSound(\"note.bass\");\r\n    data.entity.tell(\r\n      `\u00A7cFailed to give server owner: \"${serverOwnerName}\" is already owner!`\r\n    );\r\n    return world.events.beforeDataDrivenEntityTriggerEvent.unsubscribe(e);\r\n  }\r\n  setRole(data.entity, \"admin\");\r\n  setServerOwner(data.entity);\r\n  data.entity.addEffect(MinecraftEffectTypes.blindness, 3, 255, true);\r\n  data.entity.tell(\r\n    `\u00A7aYou have now been set as the \"owner\" of this server. The command \"/function start\" will not do anything anymore, type \"-help\" for more information!`\r\n  );\r\n});\r\n", "import {\r\n  DynamicPropertiesDefinition,\r\n  MinecraftEntityTypes,\r\n  world,\r\n} from \"@minecraft/server\";\r\nimport { OBJECTIVES } from \"../../../../rubedo/config/objectives\";\r\n\r\nworld.events.worldInitialize.subscribe(({ propertyRegistry }) => {\r\n  let def2 = new DynamicPropertiesDefinition();\r\n  def2.defineString(\"role\", 30);\r\n  propertyRegistry.registerEntityTypeDynamicProperties(\r\n    def2,\r\n    MinecraftEntityTypes.player\r\n  );\r\n\r\n  let def3 = new DynamicPropertiesDefinition();\r\n  def3.defineString(\"worldsOwner\", 100);\r\n  def3.defineBoolean(\"isLockDown\");\r\n  propertyRegistry.registerWorldDynamicProperties(def3);\r\n\r\n  for (const obj of OBJECTIVES) {\r\n    world.scoreboard.addObjective(obj.objective, obj.displayName ?? \"\");\r\n  }\r\n});\r\n", "/*\n|--------------------------------------------------------------------------\n| Objectives\n|--------------------------------------------------------------------------\n|\n| This is a list of all objectives this pack uses\n| please add any objective to this list so it can be added at world creation\n| make sure to add them before sending pack to others and new worlds.\n|\n*/\ninterface IObjective {\n  objective: string;\n  displayName?: string;\n}\n\nexport const OBJECTIVES: Array<IObjective> = [];\n", "import { Location } from \"@minecraft/server\";\r\nimport \"./tables\";\r\nimport \"./protections\";\r\nimport \"./modules/commands/import\";\r\nimport \"./modules/managers/import\";\r\nimport \"./modules/pages/import\";\r\nimport \"./modules/protections/import\";\r\nimport \"./modules/events/import\";\r\n\r\n/**\r\n * Stores npc locations that are verified to allow NPC's to spawn in\r\n */\r\nexport let NPC_LOCATIONS: Array<Location> = [];\r\n\r\nexport function clearNpcLocations() {\r\n  NPC_LOCATIONS = [];\r\n}\r\n", "console.warn(`----- Importing Plugins -----`);\r\n\r\nimport \"./Anti-Cheat/index\";\r\n//import \"./ChatRanks/index\";\r\n//import \"./GlobalBans/index\";\r\n"],
  "mappings": "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",
  "names": ["system", "world", "PREFIX", "world", "ItemStack", "MinecraftItemTypes", "BlockLocation", "MAX_DATABASE_STRING_SIZE", "MAX_LORE_ARRAY_SIZE", "ENTITY_IDENTIFIER", "ENTITY_LOCATION", "INVENTORY_SIZE", "BlockLocation", "MinecraftDimensionTypes", "system", "world", "DIMENSIONS", "durations", "durationToMs", "duration", "values", "ms", "value", "length", "unit", "msToTime", "vector3ToBlockLocation", "loc", "BlockLocation", "sleep", "tick", "resolve", "runScheduleId", "system", "LocationEquals", "a", "b", "sort3DVectors", "vector1", "vector2", "betweenVector3", "target", "minVector", "maxVector", "x", "y", "z", "splitString", "str", "maxLength", "subArraysMaxLength", "subStrings", "subArrays", "subString", "_", "i", "system", "world", "CALLBACKS", "ENTITIES_LOADED", "setEntitiesLoaded", "i", "callback", "system", "DIMENSIONS", "world", "EntitiesLoad", "resolve", "key", "Database", "tableName", "EntitiesLoad", "data", "v", "index", "entity", "DIMENSIONS", "ENTITY_IDENTIFIER", "ENTITY_LOCATION", "e", "resolve", "entities", "chunks", "splitString", "MAX_DATABASE_STRING_SIZE", "MAX_LORE_ARRAY_SIZE", "entitiesNeeded", "INVENTORY_SIZE", "i", "savedChunks", "inventory", "j", "chunk", "item", "ItemStack", "MinecraftItemTypes", "a", "b", "stringifiedData", "callback", "key", "value", "status", "TABLES", "Database", "fetch", "playerName", "world", "player", "LiteralArgumentType", "name", "value", "StringArgumentType", "IntegerArgumentType", "FloatArgumentType", "LocationArgumentType", "BooleanArgumentType", "PlayerArgumentType", "fetch", "TargetArgumentType", "ArrayArgumentType", "types", "DurationArgumentType", "PlayerNameArgumentType", "TABLES", "ArgumentTypes", "CommandCallback", "data", "text", "getChatAugments", "message", "prefix", "e", "commandNotFound", "player", "command", "noPerm", "commandSyntaxFail", "baseCommand", "args", "i", "PREFIX", "types", "c", "LiteralArgumentType", "parseLocationArgs", "x", "y", "z", "location", "viewDirection", "locations", "viewVectors", "a", "arg", "r", "b", "index", "sendCallback", "cmdArgs", "event", "lastArg", "argsToReturn", "LocationArgumentType", "CommandCallback", "COMMANDS", "world", "data", "PREFIX", "args", "getChatAugments", "command", "c", "event", "commandNotFound", "noPerm", "verifiedCommands", "getArg", "start", "i", "arg", "v", "commandSyntaxFail", "sendCallback", "ItemStack", "MinecraftItemTypes", "system", "world", "GUI_ITEM", "ENTITY_INVENTORY", "system", "system", "CALLBACKS", "MAPPED_INVENTORIES", "PREVIOUS_CHANGE", "getSlotChanges", "entity", "oldInv", "newInv", "changes", "i", "change_data", "getItemUid", "item", "data", "mapInventory", "container", "inventory", "system", "callback", "DIMENSIONS", "change", "onEntityInventorySlotChange", "entities", "key", "Location", "CHESTGUIS", "PAGES", "getHeldItem", "player", "clearPlayersPointer", "ItemToClear", "inventory", "itemsToLoad", "i", "item", "e", "getItemAtSlot", "entity", "slot", "ItemGrabbedCallback", "gui", "slot", "change", "text", "item", "db", "page", "extras", "form", "sleep", "ChestGUI", "player", "ENTITY_INVENTORY", "system", "onEntityInventorySlotChange", "entity", "change", "pageId", "extras", "c", "AIR", "PAGES", "page", "slot", "clearPlayersPointer", "getItemAtSlot", "ItemGrabbedCallback", "CHESTGUIS", "ItemStack", "PageItem", "itemType", "components", "itemStack", "enchantments", "enchantment", "DefaultFill", "entity", "page", "extras", "container", "i", "slot", "AIR", "Page", "id", "fillType", "DefaultFill", "PAGES", "slot", "item", "action", "data", "MinecraftItemTypes", "HOME_PAGE", "Page", "PageItem", "ctx", "world", "Player", "BlockLocation", "MinecraftBlockTypes", "GameMode", "BlockLocation", "MinecraftBlockTypes", "DEFAULT_REGION_PERMISSIONS", "DOORS_SWITCHES", "BLOCK_CONTAINERS", "REGIONS", "REGIONS_HAVE_BEEN_GRABBED", "LOWEST_Y_VALUE", "HIGHEST_Y_VALUE", "Region", "regions", "TABLES", "region", "r", "blockLocation", "dimensionId", "betweenVector3", "from", "to", "permissions", "key", "DEFAULT_REGION_PERMISSIONS", "loadRegionDenys", "loc1", "BlockLocation", "loc2", "DIMENSIONS", "MinecraftBlockTypes", "entity", "value", "ChangePlayerRoleTask", "TABLES", "playerName", "t", "role", "tasks", "MinecraftBlockTypes", "MinecraftItemTypes", "APPEAL_LINK", "FORBIDDEN_ITEMS", "BANNED_ITEMS", "FORBIDDEN_BLOCKS", "BANNED_BLOCKS", "CONTAINERS", "ENCHANTMENTS", "kick", "player", "message", "onFail", "isServerOwner", "error", "getRole", "Player", "TABLES", "setRole", "value", "inGamePlayer", "world", "p", "ChangePlayerRoleTask", "getServerOwner", "id", "getServerOwnerName", "ownerId", "ids", "key", "setServerOwner", "isLockedDown", "setLockDown", "val", "loadRegionDenys", "region", "Region", "loc1", "BlockLocation", "loc2", "blockLocation", "DIMENSIONS", "MinecraftBlockTypes", "getConfigId", "BANNED_ITEMS", "BANNED_BLOCKS", "ENCHANTMENTS", "APPEAL_LINK", "setConfigId", "AIR", "ItemStack", "MinecraftItemTypes", "EntitiesLoad", "system", "player", "world", "getHeldItem", "GUI_ITEM", "CHESTGUIS", "getRole", "ChestGUI", "validIds", "c", "entity", "DIMENSIONS", "ENTITY_INVENTORY", "DynamicPropertiesDefinition", "EntityTypes", "world", "world", "propertyRegistry", "DIMENSIONS", "ENTITY_LOCATION", "def", "DynamicPropertiesDefinition", "EntityTypes", "ENTITY_IDENTIFIER", "system", "world", "MinecraftBlockTypes", "API_CONTAINERS", "CHECK_SIZE", "Container", "inventory", "i", "block", "CONTAINER_LOCATIONS", "system", "player", "world", "blockLoc", "vector3ToBlockLocation", "pos1", "CHECK_SIZE", "pos2", "location", "block", "API_CONTAINERS", "Container", "PROTECTIONS", "TABLES", "protection", "Player", "setBan", "player", "id", "duration", "reason", "by", "data", "Player", "durationToMs", "TABLES", "Ban", "MessageFormData", "MessageForm", "title", "body", "MessageFormData", "text", "callback", "player", "response", "confirmAction", "player", "action", "onConfirm", "onCancel", "MessageForm", "Command", "data", "type", "depth", "parent", "player", "LiteralArgumentType", "COMMANDS", "cmd", "name", "StringArgumentType", "IntegerArgumentType", "types", "ArrayArgumentType", "BooleanArgumentType", "LocationArgumentType", "callback", "text", "a", "b", "playerName", "duration", "reason", "name", "expire", "ban", "ctx", "player", "duration", "reason", "by", "TABLES", "confirmAction", "Ban", "text", "root", "Command", "getRole", "ArgumentTypes", "playerName", "banData", "bans", "msToTime", "root", "Command", "player", "getRole", "ctx", "table", "key", "data", "TABLES", "error", "value", "keys", "values", "Command", "player", "getRole", "ArgumentTypes", "ctx", "i", "Freeze", "player", "reason", "data", "TABLES", "root", "Command", "player", "getRole", "ArgumentTypes", "ctx", "reason", "Freeze", "playerName", "freeze", "TABLES", "freezes", "text", "CommandNameArgumentType", "name", "value", "COMMANDS", "c", "sendCommandType", "baseCommand", "args", "player", "PREFIX", "a", "sendArguments", "bc", "p", "child", "sendPageHeader", "maxPages", "getCommands", "getMaxPages", "commands", "root", "Command", "ctx", "cmd", "command", "world", "Command", "player", "getRole", "ctx", "isLockedDown", "setLockDown", "confirmAction", "text", "world", "kick", "Mute", "player", "TABLES", "duration", "reason", "by", "msLength", "durationToMs", "data", "root", "Command", "player", "getRole", "ArgumentTypes", "ctx", "duration", "reason", "Mute", "playerName", "mute", "TABLES", "mutes", "text", "msToTime", "Location", "Npc", "entity", "NPC_LOCATIONS", "l", "LocationEquals", "TABLES", "key", "location", "dimension", "data", "clearNpcLocations", "Command", "player", "getRole", "ctx", "x", "y", "z", "Npc", "Location", "system", "getServerTPS", "startTime", "ticks", "resolve", "s", "system", "Command", "ctx", "BlockLocation", "command", "Command", "player", "getRole", "ctx", "from_x", "from_z", "to_x", "to_z", "Region", "loc", "BlockLocation", "r", "regions", "region", "permission", "key", "value", "entityCommands", "entity", "currentAllowedEntities", "v", "ROLES", "StringIsNumber", "value", "ToArray", "enumme", "key", "root", "Command", "player", "getRole", "isServerOwner", "ArgumentTypes", "ROLES", "ctx", "playerName", "role", "setRole", "ownerRoot", "ownerId", "getServerOwner", "ids", "TABLES", "ownerName", "confirmAction", "setServerOwner", "ActionFormData", "ActionForm", "title", "body", "ActionFormData", "text", "iconPath", "callback", "player", "response", "ModalFormData", "FormCallback", "form", "player", "callback", "message", "MessageForm", "ModalForm", "title", "ModalFormData", "label", "options", "defaultValueIndex", "minimumValue", "maximumValue", "valueStep", "defaultValue", "placeholderText", "player", "callback", "i", "response", "FormCallback", "v", "manageBannedItemsForm", "player", "ActionForm", "removeBannedItemForm", "addBannedItemForm", "ModalForm", "getConfigId", "ctx", "item", "items", "p", "setConfigId", "manageBannedBlocksForm", "removeBannedBlockForm", "addBannedBlockForm", "block", "blocks", "manageEnchantmentLevelsForm", "ENCHANTMENTS", "enchantment", "levelString", "level", "enchants", "manageAppealLinkForm", "APPEAL_LINK", "link", "showAutoModHomeForm", "player", "form", "ActionForm", "protection", "PROTECTIONS", "showProtectionConfig", "showHomeForm", "data", "ModalForm", "keys", "key", "value", "ctx", "enabled", "config", "i", "showHomeForm", "player", "ActionForm", "showAutoModHomeForm", "manageBannedItemsForm", "manageBannedBlocksForm", "manageEnchantmentLevelsForm", "manageAppealLinkForm", "Command", "player", "getRole", "ctx", "showHomeForm", "world", "vanish", "player", "say", "world", "Command", "getRole", "ctx", "VERSION", "Command", "ctx", "VERSION", "Command", "player", "getRole", "ArgumentTypes", "ctx", "reason", "kick", "Log", "data", "TABLES", "timeDifference", "previous", "msPerMinute", "msPerHour", "msPerDay", "msPerMonth", "msPerYear", "elapsed", "root", "Command", "player", "getRole", "ctx", "message", "Log", "page", "order", "allLogs", "TABLES", "a", "b", "maxPages", "PREFIX", "key", "value", "ArgumentTypes", "playerName", "v", "protection", "root", "Command", "player", "getRole", "ArgumentTypes", "ctx", "destination", "system", "world", "CALLBACKS", "EntitiesLoad", "system", "players", "world", "i", "player", "CALLBACK", "forEachPlayer", "callback", "delay", "key", "TABLES", "forEachPlayer", "player", "banData", "kick", "msToTime", "getConfigId", "error", "Location", "forEachPlayer", "player", "freezeData", "TABLES", "Location", "DIMENSIONS", "world", "CALLBACKS", "world", "data", "PREFIX", "callback", "beforeChat", "key", "beforeChat", "data", "muteData", "Mute", "TABLES", "text", "BlockLocation", "system", "world", "system", "loadRegionDenys", "world", "data", "getRole", "region", "Region", "block", "DOORS_SWITCHES", "BLOCK_CONTAINERS", "i", "bL", "entity", "BlockLocation", "EntitiesLoad", "DIMENSIONS", "TABLES", "forEachPlayer", "player", "world", "world", "player", "TABLES", "isLockedDown", "getRole", "kick", "text", "Mute", "roleToSet", "ChangePlayerRoleTask", "setRole", "Items", "MinecraftItemTypes", "world", "FILLABLE_SLOTS", "ViewPlayersFill", "entity", "page", "extras", "container", "i", "slot", "AIR", "player", "world", "item", "PageItem", "MinecraftItemTypes", "ctx", "ViewPlayerInventoryFill", "p", "CHESTGUIS", "e", "inventory", "used_slots", "Items", "Page", "GameMode", "world", "system", "world", "Protection", "name", "description", "iconPath", "isEnabledByDefault", "PROTECTIONS", "data", "TABLES", "v", "saveData", "key", "config", "enabled", "value", "callback", "world", "forEachPlayer", "runScheduleId", "system", "id", "tickInterval", "delay", "world", "PlayerLog", "data", "player", "value", "ILLEGAL_GAMEMODE", "GameMode", "ViolationCount", "PlayerLog", "protection", "Protection", "config", "player", "world", "getRole", "Log", "count", "Ban", "MinecraftBlockTypes", "MinecraftEffectTypes", "MinecraftItemTypes", "Player", "system", "system", "world", "CALLBACKS", "vector3Equals", "from", "to", "playerLocation", "PlayerLog", "system", "sendCallback", "player", "data", "callback", "world", "oldLocation", "onPlayerMove", "key", "MOVEMENT_CONSTANTS", "SPEED_EFFECT_INCREASE", "ANTI_TP_DISTANCE_THRESHOLD", "TAGS", "DIMENSION_SWITCH_Y", "RIPTIDE_TIMEOUT", "world", "Location", "system", "CALLBACKS", "world", "data", "callback", "BeforeBlockBreakEvent", "beforeBlockBreak", "key", "block", "brokenBlockPermutation", "dimension", "player", "value", "API_CONTAINERS", "OLD_INVENTORY", "CONTAINER_LOCATIONS", "system", "Location", "e", "log", "PlayerLog", "IMPOSSIBLE_BREAK_TIME", "VALID_BLOCK_TAGS", "IMPOSSIBLE_BREAKS", "ViolationCount", "beforeBlockBreakKey", "protection", "Protection", "config", "beforeBlockBreak", "data", "getRole", "tag", "old", "count", "Ban", "violations", "PlayerLog", "ON_RIPTIDE_TIMEOUT", "distanceBetween", "loc1", "loc2", "getSpeedOffset", "player", "MinecraftEffectTypes", "SPEED_EFFECT_INCREASE", "isDistanceFlag", "distance", "tick", "speedIntensity", "ticks", "system", "offset", "MOVEMENT_CONSTANTS", "flag", "old", "violationCount", "onPlayerMove", "flagPhase", "blockIn", "vector3ToBlockLocation", "tag", "VALID_BLOCK_TAGS", "MinecraftBlockTypes", "onPlayerMoveSubKey", "protection", "Protection", "config", "getRole", "TAGS", "DIMENSION_SWITCH_Y", "ANTI_TP_DISTANCE_THRESHOLD", "data", "Player", "projectile", "source", "MinecraftItemTypes", "itemStack", "RIPTIDE_TIMEOUT", "previousMessage", "PlayerLog", "ViolationCount", "protection", "Protection", "data", "PREFIX", "getRole", "config", "isSpam", "count", "Mute", "error", "MinecraftEffectTypes", "Player", "world", "e", "world", "data", "Player", "serverOwnerName", "getServerOwnerName", "setRole", "setServerOwner", "MinecraftEffectTypes", "DynamicPropertiesDefinition", "MinecraftEntityTypes", "world", "OBJECTIVES", "world", "propertyRegistry", "def2", "DynamicPropertiesDefinition", "MinecraftEntityTypes", "def3", "obj", "OBJECTIVES", "NPC_LOCATIONS", "clearNpcLocations", "system", "data"]
}
