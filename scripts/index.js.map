{
  "version": 3,
  "sources": ["../src/index.ts", "../src/rubedo/lib/Command/index.ts", "../src/rubedo/config/commands.ts", "../src/rubedo/lib/Command/ArgumentTypes.ts", "../src/rubedo/database/Database.ts", "../src/rubedo/config/database.ts", "../src/rubedo/lib/Events/EntitiesLoad.ts", "../src/utils.ts", "../src/rubedo/lib/Command/Callback.ts", "../src/rubedo/lib/Command/utils.ts", "../src/rubedo/lib/Chest GUI/index.ts", "../src/rubedo/config/chest.ts", "../src/rubedo/lib/Chest GUI/Models/EntityChest.ts", "../src/rubedo/lib/Events/onSlotChange.ts", "../src/rubedo/lib/Chest GUI/utils.ts", "../src/rubedo/lib/Chest GUI/Models/ItemGrabbedCallback.ts", "../src/rubedo/lib/Chest GUI/Models/PageItem.ts", "../src/rubedo/lib/Chest GUI/Models/FillTypes.ts", "../src/rubedo/lib/Chest GUI/Models/Page.ts", "../src/rubedo/lib/Chest GUI/pages/home.ts", "../src/vendor/Anti-Cheat/utils.ts", "../src/vendor/Anti-Cheat/modules/models/Region.ts", "../src/vendor/Anti-Cheat/config/region.ts", "../src/vendor/Anti-Cheat/tables.ts", "../src/vendor/Anti-Cheat/modules/models/Task.ts", "../src/vendor/Anti-Cheat/config/moderation.ts", "../src/vendor/Anti-Cheat/config/enchantments.ts", "../src/rubedo/database/index.ts", "../src/rubedo/lib/Containers/index.ts", "../src/rubedo/config/containers.ts", "../src/rubedo/lib/Containers/Container.ts", "../src/vendor/Anti-Cheat/protections.ts", "../src/vendor/Anti-Cheat/modules/models/Ban.ts", "../src/rubedo/lib/Form/Models/MessageForm.ts", "../src/rubedo/config/form.ts", "../src/rubedo/lib/Form/utils.ts", "../src/rubedo/lib/Command/Command.ts", "../src/rubedo/lang/text.ts", "../src/rubedo/lib/Form/Models/ActionForm.ts", "../src/rubedo/lib/Form/Models/ModelForm.ts", "../src/rubedo/lib/Form/Models/FormCallback.ts", "../src/vendor/Anti-Cheat/modules/commands/ban.ts", "../src/vendor/Anti-Cheat/modules/commands/database.ts", "../src/vendor/Anti-Cheat/modules/commands/ecwipe.ts", "../src/vendor/Anti-Cheat/modules/models/Freeze.ts", "../src/vendor/Anti-Cheat/modules/commands/freeze.ts", "../src/vendor/Anti-Cheat/modules/commands/help.ts", "../src/vendor/Anti-Cheat/modules/commands/lockdown.ts", "../src/vendor/Anti-Cheat/modules/models/Mute.ts", "../src/vendor/Anti-Cheat/modules/commands/mute.ts", "../src/vendor/Anti-Cheat/modules/commands/npc.ts", "../src/vendor/Anti-Cheat/modules/models/Npc.ts", "../src/vendor/Anti-Cheat/modules/commands/ping.ts", "../src/vendor/Anti-Cheat/modules/commands/region.ts", "../src/vendor/Anti-Cheat/types.ts", "../src/vendor/Anti-Cheat/modules/commands/role.ts", "../src/vendor/Anti-Cheat/modules/forms/settings.ts", "../src/vendor/Anti-Cheat/modules/forms/automod.ts", "../src/vendor/Anti-Cheat/modules/forms/home.ts", "../src/vendor/Anti-Cheat/modules/commands/settings.ts", "../src/vendor/Anti-Cheat/modules/commands/vanish.ts", "../src/rubedo/config/app.ts", "../src/vendor/Anti-Cheat/modules/commands/version.ts", "../src/vendor/Anti-Cheat/modules/commands/kick.ts", "../src/vendor/Anti-Cheat/modules/models/Log.ts", "../src/vendor/Anti-Cheat/modules/commands/log.ts", "../src/vendor/Anti-Cheat/modules/commands/teleport.ts", "../src/rubedo/lib/Events/forEachPlayer.ts", "../src/vendor/Anti-Cheat/modules/managers/ban.ts", "../src/vendor/Anti-Cheat/modules/managers/freeze.ts", "../src/rubedo/lib/Events/beforeChat.ts", "../src/vendor/Anti-Cheat/modules/managers/mute.ts", "../src/vendor/Anti-Cheat/modules/managers/region.ts", "../src/vendor/Anti-Cheat/modules/events/playerJoin.ts", "../src/vendor/Anti-Cheat/modules/pages/see.ts", "../src/vendor/Anti-Cheat/modules/protections/cbe.ts", "../src/vendor/Anti-Cheat/modules/models/Protection.ts", "../src/vendor/Anti-Cheat/modules/protections/crasher.ts", "../src/vendor/Anti-Cheat/modules/protections/gamemode.ts", "../src/rubedo/database/types/PlayerLog.ts", "../src/rubedo/lib/Events/beforeBlockBreak.ts", "../src/vendor/Anti-Cheat/modules/protections/nuker.ts", "../src/vendor/Anti-Cheat/modules/protections/spam.ts", "../src/vendor/Anti-Cheat/modules/protections/unobtainable.ts", "../src/vendor/Anti-Cheat/modules/protections/nbt.ts", "../src/vendor/Anti-Cheat/modules/protections/movement.ts", "../src/rubedo/lib/Events/onPlayerMove.ts", "../src/vendor/Anti-Cheat/config/movement.ts", "../src/vendor/Anti-Cheat/modules/events/beforeDataDrivenEntityTriggerEvent.ts", "../src/vendor/Anti-Cheat/modules/events/worldInitialize.ts", "../src/rubedo/config/objectives.ts", "../src/vendor/Anti-Cheat/index.ts", "../src/vendor/import.ts"],
  "sourcesContent": ["import { system } from \"@minecraft/server\";\nimport \"./rubedo/lib/Command/index\";\nimport \"./rubedo/lib/Chest GUI/index\";\nimport \"./rubedo/database/index\";\nimport \"./rubedo/lib/Containers/index\";\nimport \"./vendor/import\";\n\nsystem.events.beforeWatchdogTerminate.subscribe((data) => {\n  data.cancel = true;\n  console.warn(`WATCHDOG TRIED TO CRASH = ${data.terminateReason}`);\n});\n", "import { BeforeChatEvent, world } from \"@minecraft/server\";\r\nimport { PREFIX } from \"../../config/commands\";\r\nimport type { Command } from \"./Command\";\r\nimport {\r\n  commandNotFound,\r\n  commandSyntaxFail,\r\n  getChatAugments,\r\n  noPerm,\r\n  sendCallback,\r\n} from \"./utils\";\r\n\r\n/**\r\n * An array of all active commands\r\n */\r\nexport const COMMANDS: Command<any>[] = [];\r\n\r\nworld.events.beforeChat.subscribe((data) => {\r\n  if (!data.message.startsWith(PREFIX)) return; // This is not a command\r\n  data.cancel = true;\r\n  const args = getChatAugments(data.message, PREFIX);\r\n  const command = COMMANDS.find(\r\n    (c) =>\r\n      c.depth == 0 &&\r\n      (c.data.name == args[0] || c.data?.aliases?.includes(args[0]))\r\n  );\r\n  const event = {\r\n    message: data.message,\r\n    sendToTargets: data.sendToTargets,\r\n    sender: data.sender,\r\n    targets: data.targets,\r\n  } as BeforeChatEvent;\r\n  if (!command) return commandNotFound(data.sender, args[0]);\r\n  if (!command.data?.requires(data.sender))\r\n    return noPerm(event.sender, command);\r\n  args.shift(); // Remove first command so we can look at args\r\n  // Check Args/SubCommands for errors\r\n  const verifiedCommands: Command[] = [];\r\n  const getArg = (start: Command<any>, i: number): string => {\r\n    if (start.children.length > 0) {\r\n      const arg = start.children.find((v) => v.type.matches(args[i]).success);\r\n      if (!arg && !args[i] && start.callback) return;\r\n      if (!arg)\r\n        return commandSyntaxFail(event.sender, command, start, args, i), \"fail\";\r\n      if (!arg.data?.requires(event.sender))\r\n        return noPerm(event.sender, arg), \"fail\";\r\n      verifiedCommands.push(arg);\r\n      return getArg(arg, i + 1);\r\n    }\r\n  };\r\n  let v = getArg(command, 0);\r\n  if (v == \"fail\") return;\r\n  sendCallback(args, verifiedCommands, event, command);\r\n});\r\n", "/*\n|--------------------------------------------------------------------------\n| Command Prefix\n|--------------------------------------------------------------------------\n|\n| This is the prefix of the commands that are send in chat\n| changing this changes what people have to type in before using\n| a command for instance: -help. (-) is the command prefix.\n|\n*/\nexport const PREFIX = \"-\";\n", "import { Player, world } from \"@minecraft/server\";\r\nimport { Database } from \"../../database/Database\";\r\n\r\n/**\r\n * Fetch an online players data\r\n */\r\nexport function fetch(playerName: string): Player | null {\r\n  return [...world.getPlayers()].find((player) => player.name === playerName);\r\n}\r\n\r\nexport interface IArgumentReturnData<T> {\r\n  /**\r\n   * If this argument matches the value\r\n   */\r\n  success: boolean;\r\n  /**\r\n   * The parsed value that should be passed in command callback\r\n   * if there is no return type this will be null\r\n   */\r\n  value?: T;\r\n}\r\n\r\nexport abstract class IArgumentType {\r\n  /**\r\n   * The return type\r\n   */\r\n  type: any;\r\n  /**\r\n   * The name that the help for this command will see\r\n   * @example \"string\"\r\n   * @example \"Location\"\r\n   * @example \"int\"\r\n   * @example \"number\"\r\n   * @example \"UnitType\"\r\n   */\r\n  typeName: string;\r\n  /**\r\n   * The name this argument is\r\n   */\r\n  name: string = \"name\";\r\n  /**\r\n   * Checks if a value matches this argument type, also\r\n   * returns the corresponding type\r\n   */\r\n  matches(value: string): IArgumentReturnData<any> {\r\n    return { success: true };\r\n  }\r\n  /**\r\n   * the fail message that should be sent if player fails to meet the matches criteria\r\n   * @param value value that was sent\r\n   * @returns what would happen if you didn't enter the right value\r\n   */\r\n  fail(value: string): string {\r\n    return `Value must be of type string!`;\r\n  }\r\n  constructor(name: string = \"any\") {}\r\n}\r\n\r\nexport class LiteralArgumentType implements IArgumentType {\r\n  type: null;\r\n  typeName = \"literal\";\r\n  matches(value: string): IArgumentReturnData<null> {\r\n    return {\r\n      success: this.name == value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `${value} should be ${this.name}!`;\r\n  }\r\n  constructor(public name: string = \"literal\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class StringArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"string\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: value && value != \"\",\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value must be of type string!`;\r\n  }\r\n  constructor(public name: string = \"string\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class IntegerArgumentType implements IArgumentType {\r\n  type: number;\r\n  typeName = \"int\";\r\n  matches(value: string): IArgumentReturnData<number> {\r\n    return {\r\n      success: !isNaN(value as any),\r\n      value: parseInt(value),\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value must be valid number!`;\r\n  }\r\n  constructor(public name: string = \"integer\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class FloatArgumentType implements IArgumentType {\r\n  type: number;\r\n  typeName = \"float\";\r\n  matches(value: string): IArgumentReturnData<number> {\r\n    return {\r\n      success: Boolean(value?.match(/^\\d+\\.\\d+$/)?.[0]),\r\n      value: parseInt(value),\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value must be valid float!`;\r\n  }\r\n  constructor(public name: string = \"float\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class LocationArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"location\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: /^([~^]{0,1}(-\\d)?(\\d*)?(\\.(\\d+))?)$/.test(value),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `Value needs to be a valid number, value can include: [~,^]`;\r\n  }\r\n  constructor(public name: string = \"location\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class BooleanArgumentType implements IArgumentType {\r\n  type: boolean;\r\n  typeName = \"boolean\";\r\n  matches(value: string): IArgumentReturnData<boolean> {\r\n    return {\r\n      success: Boolean(value?.match(/^(true|false)$/)?.[0]),\r\n      value: value == \"true\" ? true : false,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `\"${value}\" can be either \"true\" or \"false\"`;\r\n  }\r\n  constructor(public name: string = \"boolean\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class PlayerArgumentType implements IArgumentType {\r\n  type: Player;\r\n  typeName = \"Player\";\r\n  matches(value: string): IArgumentReturnData<Player> {\r\n    return {\r\n      success: fetch(value) ? true : false,\r\n      value: fetch(value),\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `player: \"${value}\", is not in this world`;\r\n  }\r\n  constructor(public name: string = \"player\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class TargetArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"Target\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: Boolean(value?.match(/^(@.|\"[\\s\\S]+\")$/)?.[0]),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `${value} is not a valid target`;\r\n  }\r\n  constructor(public name: string = \"target\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport class ArrayArgumentType<T extends ReadonlyArray<string>>\r\n  implements IArgumentType\r\n{\r\n  type: T[number];\r\n  typeName = \"string\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: this.types.includes(value),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `\"${value}\" must be one of these values: ${this.types.join(\" | \")}`;\r\n  }\r\n  constructor(public name: string = \"array\", public types: T) {\r\n    this.name = name;\r\n    this.types = types;\r\n\r\n    this.typeName = types.join(\" | \").replace(/(.{25})..+/, \"$1...\");\r\n  }\r\n}\r\n\r\nexport class DurationArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"Duration\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    return {\r\n      success: /^(\\d+[hdysmw],?)+$/.test(value),\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `\"${value}\" must be a value like \"10d\" or \"3s\" the first part is the length second is unit`;\r\n  }\r\n  constructor(public name: string) {}\r\n}\r\n\r\nexport class PlayerNameArgumentType implements IArgumentType {\r\n  type: string;\r\n  typeName = \"playerName\";\r\n  matches(value: string): IArgumentReturnData<string> {\r\n    const db = new Database<string, string>(\"ids\");\r\n    const player = db.get(value);\r\n    return {\r\n      success: player ? true : false,\r\n      value: value,\r\n    };\r\n  }\r\n  fail(value: string): string {\r\n    return `player: \"${value}\" has never played this world before! Tip: if the name has spaces in it use quotes around name!`;\r\n  }\r\n  constructor(public name: string = \"playerName\") {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nexport const ArgumentTypes = {\r\n  string: StringArgumentType,\r\n  int: IntegerArgumentType,\r\n  float: FloatArgumentType,\r\n  location: LocationArgumentType,\r\n  boolean: BooleanArgumentType,\r\n  player: PlayerArgumentType,\r\n  target: TargetArgumentType,\r\n  array: ArrayArgumentType,\r\n  duration: DurationArgumentType,\r\n  playerName: PlayerNameArgumentType,\r\n};\r\n", "import { Entity, ItemStack, MinecraftItemTypes } from \"@minecraft/server\";\nimport {\n  ENTITY_IDENTIFIER,\n  ENTITY_LOCATION,\n  INVENTORY_SIZE,\n  MAX_DATABASE_STRING_SIZE,\n} from \"../config/database\";\nimport { EntitiesLoad } from \"../lib/Events/EntitiesLoad\";\nimport { DIMENSIONS, chunkString } from \"../../utils\";\n\nexport class Database<Key extends string = string, Value = {}> {\n  /**\n   * Creates a table entity that is used for data storage\n   * @param tableName\n   * @param index if not specified no index will be set\n   * @returns\n   */\n  static createTableEntity(tableName: string, index?: number): Entity {\n    const entity = DIMENSIONS.overworld.spawnEntity(\n      ENTITY_IDENTIFIER,\n      ENTITY_LOCATION\n    );\n    entity.setDynamicProperty(\"tableName\", tableName);\n    entity.nameTag = `\u00A7aDatabase Table: ${tableName}\u00A7r`;\n    if (index) entity.setDynamicProperty(\"index\", index);\n    return entity;\n  }\n\n  /**\n   * Gets all table Entities associated with this tableName\n   * @param tableName\n   * @returns\n   */\n  static getTableEntities(tableName: string): Entity[] {\n    return DIMENSIONS.overworld\n      .getEntitiesAtBlockLocation(ENTITY_LOCATION)\n      .filter(\n        (e) =>\n          e.typeId == ENTITY_IDENTIFIER &&\n          e.getDynamicProperty(\"tableName\") == tableName\n      );\n  }\n\n  /**\n   * Data saved in memory\n   */\n  private MEMORY: { [key in Key]: Value } | null;\n\n  /**\n   * List of queued tasks on this table\n   */\n  private QUEUE: Array<() => void>;\n\n  constructor(public tableName: string) {\n    this.tableName = tableName;\n    this.MEMORY = null;\n    this.QUEUE = [];\n    EntitiesLoad.subscribe(async () => {\n      await this.initData();\n      this.QUEUE.forEach((v) => v());\n    });\n  }\n\n  /**\n   * Adds a queue task to be awaited\n   * @returns once its this items time to run in queue\n   */\n  private async addQueueTask(): Promise<void> {\n    return new Promise((resolve) => {\n      this.QUEUE.push(resolve);\n    });\n  }\n\n  /**\n   * Saves data into this database\n   * @param data\n   * @returns once data is saved\n   */\n  private async saveData(): Promise<void> {\n    if (!this.MEMORY) await this.addQueueTask();\n\n    let entities = Database.getTableEntities(this.tableName);\n    /**\n     * The split chunks of the stringified data, This is done because we can\n     * only store {@link MAX_DATABASE_STRING_SIZE} chars in a single nameTag\n     */\n    let chunks = chunkString(\n      JSON.stringify(this.MEMORY),\n      MAX_DATABASE_STRING_SIZE\n    );\n    /**\n     * The amount of entities that is needed to store {@link chunks} data\n     */\n    const entitiesNeeded =\n      Math.ceil(chunks.length / INVENTORY_SIZE) - entities.length;\n    if (entitiesNeeded > 0) {\n      for (let i = 0; i < entitiesNeeded; i++) {\n        entities.push(Database.createTableEntity(this.tableName));\n      }\n    }\n    for (const [i, entity] of entities.entries()) {\n      const inventory = entity.getComponent(\"inventory\").container;\n      for (const [i, chunk] of chunks.entries()) {\n        if (!chunk) continue;\n        if (i > inventory.size - 1) break; // Exit because it has maxed items\n        let item = new ItemStack(MinecraftItemTypes.acaciaBoat);\n        item.nameTag = chunk;\n        inventory.setItem(i, item);\n        chunks[i] = null; // Delete chunk because its been set.\n      }\n      // Set all unUsed slots to air\n      for (let i = chunks.length + 1; i < inventory.size; i++) {\n        inventory.setItem(i, new ItemStack(MinecraftItemTypes.stick, 0));\n      }\n      entity.setDynamicProperty(\"index\", i);\n      entities[i] = null; // Set this entity to null because its maxed out!\n      // If all chunks have been saved no need to go to next entity\n      if (!chunks.find((v) => v)) break;\n    }\n    // Check for unUsed entities and despawn them\n    entities.filter((e) => e).forEach((e) => e.triggerEvent(\"despawn\"));\n    return;\n  }\n\n  /**\n   * Grabs Data and should only be used on worldLoad\n   * @returns\n   */\n  private async initData(): Promise<{ [key in Key]: Value }> {\n    let entities = Database.getTableEntities(this.tableName).sort(\n      (a, b) =>\n        (a.getDynamicProperty(\"index\") as number) -\n        (b.getDynamicProperty(\"index\") as number)\n    );\n    let stringifiedData: string = \"\";\n    for (const entity of entities) {\n      const inventory = entity.getComponent(\"inventory\").container;\n      for (let i = 0; i < inventory.size; i++) {\n        const item = inventory.getItem(i);\n        if (!item) continue;\n        stringifiedData = stringifiedData + item.nameTag;\n      }\n    }\n    const data = stringifiedData == \"\" ? {} : JSON.parse(stringifiedData);\n    this.MEMORY = data;\n    return data;\n  }\n\n  /**\n   * Sets a key to a value in this table\n   * @param key\n   * @param value\n   */\n  async set(key: Key, value: Value): Promise<void> {\n    this.MEMORY[key] = value;\n    return this.saveData();\n  }\n\n  /**\n   * Gets a value from this table\n   * @param key\n   * @returns the keys corresponding key\n   */\n  get(key: Key): Value {\n    if (!this.MEMORY)\n      throw new Error(\n        \"Entities not loaded! Consider using `getAsync` instead!\"\n      );\n    return this.MEMORY[key];\n  }\n\n  /**\n   * Gets a value async from this table, this should be used on calls from like\n   * entityCreate, system.runSchedule or things that could be before database entities spawn\n   * @param key\n   * @returns\n   */\n  async getSync(key: Key): Promise<Value> {\n    if (this.MEMORY) return this.get(key);\n    await this.addQueueTask();\n    return this.MEMORY[key];\n  }\n\n  /**\n   * Get all the keys in the table\n   * @returns\n   */\n  keys(): Key[] {\n    if (!this.MEMORY)\n      throw new Error(\n        \"Entities not loaded! Consider using `keysSync` instead!\"\n      );\n    return Object.keys(this.MEMORY) as Key[];\n  }\n\n  /**\n   * Get all the keys in the table async, this should be used on world load\n   * @returns\n   */\n  async keysSync(): Promise<Key[]> {\n    if (this.MEMORY) return this.keys();\n    await this.addQueueTask();\n    return Object.keys(this.MEMORY) as Key[];\n  }\n\n  /**\n   * Get all the values in the table\n   * @returns\n   */\n  values(): Value[] {\n    if (!this.MEMORY)\n      throw new Error(\n        \"Entities not loaded! Consider using `valuesSync` instead!\"\n      );\n    return Object.values(this.MEMORY) as Value[];\n  }\n\n  /**\n   * Get all the values in the table async, this should be used on world load\n   * @returns\n   */\n  async valuesSync(): Promise<Value[]> {\n    if (this.MEMORY) return this.values();\n    await this.addQueueTask();\n    return Object.values(this.MEMORY) as Value[];\n  }\n\n  /**\n   * Check if the key exists in the table\n   * @param key the key to test\n   * @returns\n   */\n  has(key: Key): boolean {\n    if (!this.MEMORY)\n      throw new Error(\"Entities not loaded! Consider using `hasSync` instead!\");\n    return (Object.keys(this.MEMORY) as Key[]).includes(key);\n  }\n\n  /**\n   * Check if the key exists in the table async, this should be used on worldLoad\n   * @param key the key to test\n   * @returns\n   */\n  async hasSync(key: Key): Promise<boolean> {\n    if (this.MEMORY) return this.has(key);\n    await this.addQueueTask();\n    return (Object.keys(this.MEMORY) as Key[]).includes(key);\n  }\n\n  /**\n   * Gets all the keys and values\n   * @returns\n   */\n  collection(): { [key in Key]: Value } {\n    if (!this.MEMORY)\n      throw new Error(\n        \"Entities not loaded! Consider using `collectionSync` instead!\"\n      );\n    return this.MEMORY;\n  }\n\n  /**\n   * Gets all the keys and values async, this should be used for grabbingCollection on world load\n   * @returns\n   */\n  async collectionSync(): Promise<{ [key in Key]: Value }> {\n    if (this.MEMORY) return this.collection();\n    await this.addQueueTask();\n    return this.MEMORY;\n  }\n\n  /**\n   * Delete the key from the table\n   * @param key the key to delete\n   * @returns\n   */\n  async delete(key: Key): Promise<boolean> {\n    const status = delete this.MEMORY[key];\n    await this.saveData();\n    return status;\n  }\n\n  /**\n   * Clear everything in the table\n   */\n  async clear(): Promise<void> {\n    this.MEMORY = {} as { [key in Key]: Value };\n    return await this.saveData();\n  }\n}\n", "import { BlockLocation } from \"@minecraft/server\";\n\n/*\n|--------------------------------------------------------------------------\n| Max Database string size\n|--------------------------------------------------------------------------\n|\n| Here is the max database save size meaning when a save gets made\n| it tests the size of that save and splits up the save depending on this\n| Size. It's related to Minecraft's 32k bit limit.\n|\n*/\nexport const MAX_DATABASE_STRING_SIZE = 32000;\n\n/*\n|--------------------------------------------------------------------------\n| Entity Id\n|--------------------------------------------------------------------------\n|\n| This is the entity id of the database this is what stores the information\n| of the database on its nameTag\n|\n*/\nexport const ENTITY_IDENTIFIER = \"rubedo:database\";\n\n/*\n|--------------------------------------------------------------------------\n| Entity Spawn Location\n|--------------------------------------------------------------------------\n|\n| This is the spawn location of the database entities there will be\n| Multiple entities at this location for each chunk\n|\n*/\nexport const ENTITY_LOCATION = new BlockLocation(0, -64, 0);\n\n/*\n|--------------------------------------------------------------------------\n| Entity's INVENTORY_SIZE\n|--------------------------------------------------------------------------\n|\n| The max amount of items this entity can store in its inventory\n|\n*/\nexport const INVENTORY_SIZE = 128;\n", "import { system, world } from \"@minecraft/server\";\r\nimport { DIMENSIONS } from \"../../../utils\";\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: () => void;\r\n} = {};\r\n\r\n/**\r\n * If the world is loaded or not\r\n */\r\nexport let ENTITIES_LOADED = false;\r\n\r\nsystem.run(async () => {\r\n  try {\r\n    await DIMENSIONS.overworld.runCommandAsync(`testfor @a`);\r\n    ENTITIES_LOADED = true;\r\n    for (const [i, callback] of Object.entries(CALLBACKS)) {\r\n      callback();\r\n      delete CALLBACKS[i as unknown as number];\r\n    }\r\n  } catch (error) {\r\n    let e = world.events.entityCreate.subscribe((data) => {\r\n      system.run(() => {\r\n        ENTITIES_LOADED = true;\r\n        for (const [i, callback] of Object.entries(CALLBACKS)) {\r\n          callback();\r\n          delete CALLBACKS[i as unknown as number];\r\n        }\r\n        world.events.entityCreate.unsubscribe(e);\r\n      });\r\n    });\r\n  }\r\n});\r\n\r\nexport class EntitiesLoad {\r\n  static async awaitLoad(): Promise<void> {\r\n    if (ENTITIES_LOADED) return;\r\n    return new Promise((resolve) => {\r\n      EntitiesLoad.subscribe(resolve);\r\n    });\r\n  }\r\n  static subscribe(callback: () => void): number {\r\n    if (ENTITIES_LOADED) {\r\n      callback();\r\n      return;\r\n    }\r\n    const key = Object.keys(CALLBACKS).length;\r\n    CALLBACKS[key] = callback;\r\n    return key;\r\n  }\r\n\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n", "import {\r\n  BlockLocation,\r\n  Entity,\r\n  Location,\r\n  MinecraftDimensionTypes,\r\n  system,\r\n  Vector3,\r\n  world,\r\n} from \"@minecraft/server\";\r\nimport { durationSegment, durationSegmentType } from \"./types\";\r\n\r\n/**\r\n * This is to reduce lag when grabbing dimensions keep them set and pre-defined\r\n */\r\nexport const DIMENSIONS = {\r\n  overworld: world.getDimension(MinecraftDimensionTypes.overworld),\r\n  nether: world.getDimension(MinecraftDimensionTypes.nether),\r\n  theEnd: world.getDimension(MinecraftDimensionTypes.theEnd),\r\n  \"minecraft:overworld\": world.getDimension(MinecraftDimensionTypes.overworld),\r\n  \"minecraft:nether\": world.getDimension(MinecraftDimensionTypes.nether),\r\n  \"minecraft:the_end\": world.getDimension(MinecraftDimensionTypes.theEnd),\r\n};\r\n\r\n/**\r\n * Get score of an entity\r\n * @example getScore(Entity, 'Money');\r\n */\r\nexport function getScore(entity: Entity, objective: string): number {\r\n  try {\r\n    return world.scoreboard.getObjective(objective).getScore(entity.scoreboard);\r\n  } catch (error) {\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * sets the score of a name\r\n * @example setScore(\"Smell of curry\", 'Money');\r\n */\r\nexport function setScore(\r\n  entityName: string,\r\n  objective: string,\r\n  value: Number\r\n): void {\r\n  try {\r\n    DIMENSIONS.overworld.runCommandAsync(\r\n      `scoreboard players set \"${entityName}\" ${objective} ${value}`\r\n    );\r\n  } catch (error) {\r\n    console.warn(error + error.stack);\r\n  }\r\n}\r\n\r\n/**\r\n * Duration converter\r\n * @param duration time to convert\r\n * @example ```\r\n * durationToMs(\"10s\")\r\n * durationToMs(\"10d,2y\")\r\n * durationToMs(\"5m\")\r\n * durationToMs(\"23ms,10s\")\r\n * ```\r\n */\r\nexport function durationToMs(duration: string): number {\r\n  /**\r\n   * This holds the different duration values this duration can have\r\n   * @example `[\"10d\", \"20s\", \"2h\"]`\r\n   * @example `[\"2h\"]`\r\n   */\r\n  const values: durationSegment[] = duration.split(\",\") as durationSegment[];\r\n  console.warn(values.length);\r\n  let ms = 0;\r\n  for (const value of values) {\r\n    const length = parseInt(value.match(/\\D+|\\d+/g)[0]);\r\n    const unit = value.match(/\\D+|\\d+/g)[1] as durationSegmentType;\r\n    if (unit == \"y\") ms = ms + 3.17098e-11 * length;\r\n    if (unit == \"w\") ms = ms + 6.048e8 * length;\r\n    if (unit == \"d\") ms = ms + 8.64e7 * length;\r\n    if (unit == \"h\") ms = ms + 3.6e6 * length;\r\n    if (unit == \"m\") ms = ms + 60000 * length;\r\n    if (unit == \"s\") ms = ms + 1000 * length;\r\n    if (unit == \"ms\") ms = ms + length;\r\n  }\r\n  return ms;\r\n}\r\n\r\n/**\r\n * Converts a date stored in ms to a Date string\r\n * @param duration milliseconds to convert\r\n * @returns Date as a string\r\n */\r\nexport function msToTime(duration: number) {\r\n  return new Date(duration).toString();\r\n}\r\n\r\n/**\r\n * Converts a location to a block location\r\n */\r\nexport function vector3ToBlockLocation(loc: Vector3): BlockLocation {\r\n  return new BlockLocation(\r\n    Math.floor(loc.x),\r\n    Math.floor(loc.y),\r\n    Math.floor(loc.z)\r\n  );\r\n}\r\n\r\n/**\r\n * Sleeps your code\r\n * @param {number} tick time in ticks you want the return to occur\r\n * @returns {Promise<void>}\r\n */\r\nexport function sleep(tick: number): Promise<void> {\r\n  return new Promise((resolve) => {\r\n    let runScheduleId = system.runSchedule(() => {\r\n      resolve();\r\n      system.clearRunSchedule(runScheduleId);\r\n    }, tick);\r\n  });\r\n}\r\n\r\n/**\r\n * Checks if a location equals another location\r\n * @param a first location\r\n * @param b location to test against first\r\n * @returns {boolean} if they locations are the same\r\n */\r\nexport function LocationEquals(\r\n  a: Vector3 | Location | BlockLocation,\r\n  b: Vector3 | Location | BlockLocation\r\n): boolean {\r\n  let aLocations = [a.x, a.y, a.z];\r\n  let bLocations = [a.x, a.y, a.z];\r\n  if (a instanceof BlockLocation || b instanceof BlockLocation) {\r\n    aLocations = aLocations.map((v) => Math.trunc(v));\r\n    bLocations = bLocations.map((v) => Math.trunc(v));\r\n  }\r\n  return aLocations.find((v, i) => bLocations[i] != v) ? false : true;\r\n}\r\n\r\n/**\r\n * Sorts 3D vectors to a min and max vector\r\n * @param vector1\r\n * @param vector2\r\n * @returns {[Vector3, Vector3]}\r\n * @author \"mrpatches123\"\r\n */\r\nexport function sort3DVectors(\r\n  vector1: Vector3,\r\n  vector2: Vector3\r\n): [Vector3, Vector3] {\r\n  const { x: x1, y: y1, z: z1 } = vector1;\r\n  const { x: x2, y: y2, z: z2 } = vector2;\r\n  const ox1 = x1 < x2 ? x1 : x2;\r\n  const oy1 = y1 < y2 ? y1 : y2;\r\n  const oz1 = z1 < z2 ? z1 : z2;\r\n  const ox2 = x1 < x2 ? x2 : x1;\r\n  const oy2 = y1 < y2 ? y2 : y1;\r\n  const oz2 = z1 < z2 ? z2 : z1;\r\n  return [\r\n    { x: ox1, y: oy1, z: oz1 },\r\n    { x: ox2, y: oy2, z: oz2 },\r\n  ];\r\n}\r\n\r\n/**\r\n * Checks if a target vector is between two vectors\r\n * @param target\r\n * @param vector1\r\n * @param vector2\r\n * @returns\r\n * @author \"mrpatches123\"\r\n */\r\nexport function betweenVector3(\r\n  target: Vector3,\r\n  vector1: Vector3,\r\n  vector2: Vector3\r\n): boolean {\r\n  const [{ x: x1, y: y1, z: z1 }, { x: x2, y: y2, z: z2 }] = sort3DVectors(\r\n    vector1,\r\n    vector2\r\n  );\r\n  let { x, y, z } = target;\r\n  return x >= x1 && x <= x2 && y >= y1 && y <= y2 && z >= z1 && z <= z2;\r\n}\r\n\r\n/**\r\n * Splits a string into chunk sizes\r\n */\r\nexport function chunkString(str: string, length: number): string[] {\r\n  return str.match(new RegExp(\".{1,\" + length + \"}\", \"g\"));\r\n}\r\n", "import { BeforeChatEvent, Player } from \"@minecraft/server\";\r\n\r\nexport class CommandCallback {\r\n  data: BeforeChatEvent;\r\n  sender: Player;\r\n\r\n  /**\r\n   * Returns a commands callback\r\n   * @param data chat data that was used\r\n   */\r\n  constructor(data: BeforeChatEvent) {\r\n    this.data = data;\r\n    this.sender = data.sender;\r\n  }\r\n  /**\r\n   * Replies to the sender of a command callback\r\n   * @param text Message or a lang code\r\n   * @example ctx.reply('Hello World!');\r\n   */\r\n  reply(text: string) {\r\n    this.sender.tell(text);\r\n  }\r\n}\r\n", "import { BeforeChatEvent, Player, Vector, Vector3 } from \"@minecraft/server\";\nimport { PREFIX } from \"../../config/commands\";\nimport { LiteralArgumentType, LocationArgumentType } from \"./ArgumentTypes\";\nimport { CommandCallback } from \"./Callback\";\nimport type { Command } from \"./Command\";\n\n/**\n * Returns a Before chat events augments\n * @example this.getChatAugments(BeforeChatEvent)\n */\nexport function getChatAugments(\n  message: string,\n  prefix: string\n): Array<string> {\n  try {\n    return message\n      .slice(prefix.length)\n      .trim()\n      .match(/\"[^\"]+\"|[^\\s]+/g)\n      .map((e) => e.replace(/\"(.+)\"/, \"$1\").toString());\n  } catch (error) {\n    return [];\n  }\n}\n\n/**\n * Sends a command not found message to a player\n * @param player player to send message to\n */\nexport function commandNotFound(player: Player, command: string) {\n  player.tell({\n    rawtext: [\n      {\n        text: `\u00A7c`,\n      },\n      {\n        translate: `commands.generic.unknown`,\n        with: [`${command}`],\n      },\n    ],\n  });\n}\n\n/**\n * Sends a command not found message to a player\n * @param player player to send message to\n */\nexport function noPerm(player: Player, command: Command) {\n  player.tell({\n    rawtext: [\n      {\n        text: command.data.invalidPermission\n          ? command.data.invalidPermission\n          : `\u00A7cYou do not have permission to use \"${command.data.name}\"`,\n      },\n    ],\n  });\n}\n\n/**\n * Sends a syntax failure message to player\n * @param player\n * @param command\n * @param args\n * @param i\n */\nexport function commandSyntaxFail(\n  player: Player,\n  baseCommand: Command,\n  command: Command,\n  args: string[],\n  i: number\n) {\n  player.tell({\n    rawtext: [\n      {\n        text: `\u00A7c`,\n      },\n      {\n        translate: `commands.generic.syntax`,\n        with: [\n          `${PREFIX}${baseCommand.data.name} ${args.slice(0, i).join(\" \")}`,\n          args[i] ?? \" \",\n          args.slice(i + 1).join(\" \"),\n        ],\n      },\n    ],\n  });\n  if (command.children.length > 1 || !args[i]) {\n    // this type could be many things\n    const types = command.children.map((c) =>\n      c.type instanceof LiteralArgumentType ? c.type.name : c.type?.typeName\n    );\n    player.tell(\n      `\u00A7c\"${args[i] ?? \"undefined\"}\" is not valid! Argument \"${\n        [...new Set(command.children.map((c) => c.type.name))][0]\n      }\" can be typeof: \"${types.join('\", \"')}\"`\n    );\n  } else {\n    // this type is only 1 thing\n    player.tell(`\u00A7c${command.children[0]?.type?.fail(args[i])}`);\n  }\n}\n\n/**\n * Returns a location of the inputted argument\n * @example parseLocationArgs([\"~1\", \"3\", \"^7\"], { location: [1,2,3] , viewVector: [1,2,3] })\n */\nexport function parseLocationArgs(\n  [x, y, z]: [x: string, y: string, z: string],\n  { location, viewVector }: { location: Vector3; viewVector: Vector }\n): Vector3 {\n  if (!x || !y || !x) return null;\n  const locations = [location.x, location.y, location.z];\n  const viewVectors = [viewVector.x, viewVector.y, viewVector.z];\n  const a = [x, y, z].map((arg) => {\n    const r = parseFloat(arg);\n    return isNaN(r) ? 0 : r;\n  });\n  const b = [x, y, z].map((arg, index) => {\n    return arg.includes(\"~\")\n      ? a[index] + locations[index]\n      : arg.includes(\"^\")\n      ? a[index] + viewVectors[index]\n      : a[index];\n  });\n  return { x: b[0], y: b[1], z: b[2] };\n}\n\n/**\n * Sends a callback back to the command\n * @param cmdArgs the args that the command used\n * @param args args to use\n */\nexport function sendCallback(\n  cmdArgs: string[],\n  args: Command<any>[],\n  event: BeforeChatEvent,\n  baseCommand: Command<any>\n) {\n  const lastArg = args[args.length - 1] ?? baseCommand;\n  const argsToReturn: any[] = [];\n  for (const [i, arg] of args.entries()) {\n    if (arg.type.name.endsWith(\"*\")) continue;\n    if (arg.type instanceof LocationArgumentType) {\n      argsToReturn.push(\n        parseLocationArgs(\n          [cmdArgs[i], cmdArgs[i + 1], cmdArgs[i + 2]],\n          event.sender\n        )\n      );\n      continue;\n    }\n    if (arg.type instanceof LiteralArgumentType) continue;\n    argsToReturn.push(arg.type.matches(cmdArgs[i]).value ?? cmdArgs[i]);\n  }\n  lastArg.callback(new CommandCallback(event), ...argsToReturn);\n}\n", "import {\r\n  ItemStack,\r\n  MinecraftItemTypes,\r\n  system,\r\n  world,\r\n} from \"@minecraft/server\";\r\nimport { ENTITY_INVENTORY, GUI_ITEM } from \"../../config/chest\";\r\nimport { ChestGUI } from \"./Models/EntityChest\";\r\nimport { CHESTGUIS, getHeldItem } from \"./utils.js\";\r\nimport \"./pages/home\";\r\nimport { DIMENSIONS } from \"../../../utils.js\";\r\nimport { EntitiesLoad } from \"../Events/EntitiesLoad\";\r\nimport { getRole } from \"../../../vendor/Anti-Cheat/utils\";\r\n\r\nexport const AIR = new ItemStack(MinecraftItemTypes.acaciaBoat, 0);\r\n\r\nEntitiesLoad.subscribe(() => {\r\n  system.runSchedule(() => {\r\n    for (const player of world.getPlayers()) {\r\n      /**\r\n       * Loop through all players, check if player has a chest gui\r\n       * if not create them one\r\n       * Once all players are checked verify there are no false entities\r\n       */\r\n      if (getHeldItem(player)?.typeId != GUI_ITEM) {\r\n        if (CHESTGUIS[player.name]) CHESTGUIS[player.name].despawn();\r\n        continue;\r\n      }\r\n      // Player has a item Held we need to verify that they have a gui\r\n      if (Object.keys(CHESTGUIS).includes(player?.name)) continue;\r\n      // Player does not have a chest gui spawn them in one\r\n      if (getRole(player) != \"admin\") continue;\r\n      CHESTGUIS[player.name] = new ChestGUI(player);\r\n    }\r\n  }, 10);\r\n});\r\n\r\n/**\r\n * This system will detect false entities and kill them to\r\n * reduce lag and eliminate broken/left players/entities\r\n */\r\nsystem.runSchedule(() => {\r\n  const validIds = Object.values(CHESTGUIS).map((c) => c.entity.id);\r\n  for (const entity of DIMENSIONS.overworld.getEntities({\r\n    type: ENTITY_INVENTORY,\r\n  })) {\r\n    if (validIds.includes(entity.id)) continue;\r\n    // This entity is not valid so we despawn it\r\n    entity.triggerEvent(\"despawn\");\r\n  }\r\n}, 100);\r\n", "/*\n|--------------------------------------------------------------------------\n| Gui item\n|--------------------------------------------------------------------------\n|\n| This is the GUI item that is used to open up the gui\n| this is set to the identifier of item.json and is used to find the item\n| in the gui template\n|\n*/\nexport const GUI_ITEM = \"rubedo:gui\";\n\n/*\n|--------------------------------------------------------------------------\n| Entity Inventory\n|--------------------------------------------------------------------------\n|\n| The id of the entity inventory\n| this is found in the entities file\n| this will be updated if inventory entity is changed\n|\n*/\nexport const ENTITY_INVENTORY = \"rubedo:inventory\";\n\n/*\n|--------------------------------------------------------------------------\n| Default Static Page id\n|--------------------------------------------------------------------------\n|\n| This is the default static page id of what is open by default\n| when you click on the gui, this can be changed but it probably shouldn't\n| because static pages will need to be changed\n|\n*/\nexport const DEFAULT_STATIC_PAGE_ID = \"home\";\n", "import { Entity, Player, system } from \"@minecraft/server\";\r\nimport { AIR } from \"../index\";\r\nimport { ENTITY_INVENTORY } from \"../../../config/chest\";\r\nimport {\r\n  ISlotChangeReturn,\r\n  onEntityInventorySlotChange,\r\n} from \"../../Events/onSlotChange\";\r\nimport {\r\n  CHESTGUIS,\r\n  clearPlayersPointer,\r\n  getItemAtSlot,\r\n  PAGES,\r\n} from \"../utils.js\";\r\nimport { ItemGrabbedCallback } from \"./ItemGrabbedCallback\";\r\nimport { ISlot, Page } from \"./Page.js\";\r\n\r\nexport class ChestGUI {\r\n  /**\r\n   * The connected player to this gui\r\n   */\r\n  player: Player;\r\n  /**\r\n   * The entity that this chest gui is associated to\r\n   */\r\n  entity: Entity;\r\n  /**\r\n   * The event that is registered on this gui\r\n   */\r\n  runScheduleId: number;\r\n\r\n  /**\r\n   * The page that this gui is currently viewing\r\n   */\r\n  page: Page;\r\n\r\n  /**\r\n   * The event that is used to test for changes in inventory\r\n   */\r\n  slotChangeEvent: number;\r\n\r\n  /**\r\n   * if the player has a chest open\r\n   */\r\n  hasChestOpen: boolean;\r\n\r\n  /**\r\n   * Spawns a entity to be attached to the player\r\n   * @param player player this entity will be attached to\r\n   */\r\n  static spawnEntity(player: Player): Entity {\r\n    try {\r\n      return player.dimension.spawnEntity(\r\n        ENTITY_INVENTORY,\r\n        player.headLocation\r\n      );\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Links a new chest gui to a player\r\n   * @param player player to link\r\n   */\r\n  constructor(player: Player) {\r\n    this.player = player;\r\n    this.entity = ChestGUI.spawnEntity(player);\r\n    if (this.entity) {\r\n      this.hasChestOpen = false;\r\n      this.setPage(\"home\");\r\n    }\r\n    this.runScheduleId = system.runSchedule(() => {\r\n      if (!this.entity) return this.despawn();\r\n      if (this.player.getComponent(\"mark_variant\").value == 1) {\r\n        if (!this.hasChestOpen) {\r\n          // Player has this inventory open run checks for changes\r\n          this.slotChangeEvent = onEntityInventorySlotChange.subscribe(\r\n            { type: ENTITY_INVENTORY },\r\n            (entity, change) => {\r\n              if (entity.id != this.entity.id) return;\r\n              this.onSlotChange(change);\r\n            }\r\n          );\r\n        }\r\n        this.hasChestOpen = true;\r\n      } else {\r\n        // Player does not have inventory open but item is held\r\n        try {\r\n          this.entity.teleport(\r\n            this.player.headLocation,\r\n            this.player.dimension,\r\n            this.player.rotation.x,\r\n            this.player.rotation.y,\r\n            true\r\n          );\r\n        } catch (error) {\r\n          this.despawn();\r\n        }\r\n      }\r\n    }, 5);\r\n  }\r\n\r\n  /**\r\n   * Sets this gui to a page of items\r\n   * @param pageId page to set this gui too\r\n   */\r\n  setPage(pageId: string, extras?: any) {\r\n    const c = this.entity.getComponent(\"inventory\").container;\r\n    for (let i = 0; i < c.size; i++) {\r\n      c.setItem(i, AIR);\r\n    }\r\n    if (!Object.keys(PAGES).includes(pageId))\r\n      throw new Error(`pageId ${pageId} does not exist!`);\r\n    const page = PAGES[pageId];\r\n    this.page = page;\r\n\r\n    page.fillType(this.entity, page, extras);\r\n    this.entity.nameTag = `size:54`;\r\n  }\r\n\r\n  /**\r\n   * This runs when a slot gets changed in the chest inventory\r\n   */\r\n  onSlotChange(change: ISlotChangeReturn) {\r\n    /**\r\n     * The guiItem that was changed\r\n     */\r\n    const slot: ISlot = this.page.slots[change.slot];\r\n\r\n    if (!slot) {\r\n      // item was added to page that is not a valid slot so set that slot back to air\r\n      this.entity.getComponent(\"inventory\").container.setItem(change.slot, AIR);\r\n    } else if (change.changeType == \"delete\") {\r\n      // item was taken from this page\r\n      if (slot.item) clearPlayersPointer(this.player, change.item);\r\n      /**\r\n       * if the slot has a item that returns when something is grabbed, this checks\r\n       * if there is a item put into the slot to return, if not it will not send a\r\n       * callback by returning before\r\n       */\r\n      if (!slot.item && !getItemAtSlot(this.entity, change.slot)) return;\r\n      slot.action(new ItemGrabbedCallback(this, slot, change));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes this gui and despawn its entity\r\n   */\r\n  despawn() {\r\n    try {\r\n      this.entity?.triggerEvent(\"despawn\");\r\n    } catch (error) {}\r\n    try {\r\n      delete CHESTGUIS[this.player.name];\r\n    } catch (error) {}\r\n    if (this.runScheduleId) system.clearRunSchedule(this.runScheduleId);\r\n    if (this.slotChangeEvent)\r\n      onEntityInventorySlotChange.unsubscribe(this.slotChangeEvent);\r\n  }\r\n}\r\n", "import {\r\n  Entity,\r\n  EntityQueryOptions,\r\n  ItemStack,\r\n  PlayerInventoryComponentContainer,\r\n  system,\r\n} from \"@minecraft/server\";\r\nimport { DIMENSIONS } from \"../../../utils.js\";\r\n\r\ntype onSlotChangeCallback = (entity: Entity, change: ISlotChangeReturn) => void;\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: onSlotChangeCallback;\r\n    entities: EntityQueryOptions;\r\n  };\r\n} = {};\r\n\r\nconst MAPPED_INVENTORIES: { [key: string]: Array<IMappedInventoryItem> } = {};\r\nexport const PREVIOUS_CHANGE: { [key: string]: ISlotChangeReturn } = {};\r\n\r\nexport interface ISlotChangeReturn {\r\n  /**\r\n   * Slot that changed\r\n   */\r\n  slot: number;\r\n  /**\r\n   * The uid of this item\r\n   */\r\n  uid: string;\r\n  /**\r\n   * The old uid of this item\r\n   */\r\n  oldUid?: string;\r\n  /**\r\n   * the item that was grabbed / put\r\n   */\r\n  item: ItemStack;\r\n  /**\r\n   * The old itemStack that was in this slot\r\n   */\r\n  oldItem?: ItemStack;\r\n  /**\r\n   * How the inventory has changed\r\n   */\r\n  changeType: \"delete\" | \"put\" | \"swap\" | \"fluctuation\" | \"move\";\r\n}\r\n\r\ninterface IMappedInventoryItem {\r\n  /**\r\n   * a unique id for a itemStack\r\n   */\r\n  uid: string;\r\n  /**\r\n   * the item\r\n   */\r\n  item: ItemStack;\r\n}\r\n\r\n/**\r\n * Finds and returns a slot change in a inventory\r\n */\r\nfunction getSlotChanges(\r\n  entity: Entity,\r\n  oldInv: Array<IMappedInventoryItem>,\r\n  newInv: Array<IMappedInventoryItem>\r\n): Array<ISlotChangeReturn> {\r\n  if (oldInv.length != newInv.length) return [];\r\n  const changes: Array<ISlotChangeReturn> = [];\r\n  for (let i = 0; i < newInv.length; i++) {\r\n    if (\r\n      oldInv[i]?.item?.amount < newInv[i]?.item?.amount ||\r\n      (oldInv[i]?.item?.amount > newInv[i]?.item?.amount &&\r\n        oldInv[i]?.item?.amount != 0)\r\n    ) {\r\n      // Checks if the item is the same but checks if the amount has changed\r\n      const change_data: ISlotChangeReturn = {\r\n        slot: i,\r\n        uid: newInv[i].uid,\r\n        oldUid: oldInv[i].uid,\r\n        item: newInv[i].item,\r\n        oldItem: oldInv[i].item,\r\n        changeType: \"fluctuation\",\r\n      };\r\n      changes.push(change_data);\r\n      PREVIOUS_CHANGE[entity.id] = change_data;\r\n      continue;\r\n    }\r\n    if (newInv[i].uid == oldInv[i].uid) continue; // no change\r\n    if (oldInv[i]?.item && newInv[i]?.item) {\r\n      // Checks if there was a new item but a new slot was not taken up\r\n      // Meaning that the item got used like using a bucket on a cow\r\n      const change_data: ISlotChangeReturn = {\r\n        slot: i,\r\n        uid: newInv[i].uid,\r\n        oldUid: oldInv[i].uid,\r\n        item: newInv[i].item,\r\n        oldItem: oldInv[i].item,\r\n        changeType: \"swap\",\r\n      };\r\n      changes.push(change_data);\r\n      PREVIOUS_CHANGE[entity.id] = change_data;\r\n    } else if (!newInv[i]?.item) {\r\n      // There is no more item in this slot\r\n      // Meaning the item has been moved across slots or been thrown out\r\n      const change_data: ISlotChangeReturn = {\r\n        slot: i,\r\n        uid: oldInv[i].uid,\r\n        item: oldInv[i].item,\r\n        changeType: \"delete\",\r\n      };\r\n      changes.push(change_data);\r\n      PREVIOUS_CHANGE[entity.id] = change_data;\r\n    } else if (newInv[i]?.item) {\r\n      // New item has been added in this slot\r\n      if (\r\n        PREVIOUS_CHANGE[entity.id]?.changeType == \"delete\" &&\r\n        PREVIOUS_CHANGE[entity.id]?.uid == newInv[i].uid\r\n      ) {\r\n        // item has been moved across slots\r\n        const change_data: ISlotChangeReturn = {\r\n          slot: i,\r\n          uid: newInv[i].uid,\r\n          item: newInv[i].item,\r\n          changeType: \"move\",\r\n        };\r\n        changes.push(change_data);\r\n        PREVIOUS_CHANGE[entity.id] = change_data;\r\n        continue;\r\n      } else {\r\n        const change_data: ISlotChangeReturn = {\r\n          slot: i,\r\n          uid: newInv[i].uid,\r\n          item: newInv[i].item,\r\n          changeType: \"put\",\r\n        };\r\n        changes.push(change_data);\r\n        PREVIOUS_CHANGE[entity.id] = change_data;\r\n      }\r\n    }\r\n  }\r\n  return changes;\r\n}\r\n\r\n/**\r\n * Converts a itemStack to a unique id\r\n * @param {ItemStack} item\r\n * @returns {string}\r\n */\r\nexport function getItemUid(item: ItemStack): string {\r\n  if (!item) return \"\";\r\n  const data = [];\r\n  data.push(item.typeId);\r\n  data.push(item.nameTag);\r\n  data.push(item.data);\r\n  data.push(item.getLore().join(\"\"));\r\n  return data.join(\"\");\r\n}\r\n\r\n/**\r\n * Gets an entity's inventory but with mapped data\r\n */\r\nfunction mapInventory(\r\n  container: PlayerInventoryComponentContainer\r\n): Array<IMappedInventoryItem> {\r\n  const inventory = [];\r\n\r\n  for (let i = 0; i < container.size; i++) {\r\n    let item = container.getItem(i);\r\n    inventory[i] = {\r\n      uid: getItemUid(item),\r\n      item: item,\r\n    };\r\n  }\r\n  return inventory;\r\n}\r\n\r\nsystem.runSchedule(() => {\r\n  for (const callback of Object.values(CALLBACKS)) {\r\n    for (const entity of DIMENSIONS.overworld.getEntities(callback.entities)) {\r\n      const inventory = mapInventory(\r\n        entity.getComponent(\"inventory\").container\r\n      );\r\n      const changes = getSlotChanges(\r\n        entity,\r\n        MAPPED_INVENTORIES[entity.id] ?? inventory,\r\n        inventory\r\n      );\r\n      MAPPED_INVENTORIES[entity.id] = inventory;\r\n      if (changes.length == 0) continue;\r\n      if (entity.hasTag(\"skipCheck\")) {\r\n        entity.removeTag(\"skipCheck\");\r\n        delete PREVIOUS_CHANGE[entity.id];\r\n        continue;\r\n      }\r\n      for (const change of changes) {\r\n        callback.callback(entity, change);\r\n      }\r\n    }\r\n  }\r\n}, 5);\r\n\r\nexport class onEntityInventorySlotChange {\r\n  /**\r\n   * Subscribes to a callback to get notified when a entities inventory changes\r\n   * @param callback what to be called when one of these entities inventory's changes\r\n   * @param entities the entity's to grab from\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(\r\n    entities: EntityQueryOptions,\r\n    callback: onSlotChangeCallback\r\n  ): number {\r\n    const key = Date.now();\r\n    CALLBACKS[key] = { callback: callback, entities: entities };\r\n    return key;\r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n", "import { Entity, ItemStack, Location, Player } from \"@minecraft/server\";\r\nimport type { ChestGUI } from \"./Models/EntityChest\";\r\nimport type { Page } from \"./Models/Page\";\r\n\r\n/**\r\n * This will link a players name to a chest gui instance\r\n */\r\nexport const CHESTGUIS: { [key: string]: ChestGUI } = {};\r\n\r\n/**\r\n * This will link a players name to a chest gui instance\r\n */\r\nexport const PAGES: { [key: string]: Page } = {};\r\n\r\n/**\r\n * Gets a players held item\r\n */\r\nexport function getHeldItem(player: Player): ItemStack {\r\n  const inventory = player.getComponent(\"minecraft:inventory\").container;\r\n  return inventory.getItem(player.selectedSlot);\r\n}\r\n\r\n/**\r\n * Clears the player of a item in there pointer slot\r\n */\r\nexport async function clearPlayersPointer(\r\n  player: Player,\r\n  ItemToClear: ItemStack\r\n) {\r\n  try {\r\n    const inventory = player.getComponent(\"minecraft:inventory\").container;\r\n    let itemsToLoad = [];\r\n    for (let i = 0; i < inventory.size; i++) {\r\n      const item = inventory.getItem(i);\r\n      if (!item) continue;\r\n      if (item?.typeId == ItemToClear?.typeId) {\r\n        itemsToLoad.push({ slot: i, item: item });\r\n        inventory.setItem;\r\n        if (i < 9) {\r\n          player.runCommandAsync(`replaceitem entity @s slot.hotbar ${i} air`);\r\n        } else {\r\n          player.runCommandAsync(\r\n            `replaceitem entity @s slot.inventory ${i - 9} air`\r\n          );\r\n        }\r\n      }\r\n    }\r\n    await player.runCommandAsync(\r\n      `clear @s ${ItemToClear?.typeId} ${ItemToClear.data} ${ItemToClear.amount}`\r\n    );\r\n    for (const item of itemsToLoad) {\r\n      inventory.setItem(item.slot, item.item);\r\n    }\r\n  } catch (error) {\r\n    // the item couldn't be cleared that means\r\n    // they now have a item witch is really BAD\r\n    [\r\n      ...player.dimension.getEntities({\r\n        type: \"minecraft:item\",\r\n        location: new Location(\r\n          player.location.x,\r\n          player.location.y,\r\n          player.location.z\r\n        ),\r\n        maxDistance: 2,\r\n        closest: 1,\r\n      }),\r\n    ].forEach((e) => e.kill());\r\n  }\r\n}\r\n\r\n/**\r\n * Gets an item at slot\r\n */\r\nexport function getItemAtSlot(entity: Entity, slot: number): ItemStack | null {\r\n  const inventory = entity.getComponent(\"minecraft:inventory\").container;\r\n  return inventory.getItem(slot);\r\n}\r\n", "import {\n  ActionFormData,\n  MessageFormData,\n  ModalFormData,\n  ActionFormResponse,\n  ModalFormResponse,\n  MessageFormResponse,\n} from \"@minecraft/server-ui\";\nimport { ChestGUI } from \"./EntityChest\";\nimport { ItemStack } from \"@minecraft/server\";\nimport type { ISlot } from \"./Page\";\nimport type { ISlotChangeReturn } from \"../../Events/onSlotChange\";\nimport { sleep } from \"../../../../utils\";\nimport { ItemDatabase } from \"../../../database/types/Item\";\n\ntype FormActionReturn<T> = T extends ActionFormData\n  ? Promise<ActionFormResponse>\n  : T extends ModalFormData\n  ? Promise<ModalFormResponse>\n  : Promise<MessageFormResponse>;\n\nexport class ItemGrabbedCallback {\n  gui: ChestGUI;\n  slot: ISlot;\n  change: ISlotChangeReturn;\n  /**\n   * New Callback\n   */\n  constructor(gui: ChestGUI, slot: ISlot, change: ISlotChangeReturn) {\n    this.gui = gui;\n    this.slot = slot;\n    this.change = change;\n  }\n\n  /**\n   * Messages to the owner of this gui\n   * @example ctx.reply('Hello World!');\n   */\n  message(text: string) {\n    this.gui.player.tell(text);\n  }\n\n  /**\n   * Gets the item added\n   */\n  getItemAdded(): ItemStack | null {\n    if (this.slot.item) return null;\n    return this.gui.entity\n      .getComponent(\"minecraft:inventory\")\n      .container.getItem(this.change.slot);\n  }\n\n  /**\n   * Gives the player the item the grabbed\n   */\n  GiveAction(item: ItemStack = this.slot.item.itemStack) {\n    this.gui.player.getComponent(\"minecraft:inventory\").container.addItem(item);\n  }\n\n  /**\n   * Gives the player the item that was grabbed also removes this item from the gui + db\n   * @param db the item database to remove this item from\n   */\n  TakeAction(db: ItemDatabase = null) {\n    this.gui.player\n      .getComponent(\"minecraft:inventory\")\n      .container.addItem(this.slot.item.itemStack);\n    this.gui.page.slots[this.change.slot] = null;\n    if (!db) return;\n    db.delete(this.slot.item.components.dbKey);\n  }\n\n  /**\n   * Changes the page of the chestGui when this item is grabbed\n   * @param page page to send to\n   * @param extras stuff to be passed onto the page\n   */\n  PageAction(page: string, extras?: any) {\n    this.gui.setPage(page, extras);\n  }\n\n  /**\n   * Closes the chest GUI when this item is grabbed\n   */\n  CloseAction() {\n    this.gui.despawn();\n  }\n\n  /**\n   * Sets the item back\n   */\n  SetAction() {\n    const container = this.gui.entity.getComponent(\n      \"minecraft:inventory\"\n    ).container;\n    container.setItem(this.change.slot, this.slot.item.itemStack);\n  }\n\n  /**\n   * Opens a form to the player\n   * @param {ActionFormData | ModalFormData | MessageFormData} form form to load\n   * @returns {Promise<ActionFormResponse | ModalFormResponse | MessageFormResponse>}\n   */\n  async FormAction<T extends ActionFormData | ModalFormData | MessageFormData>(\n    form: T\n  ): Promise<FormActionReturn<T>> {\n    this.CloseAction();\n    await sleep(5);\n    // @ts-ignore\n    return await form.show(this.gui.player);\n  }\n}\n", "import {\r\n  Enchantment,\r\n  EnchantmentList,\r\n  ItemStack,\r\n  ItemType,\r\n} from \"@minecraft/server\";\r\n\r\ninterface IPageItemComponents {\r\n  /**\r\n   * Number of the items in the stack. Valid values range between 0 and 64.\r\n   */\r\n  amount?: number;\r\n  /**\r\n   * A data value used to configure alternate states of the item.\r\n   */\r\n  data?: number;\r\n  /**\r\n   * Given name of this stack of items.\r\n   */\r\n  nameTag?: string;\r\n  /**\r\n   * a secondary display string - for an ItemStack.\r\n   */\r\n  loreList?: string[];\r\n  /**\r\n   * a collection of the enchantments on this item\r\n   */\r\n  enchantments?: Enchantment[];\r\n  /**\r\n   * A key that could be on this item, meaning its connect to database\r\n   */\r\n  dbKey?: string;\r\n}\r\n\r\nexport class PageItem {\r\n  /**\r\n   * The item type this item has\r\n   */\r\n  itemType: ItemType;\r\n  /**\r\n   * The components that this item\r\n   * this stores information such as data, enchantments etc\r\n   */\r\n  components: IPageItemComponents;\r\n\r\n  /**\r\n   * The itemStack that was set at item creation\r\n   */\r\n  setItemStack: ItemStack | null;\r\n\r\n  constructor(\r\n    itemType: ItemType,\r\n    components: IPageItemComponents = {},\r\n    itemStack?: ItemStack\r\n  ) {\r\n    this.itemType = itemType;\r\n    this.components = components;\r\n    this.setItemStack = itemStack;\r\n  }\r\n  /**\r\n   * gets itemStack that this PageItem is associated with\r\n   */\r\n  get itemStack(): ItemStack {\r\n    if (this.setItemStack) return this.setItemStack;\r\n    const itemStack = new ItemStack(this.itemType);\r\n    if (this.components) {\r\n      itemStack.amount = this.components?.amount ?? 1;\r\n      itemStack.data = this.components?.data ?? 0;\r\n      itemStack.nameTag = this.components?.nameTag;\r\n      itemStack.setLore(this.components?.loreList ?? []);\r\n      const enchantments: EnchantmentList =\r\n        itemStack.getComponent(\"enchantments\").enchantments;\r\n      for (const enchantment of this.components?.enchantments ?? []) {\r\n        enchantments.addEnchantment(enchantment);\r\n      }\r\n      itemStack.getComponent(\"enchantments\").enchantments = enchantments;\r\n    }\r\n    return itemStack;\r\n  }\r\n}\r\n", "import { Entity } from \"@minecraft/server\";\nimport { AIR } from \"../index\";\nimport { Page } from \"./Page.js\";\n\nexport type FillTypeCallback = (\n  entity: Entity,\n  page: Page,\n  extras: any\n) => void;\n\n/**\n * Fills a entity with desired items\n */\nexport function DefaultFill(entity: Entity, page: Page, extras: any) {\n  const container = entity.getComponent(\"minecraft:inventory\").container;\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n}\n", "import { PAGES } from \"../utils.js\";\r\nimport { DefaultFill, FillTypeCallback } from \"./FillTypes\";\r\nimport { ItemGrabbedCallback } from \"./ItemGrabbedCallback.js\";\r\nimport type { PageItem } from \"./PageItem\";\r\n\r\nexport interface ISlot {\r\n  /**\r\n   * The item that should be in this slot\r\n   */\r\n  item: PageItem;\r\n  /**\r\n   * What happens when there is a change in this slot\r\n   */\r\n  action: (ctx: ItemGrabbedCallback) => void;\r\n}\r\n\r\nexport class Page {\r\n  /**\r\n   * The id this page has\r\n   */\r\n  id: string;\r\n  /**\r\n   * How this page fills, these can be custom or kept default\r\n   */\r\n  fillType: FillTypeCallback;\r\n\r\n  /**\r\n   * The slots in this gui\r\n   */\r\n  slots: ISlot[];\r\n\r\n  constructor(id: string, fillType: FillTypeCallback = DefaultFill) {\r\n    if (Object.keys(PAGES).includes(id))\r\n      throw new Error(`Page: ${id}, Already exists!`);\r\n    this.id = id;\r\n    this.fillType = fillType;\r\n    this.slots = [];\r\n    PAGES[id] = this;\r\n  }\r\n\r\n  /**\r\n   * Sets slots in this page\r\n   */\r\n  setSlots(\r\n    slot: Array<number>,\r\n    item: PageItem,\r\n    action: (ctx: ItemGrabbedCallback) => void\r\n  ): Page {\r\n    const data = item ? { item: item, action: action } : null;\r\n    for (const i of slot) {\r\n      this.slots[i] = data;\r\n    }\r\n    return this;\r\n  }\r\n}\r\n", "import { PageItem } from \"../Models/PageItem.js\";\r\nimport { Page } from \"../Models/Page.js\";\r\nimport { MinecraftItemTypes } from \"@minecraft/server\";\r\n\r\n/**\r\n * The Home page of this GUI this is the most important because\r\n * when the GUI is opened it will open up here, any plugin can\r\n * change this but this is the default screen\r\n */\r\nexport let HOME_PAGE = new Page(\"home\")\r\n  .setSlots(\r\n    [22],\r\n    new PageItem(MinecraftItemTypes.enderChest, {\r\n      nameTag: \"\u00A7l\u00A7bInventory Viewer\",\r\n    }),\r\n    (ctx) => {\r\n      ctx.PageAction(\"moderation:see\");\r\n    }\r\n  )\r\n  .setSlots(\r\n    [54],\r\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\r\n    (ctx) => {\r\n      ctx.CloseAction();\r\n    }\r\n  );\r\n", "import {\n  world,\n  Player,\n  BlockLocation,\n  MinecraftBlockTypes,\n  Enchantment,\n  GameMode,\n} from \"@minecraft/server\";\nimport type { ConfigType, ROLES } from \"./types\";\nimport { Region } from \"./modules/models/Region.js\";\nimport { ChangePlayerRoleTask } from \"./modules/models/Task\";\nimport { APPEAL_LINK, BANNED_BLOCKS, BANNED_ITEMS } from \"./config/moderation\";\nimport { ENCHANTMENTS } from \"./config/enchantments\";\nimport { DIMENSIONS } from \"../../utils.js\";\nimport { TABLES } from \"./tables.js\";\n\n/**\n * Kicks a player\n * @param player player who should be kicked\n * @param message the message that should be show to player\n * @param onFail this needs to be used for loops to unregister\n */\nexport function kick(\n  player: Player,\n  message: Array<String> = [],\n  onFail?: () => void\n): void {\n  if (isServerOwner(player)) {\n    console.warn(`[WARNING]: TRIED TO KICK OWNER`);\n    player.tell(`You have been tried to kick, but you cant!`);\n    return onFail?.();\n  }\n  try {\n    player.runCommandAsync(`kick @s \u00A7r${message.join(\"\\n\")}`);\n    player.triggerEvent(\"kick\");\n  } catch (error) {\n    player.triggerEvent(\"kick\");\n    if (!/\"statusCode\":-2147352576/.test(error)) return;\n    // This function just tried to kick the owner\n    if (onFail) onFail();\n  }\n}\n\n/**\n * Gets the role of this player\n * @param player player to get role from\n * @example getRole(\"Smell of curry\")\n */\nexport function getRole(player: Player | string): keyof typeof ROLES {\n  if (player instanceof Player) {\n    return TABLES.roles.get(player.name) ?? \"member\";\n  } else {\n    return TABLES.roles.get(player) ?? \"member\";\n  }\n}\n\n/**\n * Sets the role of this player\n * @example setRole(\"Smell of curry\", \"admin\")\n */\nexport function setRole(\n  player: Player | string,\n  value: keyof typeof ROLES\n): void {\n  if (typeof player == \"string\") {\n    // we need to create a task that will update the role for\n    // that player when they join\n    // also we need to set there db_role back\n    TABLES.roles.set(player, value);\n    /**\n     * If the player is in the game just set it now\n     * if they are not in the game we will need to create a task\n     * to set there role when they join\n     */\n    const inGamePlayer = [...world.getPlayers()].find((p) => p.name == player);\n    if (inGamePlayer) {\n      inGamePlayer.setDynamicProperty(\"role\", value);\n    } else {\n      new ChangePlayerRoleTask(player, value);\n    }\n  } else {\n    // just change both of them no need for task\n    TABLES.roles.set(player.name, value);\n    player.setDynamicProperty(\"role\", value);\n  }\n}\n\n/**\n * Checks if a player is the owner of this world that was set using `/function`\n * @param player player to test\n * @returns if player is owner\n */\nexport function isServerOwner(player: Player): boolean {\n  return world.getDynamicProperty(\"worldsOwner\") == player.id;\n}\n\n/**\n * Gets the server owner\n * @returns server owners id\n */\nexport function getServerOwner(): string | null {\n  const id = world.getDynamicProperty(\"worldsOwner\") as string;\n  if (!id || id == \"\") return null;\n  return id;\n}\n\n/**\n * Gets the server owners name\n * @returns server owners name\n */\nexport function getServerOwnerName(): string | null {\n  const ownerId = getServerOwner();\n  if (!ownerId) return null;\n  const ids = TABLES.ids.collection();\n  return Object.keys(ids).find((key) => ids[key] === ownerId);\n}\n\n/**\n * Sets the server owner\n * @param player player to set the server owner too\n */\nexport function setServerOwner(player: Player) {\n  if (!player) return world.setDynamicProperty(\"worldsOwner\", \"\");\n  world.setDynamicProperty(\"worldsOwner\", player.id.toString());\n}\n\n/**\n * Checks if the server is locked down\n */\nexport function isLockedDown(): boolean {\n  return (world.getDynamicProperty(\"isLockDown\") ?? false) as boolean;\n}\n\n/**\n * Sets the server's lock down status\n * @param val if the server is locked down or not\n */\nexport function setLockDown(val: boolean) {\n  world.setDynamicProperty(\"isLockDown\", val);\n}\n\n/**\n * Sets Deny blocks at bottom of region every 5 mins\n */\nexport function loadRegionDenys() {\n  for (const region of Region.getAllRegions()) {\n    const loc1 = new BlockLocation(\n      region.from.x,\n      region.dimensionId == \"minecraft:overworld\" ? -64 : 0,\n      region.from.z\n    );\n    const loc2 = new BlockLocation(\n      region.to.x,\n      region.dimensionId == \"minecraft:overworld\" ? -64 : 0,\n      region.to.z\n    );\n    for (const blockLocation of loc1.blocksBetween(loc2)) {\n      DIMENSIONS[region.dimensionId as keyof typeof DIMENSIONS]\n        .getBlock(blockLocation)\n        ?.setType(MinecraftBlockTypes.deny);\n    }\n  }\n}\n\n/**\n * Grabs config data from the database\n * @param id id to grab\n */\nexport function getConfigId<T extends keyof ConfigType>(id: T): ConfigType[T] {\n  switch (id) {\n    case \"banned_items\":\n      return TABLES.config.get(\"banned_items\") ?? BANNED_ITEMS;\n    case \"banned_blocks\":\n      return TABLES.config.get(\"banned_blocks\") ?? BANNED_BLOCKS;\n    case \"enchantments\":\n      return TABLES.config.get(\"enchantments\") ?? ENCHANTMENTS;\n    case \"appealLink\":\n      return TABLES.config.get(\"appealLink\") ?? APPEAL_LINK;\n  }\n}\n\n/**\n * Sets a config id\n * @param key key to set\n * @param value value to set key to\n */\nexport function setConfigId<T extends keyof ConfigType>(\n  key: T,\n  value: ConfigType[T]\n) {\n  TABLES.config.set(key, value);\n}\n\n/**\n * Gets the max level of a enchantment\n * @param enchantment enchantment to get\n * @returns max level\n * @example ```\n * getMaxLevel(MinecraftEnchantmentTypes.sharpness): 5\n * ```\n */\nexport function getMaxEnchantmentLevel(enchantment: Enchantment): number {\n  const MAX_ENCHANTMENTS = getConfigId(\"enchantments\");\n  return (\n    MAX_ENCHANTMENTS[enchantment.type.id as keyof typeof ENCHANTMENTS] ??\n    enchantment.type.maxLevel\n  );\n}\n\n/**\n * Gets the Gamemode of a player\n * @param {Player} player player to get\n * @returns {keyof typeof GameMode}\n * @example if (getGamemode(player) == \"creative\") return;\n */\nexport function getGamemode(player: Player): keyof typeof GameMode {\n  return Object.values(GameMode).find(\n    (g) => [...world.getPlayers({ name: player.name, gameMode: g })].length\n  );\n}\n", "import { BlockLocation, Entity, MinecraftBlockTypes } from \"@minecraft/server\";\nimport { DEFAULT_REGION_PERMISSIONS } from \"../../config/region\";\nimport { TABLES } from \"../../tables.js\";\nimport type { IRegionCords, IRegionPermissions } from \"../../types\";\nimport { loadRegionDenys } from \"../../utils.js\";\nimport { betweenVector3, DIMENSIONS } from \"../../../../utils\";\n\n/**\n * Holds all regions in memory so its not grabbing them so much\n */\nexport let REGIONS: Array<Region> = [];\n\n/**\n * If the regions have been grabbed if not it will grab them and set this to true\n */\nlet REGIONS_HAVE_BEEN_GRABBED: boolean = false;\n\n/**\n * The Lowest Y value in minecraft\n */\nconst LOWEST_Y_VALUE: number = -64;\n\n/**\n * The HIGHEST Y value in minecraft\n */\nconst HIGHEST_Y_VALUE: number = 320;\n\nexport class Region {\n  dimensionId: string;\n  from: IRegionCords;\n  to: IRegionCords;\n  key: string;\n  permissions: IRegionPermissions;\n\n  /**\n   * Gets all regions\n   */\n  static async getAllRegionsSync(): Promise<Array<Region>> {\n    if (REGIONS_HAVE_BEEN_GRABBED) return REGIONS;\n    const regions = (await TABLES.regions.valuesSync()).map(\n      (region) =>\n        new Region(\n          region.from,\n          region.to,\n          region.dimensionId,\n          region.permissions,\n          region.key\n        )\n    );\n    regions.forEach((r) => {\n      REGIONS.push(r);\n    });\n    REGIONS_HAVE_BEEN_GRABBED = true;\n    return regions;\n  }\n\n  static getAllRegions(): Array<Region> {\n    if (REGIONS_HAVE_BEEN_GRABBED) return REGIONS;\n    const regions = TABLES.regions\n      .values()\n      .map(\n        (region) =>\n          new Region(\n            region.from,\n            region.to,\n            region.dimensionId,\n            region.permissions,\n            region.key\n          )\n      );\n    regions.forEach((r) => {\n      REGIONS.push(r);\n    });\n    REGIONS_HAVE_BEEN_GRABBED = true;\n    return regions;\n  }\n\n  /**\n   * Checks if a block location is in region\n   */\n  static blockLocationInRegion(\n    blockLocation: BlockLocation,\n    dimensionId: string\n  ): Region | undefined {\n    return this.getAllRegions().find(\n      (region) =>\n        region.dimensionId == dimensionId &&\n        betweenVector3(\n          blockLocation,\n          { x: region.from.x, y: LOWEST_Y_VALUE, z: region.from.z },\n          { x: region.to.x, y: HIGHEST_Y_VALUE, z: region.to.z }\n        )\n    );\n  }\n\n  /**\n   * Checks if a block location is in region\n   */\n  static async blockLocationInRegionSync(\n    blockLocation: BlockLocation,\n    dimensionId: string\n  ): Promise<Region | undefined> {\n    return (await this.getAllRegionsSync()).find(\n      (region) =>\n        region.dimensionId == dimensionId &&\n        betweenVector3(\n          blockLocation,\n          { x: region.from.x, y: LOWEST_Y_VALUE, z: region.from.z },\n          { x: region.to.x, y: HIGHEST_Y_VALUE, z: region.to.z }\n        )\n    );\n  }\n\n  /**\n   * Removes a region at a block Location\n   * @param dimensionId the id of this dimension\n   * @returns if the region was removed or not\n   */\n  static async removeRegionAtBlockLocation(\n    blockLocation: BlockLocation,\n    dimensionId: string\n  ): Promise<boolean> {\n    const region = this.blockLocationInRegion(blockLocation, dimensionId);\n    if (!region) return false;\n    return TABLES.regions.delete(region.key);\n  }\n  /**\n   * Creates a new Region to store in db\n   */\n  constructor(\n    from: IRegionCords,\n    to: IRegionCords,\n    dimensionId: string,\n    permissions?: IRegionPermissions,\n    key?: string\n  ) {\n    this.from = from;\n    this.to = to;\n    this.dimensionId = dimensionId;\n    this.permissions = permissions ?? DEFAULT_REGION_PERMISSIONS;\n    this.key = key ? key : Date.now().toString();\n\n    if (!key) {\n      this.update().then(() => {\n        loadRegionDenys();\n        REGIONS.push(this);\n      });\n    }\n  }\n\n  /**\n   * Updates this region in the database\n   */\n  async update(): Promise<void> {\n    return TABLES.regions.set(this.key, {\n      key: this.key,\n      from: this.from,\n      dimensionId: this.dimensionId,\n      permissions: this.permissions,\n      to: this.to,\n    });\n  }\n\n  /**\n   * removes this region\n   * @returns if the region was removed successfully\n   */\n  async delete(): Promise<boolean> {\n    const region = TABLES.regions.get(this.key);\n    const loc1 = new BlockLocation(\n      region.from.x,\n      region.dimensionId == \"minecraft:overworld\" ? -64 : 0,\n      region.from.z\n    );\n    const loc2 = new BlockLocation(\n      region.to.x,\n      region.dimensionId == \"minecraft:overworld\" ? -64 : 0,\n      region.to.z\n    );\n    for (const blockLocation of loc1.blocksBetween(loc2)) {\n      DIMENSIONS[region.dimensionId as keyof typeof DIMENSIONS]\n        .getBlock(blockLocation)\n        ?.setType(MinecraftBlockTypes.bedrock);\n    }\n    REGIONS = REGIONS.filter((r) => r.key != this.key);\n    return TABLES.regions.delete(this.key);\n  }\n\n  /**\n   * Checks if a player is in this region\n   * @returns if a entity is in this region or not\n   */\n  entityInRegion(entity: Entity): Boolean {\n    return (\n      this.dimensionId == entity.dimension.id &&\n      betweenVector3(\n        entity.location,\n        { x: this.from.x, y: LOWEST_Y_VALUE, z: this.from.z },\n        { x: this.to.x, y: HIGHEST_Y_VALUE, z: this.to.z }\n      )\n    );\n  }\n\n  /**\n   * Changes a permission to on or off\n   */\n  changePermission<T extends keyof IRegionPermissions>(\n    key: T,\n    value: IRegionPermissions[T]\n  ): void {\n    this.permissions[key] = value;\n    this.update();\n  }\n}\n", "/**\n * The default permissions for all regions made\n */\nexport const DEFAULT_REGION_PERMISSIONS = {\n  /**\n   * If players in this region can use doors, trapdoors, and switches like buttons and levers\n   */\n  doorsAndSwitches: true,\n  /**\n   * If players in this region can open containers, this is like chests, furnaces, hoppers, etc\n   */\n  openContainers: true,\n  /**\n   * If the players in this region can fight each other\n   */\n  pvp: false,\n  /**\n   * the entities allowed in this region\n   */\n  allowedEntities: [\n    \"minecraft:player\",\n    \"minecraft:npc\",\n    \"minecraft:item\",\n    \"rubedo:inventory\",\n    \"rubedo:database\",\n  ],\n};\n\n/**\n * All doors and switches in minecraft\n */\nexport const DOORS_SWITCHES = [\n  \"minecraft:acacia_door\",\n  \"minecraft:acacia_trapdoor\",\n  \"minecraft:acacia_button\",\n  \"minecraft:birch_door\",\n  \"minecraft:birch_trapdoor\",\n  \"minecraft:birch_button\",\n  \"minecraft:crimson_door\",\n  \"minecraft:crimson_trapdoor\",\n  \"minecraft:crimson_button\",\n  \"minecraft:dark_oak_door\",\n  \"minecraft:dark_oak_trapdoor\",\n  \"minecraft:dark_oak_button\",\n  \"minecraft:jungle_door\",\n  \"minecraft:jungle_trapdoor\",\n  \"minecraft:jungle_button\",\n  \"minecraft:mangrove_door\",\n  \"minecraft:mangrove_trapdoor\",\n  \"minecraft:mangrove_button\",\n  \"minecraft:spruce_door\",\n  \"minecraft:spruce_trapdoor\",\n  \"minecraft:spruce_button\",\n  \"minecraft:warped_door\",\n  \"minecraft:warped_trapdoor\",\n  \"minecraft:warped_button\",\n  \"minecraft:wooden_door\",\n  \"minecraft:wooden_button\",\n  \"minecraft:trapdoor\",\n  \"minecraft:iron_door\",\n  \"minecraft:iron_trapdoor\",\n  \"minecraft:polished_blackstone_button\",\n  \"minecraft:lever\",\n];\n\n/**\n * A List of all containers a item could be in\n */\nexport const BLOCK_CONTAINERS = [\n  \"minecraft:chest\",\n  \"minecraft:ender_chest\",\n  \"minecraft:barrel\",\n  \"minecraft:trapped_chest\",\n  \"minecraft:dispenser\",\n  \"minecraft:dropper\",\n  \"minecraft:furnace\",\n  \"minecraft:blast_furnace\",\n  \"minecraft:lit_furnace\",\n  \"minecraft:lit_blast_furnace\",\n  \"minecraft:hopper\",\n  \"minecraft:shulker_box\",\n  \"minecraft:undyed_shulker_box\",\n  \"minecraft:lit_smoker\",\n  \"minecraft:smoker\",\n];\n", "import { Database } from \"../../rubedo/database/Database\";\r\nimport {\r\n  IBanData,\r\n  IFreezeData,\r\n  IMuteData,\r\n  INpcLocation,\r\n  IProtectionsConfig,\r\n  IRegionDB,\r\n  LogData,\r\n  ROLES,\r\n} from \"./types\";\r\n\r\nexport const TABLES = {\r\n  config: new Database<string, any>(\"config\"),\r\n  freezes: new Database<string, IFreezeData>(\"freezes\"),\r\n  mutes: new Database<string, IMuteData>(\"mutes\"),\r\n  bans: new Database<string, IBanData>(\"bans\"),\r\n  regions: new Database<string, IRegionDB>(\"regions\"),\r\n  roles: new Database<string, keyof typeof ROLES>(\"roles\"),\r\n  tasks: new Database<string, any>(\"tasks\"),\r\n  npcs: new Database<string, INpcLocation>(\"npcs\"),\r\n  ids: new Database<string, string>(\"ids\"),\r\n  logs: new Database<string, LogData>(\"logs\"),\r\n  protections: new Database<string, IProtectionsConfig>(\"protections\"),\r\n};\r\n", "import { TABLES } from \"../../tables.js\";\r\nimport type { IChangePlayerRoleData } from \"../../../../types\";\r\nimport type { ROLES } from \"../../types.js\";\r\n\r\nexport class ChangePlayerRoleTask {\r\n  /**\r\n   * The name of the player\r\n   */\r\n  playerName: string;\r\n  /**\r\n   * The role that the player should be set to\r\n   */\r\n  role: keyof typeof ROLES;\r\n\r\n  /**\r\n   *  gets all tasks that are present\r\n   * @returns all tasks\r\n   */\r\n  static getTasks(): Array<IChangePlayerRoleData> {\r\n    return TABLES.tasks.get(\"changePlayerRole\") ?? [];\r\n  }\r\n\r\n  /**\r\n   * Gets the role this player needs to be set to\r\n   * @param playerName name\r\n   */\r\n  static getPlayersRoleToSet(playerName: string): keyof typeof ROLES | null {\r\n    const tasks = ChangePlayerRoleTask.getTasks();\r\n    return tasks.find((t) => t.playerName == playerName)?.role;\r\n  }\r\n\r\n  constructor(playerName: string, role: keyof typeof ROLES) {\r\n    let tasks = ChangePlayerRoleTask.getTasks();\r\n    tasks.push({ playerName: playerName, role: role });\r\n    TABLES.tasks.set(\"changePlayerRole\", tasks);\r\n  }\r\n}\r\n", "import { MinecraftBlockTypes, MinecraftItemTypes } from \"@minecraft/server\";\n\n/*\n|--------------------------------------------------------------------------\n| Appeal Link\n|--------------------------------------------------------------------------\n|\n| This is the appeal link that gets showed when someone gets banned\n| this link pops up at the bottom of the ban message to show\n| where they can appeal there ban.\n|\n*/\nexport const APPEAL_LINK = \"https://discord.gg/dMa3A5UYKX\";\n\n/**\n * Items that simply get removed from inventory but will not ban\n */\nexport const FORBIDDEN_ITEMS = [\n  // Common CBE Items\n  MinecraftItemTypes.beehive.id,\n  MinecraftItemTypes.beeNest.id,\n  MinecraftItemTypes.axolotlBucket.id,\n  MinecraftItemTypes.codBucket.id,\n  MinecraftItemTypes.tadpoleBucket.id,\n  MinecraftItemTypes.tropicalFishBucket.id,\n  MinecraftItemTypes.salmonBucket.id,\n  MinecraftItemTypes.pufferfishBucket.id,\n];\n\n/**\n * List of items that if you hold you will be automatically banned\n */\nexport const BANNED_ITEMS = [\n  // Op Only Items\n  MinecraftItemTypes.allow.id,\n  MinecraftItemTypes.barrier.id,\n  MinecraftItemTypes.borderBlock.id,\n  MinecraftItemTypes.debugStick?.id ?? \"minecraft:debug_stick\",\n  MinecraftItemTypes.deny.id,\n  MinecraftItemTypes.jigsaw.id,\n  MinecraftItemTypes.lightBlock.id,\n  MinecraftItemTypes.commandBlock.id,\n  MinecraftItemTypes.repeatingCommandBlock.id,\n  MinecraftItemTypes.chainCommandBlock.id,\n  MinecraftItemTypes.commandBlockMinecart.id,\n  MinecraftItemTypes.structureBlock.id,\n  MinecraftItemTypes.structureVoid.id,\n\n  // Not Normal Items\n  MinecraftItemTypes.bedrock.id,\n  MinecraftItemTypes.endPortalFrame.id,\n\n  // Server Movement Blocks\n  \"minecraft:info_update\",\n  \"minecraft:info_update2\",\n  \"minecraft:reserved3\",\n  \"minecraft:reserved4\",\n  \"minecraft:reserved6\",\n  \"minecraft:movingBlock\",\n  \"minecraft:moving_block\",\n  \"minecraft:movingblock\",\n  \"minecraft:piston_arm_collision\",\n  \"minecraft:piston_arm_collision\",\n  \"minecraft:pistonarmcollision\",\n  \"minecraft:stickyPistonArmCollision\",\n  \"minecraft:sticky_piston_arm_collision\",\n  \"minecraft:unknown\",\n\n  // Common Hacked Items\n  \"minecraft:glowingobsidian\",\n  \"minecraft:invisible_bedrock\",\n  \"minecraft:invisiblebedrock\",\n  \"minecraft:netherreactor\",\n  \"minecraft:portal\",\n  \"minecraft:fire\",\n  \"minecraft:water\",\n  \"minecraft:lava\",\n  \"minecraft:flowing_lava\",\n  \"minecraft:flowing_water\",\n  \"minecraft:soul_fire\",\n];\n\n/**\n * Blocks in this list are forbidden from being placed but will not ban the placer\n */\nexport const FORBIDDEN_BLOCKS = [\n  // Common CBE Blocks\n  MinecraftBlockTypes.dispenser.id,\n];\n\n/**\n * List of blocks that cannot be placed down\n */\nexport const BANNED_BLOCKS = [\n  // Should Not be Placed\n  MinecraftBlockTypes.bedrock.id,\n  MinecraftBlockTypes.barrier.id,\n  \"minecraft:invisiblebedrock\",\n  \"minecraft:movingBlock\",\n  \"minecraft:movingblock\",\n  \"minecraft:moving_block\",\n];\n\n/**\n * A List of containers\n */\nexport const CONTAINERS = [\n  MinecraftItemTypes.chest.id,\n  MinecraftItemTypes.trappedChest.id,\n  MinecraftItemTypes.barrel.id,\n  MinecraftItemTypes.dispenser.id,\n  MinecraftItemTypes.dropper.id,\n  MinecraftItemTypes.furnace.id,\n  \"minecraft:lit_furnace\",\n  MinecraftItemTypes.blastFurnace.id,\n  \"minecraft:lit_blast_furnace\",\n  MinecraftItemTypes.smoker.id,\n  \"minecraft:lit_smoker\",\n  MinecraftItemTypes.hopper.id,\n  MinecraftItemTypes.shulkerBox.id,\n  MinecraftItemTypes.undyedShulkerBox.id,\n];\n\n\n", "/*\n|--------------------------------------------------------------------------\n| Enchantments\n|--------------------------------------------------------------------------\n|\n| This is the default enchantments that can be added to items\n| each enchantment is set to its desired max level this can be changed here\n| or in game using -config enchantments set \"enchantment\" value\n|\n*/\nexport const ENCHANTMENTS = {\n  aquaAffinity: 1,\n  baneOfArthropods: 5,\n  binding: 1,\n  blastProtection: 4,\n  channeling: 1,\n  depthStrider: 3,\n  efficiency: 5,\n  featherFalling: 4,\n  fireAspect: 2,\n  fireProtection: 4,\n  flame: 1,\n  fortune: 3,\n  frostWalker: 2,\n  impaling: 5,\n  infinity: 1,\n  knockback: 2,\n  looting: 3,\n  loyalty: 4,\n  luckOfTheSea: 3,\n  lure: 3,\n  mending: 1,\n  multishot: 1,\n  piercing: 4,\n  power: 5,\n  projectileProtection: 4,\n  protection: 4,\n  punch: 2,\n  quickCharge: 3,\n  respiration: 3,\n  riptide: 3,\n  sharpness: 5,\n  silkTouch: 1,\n  smite: 5,\n  soulSpeed: 3,\n  swiftSneak: 4,\n  thorns: 3,\n  unbreaking: 3,\n  vanishing: 1,\n};\n", "import {\r\n  DynamicPropertiesDefinition,\r\n  EntityTypes,\r\n  world,\r\n} from \"@minecraft/server\";\r\nimport { ENTITY_IDENTIFIER, ENTITY_LOCATION } from \"../config/database\";\r\nimport { DIMENSIONS } from \"../../utils.js\";\r\n\r\nworld.events.worldInitialize.subscribe(({ propertyRegistry }) => {\r\n  /**\r\n   * Loads Ticking Area\r\n   */\r\n  DIMENSIONS.overworld.runCommandAsync(\r\n    `tickingarea add ${ENTITY_LOCATION.x} ${ENTITY_LOCATION.y} ${ENTITY_LOCATION.z} ${ENTITY_LOCATION.x} ${ENTITY_LOCATION.y} ${ENTITY_LOCATION.z} db true`\r\n  );\r\n\r\n  let def = new DynamicPropertiesDefinition();\r\n  def.defineString(\"tableName\", 30);\r\n  def.defineNumber(\"index\");\r\n  propertyRegistry.registerEntityTypeDynamicProperties(\r\n    def,\r\n    EntityTypes.get(ENTITY_IDENTIFIER)\r\n  );\r\n});\r\n", "import { system, world } from \"@minecraft/server\";\r\nimport { API_CONTAINERS, CHECK_SIZE } from \"../../config/containers\";\r\nimport { Container } from \"./Container\";\r\nimport { vector3ToBlockLocation } from \"../../../utils\";\r\nimport type { IContainerLocation } from \"../../../types\";\r\n\r\n/**\r\n * storage of all container locations in the world\r\n */\r\nexport let CONTAINER_LOCATIONS: IContainerLocation = {};\r\n\r\nsystem.runSchedule(() => {\r\n  CONTAINER_LOCATIONS = {};\r\n  for (const player of world.getPlayers()) {\r\n    if (player.dimension.id != \"minecraft:overworld\") continue;\r\n    const blockLoc = vector3ToBlockLocation(player.location);\r\n    const pos1 = blockLoc.offset(CHECK_SIZE.x, CHECK_SIZE.y, CHECK_SIZE.z);\r\n    const pos2 = blockLoc.offset(-CHECK_SIZE.x, -CHECK_SIZE.y, -CHECK_SIZE.z);\r\n\r\n    for (const location of pos1.blocksBetween(pos2)) {\r\n      if (location.y < -64) continue;\r\n      const block = player.dimension.getBlock(location);\r\n      if (!block) continue;\r\n      if (!API_CONTAINERS.includes(block.typeId)) continue;\r\n      CONTAINER_LOCATIONS[JSON.stringify(location)] = new Container(\r\n        block.getComponent(\"inventory\").container\r\n      );\r\n    }\r\n  }\r\n}, 100);\r\n", "import { MinecraftBlockTypes } from \"@minecraft/server\";\r\n\r\n/**\r\n * The currently supported block containers by script api\r\n */\r\nexport const API_CONTAINERS = [\r\n  MinecraftBlockTypes.chest.id,\r\n  MinecraftBlockTypes.trappedChest.id,\r\n];\r\n\r\n/**\r\n * The block size to check for blockContainers\r\n */\r\nexport const CHECK_SIZE = { x: 7, y: 7, z: 7 };\r\n", "import { BlockInventoryComponentContainer, ItemStack } from \"@minecraft/server\";\r\n\r\nexport class Container {\r\n  emptySlotsCount: number;\r\n  size: number;\r\n  items: Array<ItemStack>;\r\n  /**\r\n   * Coverts a blockInventoryComponentContainer and saves it\r\n   * @param {BlockInventoryComponentContainer} inventory\r\n   */\r\n  constructor(inventory: BlockInventoryComponentContainer) {\r\n    this.emptySlotsCount = inventory.emptySlotsCount;\r\n    this.size = inventory.size;\r\n    this.items = [];\r\n    for (let i = 0; i < this.size; i++) {\r\n      this.items[i] = inventory.getItem(i);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads this inventory onto a BlockInventoryComponentContainer\r\n   * @param {BlockInventoryComponentContainer} block block to load on\r\n   */\r\n  load(block: BlockInventoryComponentContainer) {\r\n    for (let i = 0; i < block.size; i++) {\r\n      if (!this.items[i]) continue;\r\n      block.setItem(i, this.items[i]);\r\n    }\r\n  }\r\n}\r\n", "import { system } from \"@minecraft/server\";\r\nimport { EntitiesLoad } from \"../../rubedo/lib/Events/EntitiesLoad\";\r\nimport type { Protection } from \"./modules/models/Protection\";\r\n\r\n/**\r\n * All protections in this anti-cheat\r\n */\r\nexport const PROTECTIONS: { [key: string]: Protection<any> } = {};\r\n\r\nEntitiesLoad.subscribe(() => {\r\n  system.run(() => {\r\n    for (const protection of Object.values(PROTECTIONS)) {\r\n      if (!protection.getConfig().enabled ?? protection.isEnabledByDefault)\r\n        continue;\r\n      protection.enable();\r\n    }\r\n  });\r\n});\r\n", "import { Player } from \"@minecraft/server\";\nimport { TABLES } from \"../../tables.js\";\nimport type { IBanData } from \"../../types.js\";\nimport { durationToMs } from \"../../../../utils.js\";\n\nfunction setBan(\n  player: string | Player,\n  id: string,\n  duration?: string,\n  reason: string = \"No Reason\",\n  by: string = \"Rubedo Auto Mod\"\n) {\n  const data: IBanData = {\n    key: id,\n    playerName: player instanceof Player ? player.name : player,\n    date: Date.now(),\n    duration: duration ? durationToMs(duration) : null,\n    expire: duration ? durationToMs(duration) + Date.now() : null,\n    reason: reason,\n    by: by,\n  };\n  TABLES.bans.set(id, data);\n}\n\nexport class Ban {\n  /**\n   * Ban a player for a set length\n   */\n  constructor(\n    player: string | Player,\n    duration?: string,\n    reason: string = \"No Reason\",\n    by: string = \"Rubedo Auto Mod\"\n  ) {\n    if (player instanceof Player) {\n      setBan(player, player.id, duration, reason, by);\n    } else {\n      setBan(player, TABLES.ids.get(player), duration, reason, by);\n    }\n  }\n}\n", "import { Player } from \"@minecraft/server\";\r\nimport { MessageFormData } from \"@minecraft/server-ui\";\r\nimport { TIMEOUT_THRESHOLD } from \"../../../config/form\";\r\nimport type { ButtonCallback, IMessageFormButton } from \"../types\";\r\n\r\nexport class MessageForm {\r\n  /**\r\n   *  the title that this form should have\r\n   */\r\n  title?: string;\r\n  /**\r\n   * extra text that should be displayed in the form\r\n   */\r\n  body?: string;\r\n  /**\r\n   * The default minecraft form this form is based on\r\n   */\r\n  private form: MessageFormData;\r\n  /**\r\n   * the first button of the dialog.\r\n   */\r\n  private button1: IMessageFormButton;\r\n  /**\r\n   * the second button of the dialog.\r\n   */\r\n  private button2: IMessageFormButton;\r\n  /**\r\n   * The amount of times it takes to show this form in ms\r\n   * if this value goes above 200 it will time out\r\n   */\r\n  private triedToShow: number;\r\n\r\n  /**\r\n   * Creates a new form to be shown to a player\r\n   * @param title the title that this form should have\r\n   * @param body extra text that should be displayed in the form\r\n   */\r\n  constructor(title?: string, body?: string) {\r\n    this.title = title;\r\n    this.body = body;\r\n    this.form = new MessageFormData();\r\n\r\n    if (title) this.form.title(title);\r\n    if (body) this.form.body(body);\r\n\r\n    this.triedToShow = 0;\r\n  }\r\n\r\n  /**\r\n   * Method that sets the text for the first button of the dialog.\r\n   * @param text text to show on this button\r\n   * @param callback what happens when this button is clicked\r\n   * @example ```\r\n   * setButton1(\"settings\", () => {})\r\n   * ```\r\n   */\r\n  setButton1(text: string, callback?: ButtonCallback): MessageForm {\r\n    this.button1 = { text: text, callback: callback };\r\n    this.form.button1(text);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Method that sets the text for the second button of the dialog.\r\n   * @param text text to show on this button\r\n   * @param callback what happens when this button is clicked\r\n   * @example ```\r\n   * setButton2(\"settings\", () => {})\r\n   * ```\r\n   */\r\n  setButton2(text: string, callback?: ButtonCallback): MessageForm {\r\n    this.button2 = { text: text, callback: callback };\r\n    this.form.button2(text);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows this form to the player\r\n   * @param player player to show to\r\n   */\r\n  show(player: Player): void {\r\n    this.form.show(player).then((response) => {\r\n      if (response.canceled) {\r\n        if (response.cancelationReason == \"userBusy\") {\r\n          // check time and reshow form\r\n          if (this.triedToShow > TIMEOUT_THRESHOLD)\r\n            return player.tell(\r\n              `\u00A7cForm Timeout: tried to show form, but you were busy (close chat after running command)`\r\n            );\r\n          this.triedToShow++;\r\n          this.show(player);\r\n        }\r\n        return;\r\n      }\r\n      if (response.selection == 1) this.button1?.callback?.();\r\n      if (response.selection == 0) this.button2?.callback?.();\r\n    });\r\n  }\r\n}\r\n", "/**\r\n * If a form tries to show for longer than this value\r\n * the form will stop trying to show. this is used for a timeout\r\n * because if someone tries to open a form but doesn't close chat\r\n */\r\nexport const TIMEOUT_THRESHOLD = 200;\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { MessageForm } from \"./Models/MessageForm\";\r\n\r\n/**\r\n * Sends a confirmation message to a player to confirm a action\r\n * @param action action message to confirm\r\n * @param onConfirm callback to run when a player confirms the action\r\n * @param onCancel callback to run when a player cancels the action, this can be null\r\n * @example ```\r\n * confirmAction(\"Ban Smell of curry\", () => {\r\n * new Ban(\"Smell of curry\")\r\n * })\r\n * ```\r\n */\r\nexport function confirmAction(\r\n    player: Player,\r\n    action: string,\r\n    onConfirm: () => void,\r\n    onCancel: () => void = () => {}\r\n  ) {\r\n    new MessageForm(\"Confirm To Continue\", action)\r\n      .setButton1(\"Confirm\", onConfirm)\r\n      .setButton2(\"Never Mind\", onCancel)\r\n      .show(player);\r\n  }\r\n  ", "import { Location, Player } from \"@minecraft/server\";\r\nimport {\r\n  LiteralArgumentType,\r\n  IArgumentType,\r\n  LocationArgumentType,\r\n  StringArgumentType,\r\n  IntegerArgumentType,\r\n  ArrayArgumentType,\r\n  BooleanArgumentType,\r\n} from \"./ArgumentTypes.js\";\r\nimport { CommandCallback } from \"./Callback.js\";\r\nimport { COMMANDS } from \"./index.js\";\r\nimport type { AppendArgument, ICommandData, ArgReturn } from \"./types\";\r\nexport { ArgumentTypes } from \"./ArgumentTypes\";\r\n\r\nexport class Command<\r\n  Callback extends Function = (ctx: CommandCallback) => void\r\n> {\r\n  /**\r\n   * The Arguments on this command\r\n   */\r\n  children: Command<any>[];\r\n\r\n  /**\r\n   * Function to run when this command is called\r\n   */\r\n  callback: Callback;\r\n\r\n  constructor(\r\n    public data: ICommandData,\r\n    public type?: IArgumentType,\r\n    public depth: number = 0,\r\n    public parent?: Command<any>\r\n  ) {\r\n    if (!data.requires) data.requires = (player: Player) => true;\r\n    this.data = data;\r\n    this.type = type ?? new LiteralArgumentType(this.data.name);\r\n    this.children = [];\r\n    this.depth = depth;\r\n    this.parent = parent;\r\n    this.callback = null;\r\n\r\n    COMMANDS.push(this);\r\n  }\r\n\r\n  /**\r\n   * Adds a ranch to this command of your own type\r\n   * @param type a special type to be added\r\n   * @returns new branch to this command\r\n   */\r\n  argument<T extends IArgumentType>(type: T): ArgReturn<Callback, T[\"type\"]> {\r\n    const cmd = new Command<AppendArgument<Callback, T[\"type\"]>>(\r\n      this.data,\r\n      type,\r\n      this.depth + 1,\r\n      this\r\n    );\r\n    this.children.push(cmd);\r\n    return cmd;\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  string(name: string): ArgReturn<Callback, string> {\r\n    return this.argument(new StringArgumentType(name));\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  int(name: string): ArgReturn<Callback, number> {\r\n    return this.argument(new IntegerArgumentType(name));\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  array<T extends ReadonlyArray<string>>(\r\n    name: string,\r\n    types: T\r\n  ): ArgReturn<Callback, T[number]> {\r\n    return this.argument(new ArrayArgumentType(name, types));\r\n  }\r\n\r\n  /**\r\n   * Adds a branch to this command of type string\r\n   * @param name name this argument should have\r\n   * @returns new branch to this command\r\n   */\r\n  boolean(name: string): ArgReturn<Callback, boolean> {\r\n    return this.argument(new BooleanArgumentType(name));\r\n  }\r\n\r\n  /**\r\n   * Adds a argument to this command to add 3 parameters with location types and to return a Location\r\n   * @param name name this argument  should have\r\n   * @returns new branch to this command\r\n   */\r\n  location(name: string): ArgReturn<Callback, Location> {\r\n    const cmd = this.argument(new LocationArgumentType(name));\r\n    if (!name.endsWith(\"*\")) {\r\n      const newArg = cmd.location(name + \"_y*\").location(name + \"_z*\");\r\n      //@ts-ignore\r\n      return newArg;\r\n    }\r\n    //@ts-ignore\r\n    return cmd;\r\n  }\r\n\r\n  /**\r\n   * Adds a subCommand to this argument\r\n   * @param name name this literal should have\r\n   * @returns new branch to this command\r\n   */\r\n  literal(data: ICommandData): Command<Callback> {\r\n    const cmd = new Command<Callback>(\r\n      data,\r\n      new LiteralArgumentType(data.name),\r\n      this.depth + 1,\r\n      this\r\n    );\r\n    this.children.push(cmd);\r\n    return cmd;\r\n  }\r\n\r\n  /**\r\n   * Registers this command and its appending arguments\r\n   * @param callback what to run when this command gets called\r\n   */\r\n  executes(callback: Callback): Command<Callback> {\r\n    this.callback = callback;\r\n    return this;\r\n  }\r\n}\r\n", "export const text = {\n  \"api.name\": () => \"Smelly API\",\n  \"api.error.unknown\": () => \"An unknown error has occurred.\",\n  \"api.database.error.table_name\": (a: string, b: number) =>\n    `The display name ${a} is too long for an objective, it can be at most ${b} characters long`,\n  \"api.utilities.formatter.error.ms\": (a: string) =>\n    `${a} is not a string or a number`,\n  \"api.Providers.form.invalidType\": (a: string, b: string) =>\n    `Type ${a} is not a valid type to add a ${b}`,\n  \"modules.protections.cps.clickingToFast\": () =>\n    `You are clicking to fast! Please click slower!`,\n  \"modules.managers.mute.isMuted\": () =>\n    `\u00A7cYou've been temporarily muted in chat.`,\n  \"modules.commands.ban.reply\": (\n    playerName: string,\n    duration: string,\n    reason: string = \"\"\n  ) =>\n    `\u00A7cBanned \u00A7f\"\u00A7a${playerName}\u00A7f\" \u00A7cfor ${duration} Because: \"${\n      reason ?? \"No reason Provided\"\n    }\" \u00A7aSuccessfully`,\n  \"lockdown.kick.message\": () => [\n    `\u00A7cYou have been kicked!`,\n    `\u00A7aReason: \u00A7fServer is currently under LockDown`,\n    `\u00A7fServer will be up soon, Try to join later`,\n  ],\n  \"commands.ban.list.player\": (name: string, reason: string, expire: string) =>\n    `- \"${name}\" Because: ${reason}, Expiry ${expire}`,\n  \"commands.freeze.list.player\": (name: string, reason: string) =>\n    `- \"${name}\" Because: ${reason}`,\n  \"commands.mutes.list.player\": (\n    name: string,\n    reason: string,\n    expire: string\n  ) => `- \"${name}\" Because: ${reason}, Expiry: ${expire}`,\n  \"commands.lockdown.confirm\":\n    \"Are you sure you want to lockdown the server, this will kick all active players and all players who try to join who are not admin\",\n};\n", "import { Player } from \"@minecraft/server\";\r\nimport { ActionFormData } from \"@minecraft/server-ui\";\r\nimport { TIMEOUT_THRESHOLD } from \"../../../config/form\";\r\nimport type { ButtonCallback, IActionFormButton } from \"../types\";\r\n\r\nexport class ActionForm {\r\n  /**\r\n   *  the title that this form should have\r\n   */\r\n  title?: string;\r\n  /**\r\n   * extra text that should be displayed in the form\r\n   */\r\n  body?: string;\r\n  /**\r\n   * The buttons this form has\r\n   */\r\n  private buttons: IActionFormButton[];\r\n\r\n  /**\r\n   * The default minecraft form this form is based on\r\n   */\r\n  private form: ActionFormData;\r\n\r\n  /**\r\n   * The amount of times it takes to show this form in ms\r\n   * if this value goes above 200 it will time out\r\n   */\r\n  private triedToShow: number;\r\n\r\n  /**\r\n   * Creates a new form to be shown to a player\r\n   * @param title the title that this form should have\r\n   * @param body extra text that should be displayed in the form\r\n   */\r\n  constructor(title?: string, body?: string) {\r\n    this.title = title;\r\n    this.body = body;\r\n    this.form = new ActionFormData();\r\n\r\n    if (title) this.form.title(title);\r\n    if (body) this.form.body(body);\r\n\r\n    this.buttons = [];\r\n\r\n    this.triedToShow = 0;\r\n  }\r\n\r\n  /**\r\n   * Adds a button to this form\r\n   * @param text text to show on this button\r\n   * @param iconPath the path this button shows\r\n   * @param callback what happens when this button is clicked\r\n   * @example ```\r\n   * addButton(\"settings\", \"textures/items/sum\")\r\n   * ```\r\n   */\r\n  addButton(\r\n    text: string,\r\n    iconPath: string = null,\r\n    callback: ButtonCallback\r\n  ): ActionForm {\r\n    this.buttons.push({\r\n      text: text,\r\n      iconPath: iconPath,\r\n      callback: callback,\r\n    });\r\n    this.form.button(text, iconPath);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows this form to the player\r\n   * @param player player to show to\r\n   */\r\n  show(player: Player): void {\r\n    this.form.show(player).then((response) => {\r\n      if (response.canceled) {\r\n        if (response.cancelationReason == \"userBusy\") {\r\n          // check time and reshow form\r\n          if (this.triedToShow > TIMEOUT_THRESHOLD)\r\n            return player.tell(\r\n              `\u00A7cForm Timeout: tried to show form, but you were busy (close chat after running command)`\r\n            );\r\n          this.triedToShow++;\r\n          this.show(player);\r\n        }\r\n        return;\r\n      }\r\n      this.buttons[response.selection].callback?.();\r\n    });\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { ModalFormData } from \"@minecraft/server-ui\";\r\nimport { TIMEOUT_THRESHOLD } from \"../../../config/form\";\r\nimport type { AppendFormField, IModalFormArg, Range } from \"../types\";\r\nimport { FormCallback } from \"./FormCallback\";\r\n\r\nexport class ModalForm<\r\n  Callback extends Function = (ctx: FormCallback) => void\r\n> {\r\n  /**\r\n   *  the title that this form should have\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * The default minecraft form this form is based on\r\n   */\r\n  private form: ModalFormData;\r\n\r\n  /**\r\n   * The arguments this form has\r\n   */\r\n  private args: IModalFormArg[];\r\n\r\n  /**\r\n   * Creates a new form to be shown to a player\r\n   * @param title the title that this form should have\r\n   */\r\n  constructor(title?: string) {\r\n    this.title = title;\r\n    this.form = new ModalFormData();\r\n\r\n    if (title) this.form.title(title);\r\n\r\n    this.args = [];\r\n  }\r\n\r\n  /**\r\n   * Adds a dropdown to this form\r\n   * @param label label to show on dropdown\r\n   * @param options the available options for this dropdown\r\n   * @param defaultValueIndex the default value index\r\n   * @returns this\r\n   */\r\n  addDropdown<T extends ReadonlyArray<string>>(\r\n    label: string,\r\n    options: T,\r\n    defaultValueIndex?: number\r\n  ): ModalForm<AppendFormField<Callback, T[number]>> {\r\n    // @ts-ignore\r\n    this.args.push({ type: \"dropdown\", options: options });\r\n    // @ts-ignore\r\n    this.form.dropdown(label, options, defaultValueIndex);\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a slider to this form\r\n   * @param label label to be shown on this slider\r\n   * @param minimumValue the smallest value this can be\r\n   * @param maximumValue the maximum value this can be\r\n   * @param valueStep how this slider increments\r\n   * @param defaultValue the default value in slider\r\n   * @returns this\r\n   */\r\n  addSlider<T extends number, U extends number>(\r\n    label: string,\r\n    minimumValue: T,\r\n    maximumValue: U,\r\n    valueStep: number,\r\n    defaultValue?: number\r\n  ): ModalForm<AppendFormField<Callback, Range<T, U>>> {\r\n    this.args.push({ type: \"slider\" });\r\n    this.form.slider(\r\n      label,\r\n      minimumValue,\r\n      maximumValue,\r\n      valueStep,\r\n      defaultValue\r\n    );\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a toggle to this form\r\n   * @param label the name of this toggle\r\n   * @param defaultValue the default toggle value could be true or false\r\n   * @returns\r\n   */\r\n  addToggle(\r\n    label: string,\r\n    defaultValue?: boolean\r\n  ): ModalForm<AppendFormField<Callback, boolean>> {\r\n    this.args.push({ type: \"toggle\" });\r\n    this.form.toggle(label, defaultValue);\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a text field to this form\r\n   * @param label label for this textField\r\n   * @param placeholderText the text that shows on this field\r\n   * @param defaultValue the default value that this field has\r\n   */\r\n  addTextField(\r\n    label: string,\r\n    placeholderText: string,\r\n    defaultValue?: string\r\n  ): ModalForm<AppendFormField<Callback, string>> {\r\n    this.args.push({ type: \"textField\" });\r\n    this.form.textField(label, placeholderText, defaultValue);\r\n    // @ts-ignore\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Shows this form to a player\r\n   * @param player player to show to\r\n   * @param callback sends a callback when this form is submitted\r\n   */\r\n  async show(player: Player, callback: Callback) {\r\n    for (let i = 0; i < TIMEOUT_THRESHOLD; i++) {\r\n      let response = await this.form.show(player);\r\n      if (response.cancelationReason == \"userBusy\") continue;\r\n      callback(\r\n        new FormCallback(this, player, callback),\r\n        ...response.formValues.map((v, i) =>\r\n          this.args[i].type == \"dropdown\" ? this.args[i].options[v] : v\r\n        )\r\n      );\r\n      return;\r\n    }\r\n    return player.tell(\r\n      `\u00A7cForm Timeout: tried to show form, but you were busy (close chat after running command)`\r\n    );\r\n  }\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { ActionForm } from \"./ActionForm\";\r\nimport { MessageForm } from \"./MessageForm\";\r\nimport { ModalForm } from \"./ModelForm\";\r\n\r\nexport class FormCallback {\r\n  /**\r\n   * form that was used in this call\r\n   */\r\n  private form: ActionForm | MessageForm | ModalForm<any>;\r\n  /**\r\n   * player that this form used\r\n   */\r\n  private player: Player;\r\n\r\n  /**\r\n   * the function that was called\r\n   */\r\n  private callback: () => void;\r\n\r\n  /**\r\n   * Creates a new form callback instance that can be used by\r\n   * buttons, and args to run various functions\r\n   * @param form form that is used in this call\r\n   */\r\n  constructor(\r\n    form: ActionForm | MessageForm | ModalForm<any>,\r\n    player: Player,\r\n    callback: any\r\n  ) {\r\n    this.form = form;\r\n    this.player = player;\r\n    this.callback = callback;\r\n  }\r\n\r\n  /**\r\n   * Reshow the form and shows the user a error message\r\n   * @param message error message to show\r\n   */\r\n  error(message: string) {\r\n    new MessageForm(\"Error\", message)\r\n      .setButton1(\"Return to form\", () => {\r\n        this.form.show(this.player, this.callback);\r\n      })\r\n      .setButton2(\"Cancel\", null)\r\n      .show(this.player);\r\n  }\r\n}\r\n", "import { TABLES } from \"../../tables.js\";\nimport { msToTime } from \"../../../../utils.js\";\nimport { getRole } from \"../../utils.js\";\nimport { Ban } from \"../models/Ban.js\";\nimport { confirmAction } from \"../../../../rubedo/lib/Form/utils.js\";\nimport {\n  ArgumentTypes,\n  Command,\n} from \"../../../../rubedo/lib/Command/Command.js\";\nimport { text } from \"../../../../rubedo/lang/text.js\";\nimport type { CommandCallback } from \"../../../../rubedo/lib/Command/Callback.js\";\nimport { ActionForm } from \"../../../../rubedo/lib/Form/Models/ActionForm.js\";\nimport { ModalForm } from \"../../../../rubedo/lib/Form/Models/ModelForm.js\";\n\nfunction ban(\n  ctx: CommandCallback,\n  player: string,\n  duration: string,\n  reason: string,\n  by: string\n) {\n  if (TABLES.bans.get(TABLES.ids.get(player)))\n    return ctx.reply(`\u00A7c${player} is already banned`);\n  ctx.reply(`\u00A7aClose chat to confirm`);\n  confirmAction(\n    ctx.sender,\n    `Are you sure you want to ban ${player}, for ${duration ?? \"forever\"}`,\n    () => {\n      new Ban(player, duration, reason, ctx.sender.name);\n      ctx.reply(text[\"modules.commands.ban.reply\"](player, duration, reason));\n    }\n  );\n}\n\nconst root = new Command({\n  name: \"ban\",\n  description: \"Manage bans\",\n  requires: (player) => [\"admin\", \"moderator\"].includes(getRole(player)),\n});\n\nroot\n  .literal({\n    name: \"add\",\n    description: \"Bans a player\",\n  })\n  .argument(new ArgumentTypes.playerName())\n  .executes((ctx, player) => {\n    ban(ctx, player, null, null, ctx.sender.name);\n  })\n  .argument(new ArgumentTypes.duration(\"duration\"))\n  .executes((ctx, player, duration) => {\n    ban(ctx, player, duration, null, ctx.sender.name);\n  })\n  .string(\"reason\")\n  .executes((ctx, player, duration, reason) => {\n    ban(ctx, player, duration, reason, ctx.sender.name);\n  });\n\nroot\n  .literal({\n    name: \"remove\",\n    description: \"un-bans a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const banData = TABLES.bans\n      .values()\n      .find((ban) => ban.playerName == playerName);\n    if (!banData) return ctx.reply(`${playerName} is not banned`);\n    if (TABLES.bans.delete(banData.key)) {\n      ctx.reply(`\u00A7a${playerName}\u00A7r has been Unbanned!`);\n    } else {\n      ctx.reply(`\u00A7cFailed to un-ban ${playerName}`);\n    }\n  });\n\nroot\n  .literal({\n    name: \"list\",\n    description: \"Lists all bans\",\n  })\n  .executes((ctx) => {\n    const bans = TABLES.bans.values();\n    if (bans.length == 0) return ctx.sender.tell(`\u00A7cNo one is banned!`);\n    ctx.sender.tell(`\u00A72--- Showing Bans (${bans.length}) ---`);\n    for (const ban of bans) {\n      ctx.sender.tell(\n        text[\"commands.ban.list.player\"](\n          ban.playerName,\n          ban.reason,\n          ban.expire ? msToTime(ban.duration) : \"Forever\"\n        )\n      );\n    }\n  });\n\nroot\n  .literal({\n    name: \"test\",\n    description: \"sdhsd\",\n  })\n  .executes((ctx) => {\n    new ActionForm(\"Manage Bans\")\n      .addButton(\"Ban a Player\", \"textures/ui/hammer_r\", () => {\n        new ModalForm(\"Ban a Player\")\n          .addDropdown(\"Player Name:\", TABLES.ids.keys())\n          .addTextField(\"Duration\", \"10d, 5h, 2s\", \"null\")\n          .addTextField(\"Ban Reason\", \"\", \"No Reason Provided\")\n          .show(ctx.sender, (ctx, playerName, duration, reason) => {\n            console.warn(playerName, duration, reason);\n          });\n      })\n      .addButton(\"Revoke a Ban\", \"textures/ui/hammer_r_disabled\", () => {\n        console.warn(`Revoke a player`);\n      })\n      .addButton(\"View Current Bans\", \"textures/ui/store_sort_icon\", () => {\n        console.warn(`Revoke a player`);\n      })\n      .show(ctx.sender);\n  });\n", "import { Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { TABLES } from \"../../tables.js\";\nimport { getRole } from \"../../utils\";\n\nconst root = new Command({\n  name: \"database\",\n  description: \"Interacts with SA Database\",\n  aliases: [\"db\"],\n  requires: (player) => getRole(player) == \"admin\",\n});\n\nroot\n  .literal({\n    name: \"get\",\n  })\n  .string(\"table\")\n  .string(\"key\")\n  .executes((ctx, table, key) => {\n    try {\n      const data = TABLES[table as keyof typeof TABLES].get(key);\n      if (data) {\n        ctx.reply(JSON.stringify(data));\n      } else {\n        ctx.reply(`No data could be found for key ${key}`);\n      }\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n\nroot\n  .literal({\n    name: \"set\",\n  })\n  .string(\"table\")\n  .string(\"key\")\n  .string(\"value\")\n  .executes((ctx, table, key, value) => {\n    try {\n      TABLES[table as keyof typeof TABLES].set(key, value);\n      ctx.reply(`Set Key: \"${key}\", to value: \"${value}\" on table: \"${table}\"`);\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n\nroot\n  .literal({\n    name: \"clear\",\n  })\n  .string(\"table\")\n  .executes((ctx, table) => {\n    try {\n      TABLES[table as keyof typeof TABLES].clear();\n      ctx.reply(`Cleared Table ${table}`);\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n\nroot\n  .literal({\n    name: \"keys\",\n    description: \"Returns all keys on a database\",\n  })\n  .string(\"table\")\n  .executes((ctx, table) => {\n    try {\n      const keys = TABLES[table as keyof typeof TABLES].keys();\n      ctx.reply(`Keys on database: ${table}: ${keys}`);\n    } catch (error) {\n      ctx.reply(error + error.stack);\n    }\n  });\n\nroot\n  .literal({\n    name: \"values\",\n    description: \"Returns all values on a database\",\n  })\n  .string(\"table\")\n  .executes((ctx, table) => {\n    try {\n      const values = TABLES[table as keyof typeof TABLES].values();\n      ctx.reply(\n        `Values on database: ${table}: ${JSON.stringify(values, null, 2)}`\n      );\n    } catch (error) {\n      // likely occurs when table is empty\n      if (error instanceof TypeError) {\n        ctx.reply(`No values on database ${table}`);\n      } else {\n        ctx.reply(error + error.stack);\n      }\n    }\n  });\n", "import { ArgumentTypes, Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { getRole } from \"../../utils.js\";\n\nnew Command({\n  name: \"ecwipe\",\n  description: \"Clears a players ender chest\",\n  requires: (player) => getRole(player) == \"admin\",\n})\n  .argument(new ArgumentTypes.player(\"player\"))\n  .executes((ctx, player) => {\n    for (let i = 0; i < 27; i++) {\n      player.runCommandAsync(`replaceitem entity @s slot.enderchest ${i} air`);\n    }\n    ctx.reply(`\u00A7aCleared \"${player.name}\"'s Ender chest!`);\n  });\n", "import { Player } from \"@minecraft/server\";\nimport { TABLES } from \"../../tables.js\";\nimport type { IFreezeData } from \"../../types.js\";\n\nexport class Freeze {\n  /**\n   * Freeze a player\n   */\n  constructor(player: Player, reason: string = \"No Reason\") {\n    const data: IFreezeData = {\n      playerName: player.name,\n      key: player.id,\n      reason: reason,\n      location: {\n        x: player.location.x,\n        y: player.location.y,\n        z: player.location.z,\n        dimension: player.dimension.id,\n      },\n    };\n    TABLES.freezes.set(player.id, data);\n  }\n}\n", "import { ArgumentTypes, Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { Freeze } from \"../models/Freeze.js\";\nimport { getRole } from \"../../utils.js\";\nimport { TABLES } from \"../../tables.js\";\nimport { text } from \"../../../../rubedo/lang/text.js\";\n\nconst root = new Command({\n  name: \"freeze\",\n  description: \"Manage Freezes\",\n  requires: (player) => [\"admin\", \"moderator\"].includes(getRole(player)),\n});\n\nroot\n  .literal({\n    name: \"add\",\n    description: \"Freezes a player\",\n  })\n  .argument(new ArgumentTypes.player(\"player\"))\n  .string(\"reason\")\n  .executes((ctx, player, reason) => {\n    new Freeze(player, reason);\n    ctx.reply(\n      `\u00A7cFroze \u00A7f\"\u00A7a${player.name}\u00A7f\" Because: \"${reason}\" \u00A7aSuccessfully`\n    );\n    ctx.sender.tell(\n      `\u00A7cYou have been frozen by \u00A7f\"\u00A7a${ctx.sender.name}\u00A7f\" Because: \"${reason}\"`\n    );\n  });\n\nroot\n  .literal({\n    name: \"remove\",\n    description: \"unfreezes a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const freeze = TABLES.freezes\n      .values()\n      .find((freeze) => freeze.playerName == playerName);\n    if (!freeze) return ctx.reply(`${playerName} is not frozen`);\n\n    TABLES.freezes.delete(freeze.key);\n\n    ctx.reply(`\u00A7a${playerName}\u00A7r has been UnFrozen!`);\n  });\n\nroot\n  .literal({\n    name: \"list\",\n    description: \"Lists all freezes\",\n  })\n  .executes((ctx) => {\n    const freezes = TABLES.freezes.values();\n    if (freezes.length == 0) return ctx.sender.tell(`\u00A7cNo one is frozen!`);\n    ctx.sender.tell(`\u00A72--- Showing Freezes (${freezes.length}) ---`);\n    for (const freeze of freezes) {\n      ctx.sender.tell(\n        text[\"commands.freeze.list.player\"](freeze.playerName, freeze.reason)\n      );\n    }\n  });\n", "import { Player } from \"@minecraft/server\";\nimport { PREFIX } from \"../../../../rubedo/config/commands.js\";\nimport type {\n  IArgumentType,\n  IArgumentReturnData,\n} from \"../../../../rubedo/lib/Command/ArgumentTypes.js\";\nimport { Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { COMMANDS } from \"../../../../rubedo/lib/Command/index.js\";\n\nclass CommandNameArgumentType implements IArgumentType {\n  type: string;\n  typeName = \"CommandName\";\n  matches(value: string): IArgumentReturnData<string> {\n    return {\n      success: Boolean(\n        COMMANDS.find((c) => c.depth == 0 && c.data.name == value)\n      ),\n      value: value,\n    };\n  }\n  fail(value: string): string {\n    return `\"${value}\" is not a valid command`;\n  }\n  constructor(public name: string) {}\n}\n\n/**\n * Sends text in chat relation to the args in the command to player\n */\nfunction sendCommandType(\n  baseCommand: Command,\n  args: Command[],\n  player: Player\n) {\n  player.tell(\n    `${PREFIX}${baseCommand.data.name} ${args\n      .map((a) =>\n        a.type.typeName == \"literal\"\n          ? a.data.name\n          : `<${a.type.name}: ${a.type.typeName}>`\n      )\n      .join(\" \")}`\n  );\n}\n\nfunction sendArguments(bc: Command, c: Command, args: Command[], p: Player) {\n  if (!c.data?.requires(p)) return;\n  if (c.callback) {\n    // command has a callback\n    sendCommandType(bc, c.depth == 0 ? args : args.concat(c), p);\n  }\n  if (c.children.length > 0) {\n    // cmd has arguments\n    for (const child of c.children) {\n      sendArguments(bc, child, c.depth == 0 ? args : args.concat(c), p);\n    }\n  }\n}\n\nfunction sendPageHeader(player: Player, p: number, maxPages: number) {\n  player.tell(\n    `\u00A72--- Showing help page ${p} of ${maxPages} (${PREFIX}help <page: int>) ---`\n  );\n}\n\nfunction getCommands(player: Player): Command<any>[] {\n  return COMMANDS.filter((c) => {\n    return c.depth == 0 && c.data?.requires(player);\n  });\n}\n\nfunction getMaxPages(player: Player): number {\n  const commands = getCommands(player);\n  if (commands.length == 0) return 0;\n  return Math.ceil(commands.length / 5);\n}\n\nconst root = new Command({\n  name: \"help\",\n  description: \"Provides help/list of commands.\",\n  aliases: [\"?\", \"h\"],\n}).executes((ctx) => {\n  // show page 1\n  const maxPages = getMaxPages(ctx.sender);\n  const commands = getCommands(ctx.sender).slice(1 * 5 - 5, 1 * 5);\n  sendPageHeader(ctx.sender, 1, maxPages);\n  for (const cmd of commands) {\n    sendArguments(cmd, cmd, [], ctx.sender);\n  }\n});\n\nroot.int(\"page\").executes((ctx, p) => {\n  // shows page\n  const maxPages = getMaxPages(ctx.sender);\n  if (p > maxPages) p = maxPages;\n  const commands = getCommands(ctx.sender).slice(p * 5 - 5, p * 5);\n  sendPageHeader(ctx.sender, p, maxPages);\n  for (const cmd of commands) {\n    sendArguments(cmd, cmd, [], ctx.sender);\n  }\n});\n\nroot\n  .argument(new CommandNameArgumentType(\"command\"))\n  .executes((ctx, command) => {\n    // shows command\n    const cmd = COMMANDS.filter(\n      (c) => c.depth == 0 && c.data.name == command\n    )[0];\n    ctx.sender.tell(\n      `\u00A7e${cmd.data.name}: ${\n        cmd.data.aliases ? `aliases (${cmd.data.aliases.join(\", \")})` : \"\"\n      }`\n    );\n    ctx.sender.tell(`\u00A7e${cmd.data.description}`);\n    ctx.sender.tell(`Usage:`);\n    sendArguments(cmd, cmd, [], ctx.sender);\n  });\n", "import { world } from \"@minecraft/server\";\r\nimport { text } from \"../../../../rubedo/lang/text.js\";\r\nimport { Command } from \"../../../../rubedo/lib/Command/Command.js\";\r\nimport { confirmAction } from \"../../../../rubedo/lib/Form/utils.js\";\r\nimport { getRole, isLockedDown, kick, setLockDown } from \"../../utils.js\";\r\n\r\nnew Command({\r\n  name: \"lockdown\",\r\n  description: \"Toggles the servers lockdown, meaning no one can join\",\r\n  requires: (player) => getRole(player) == \"admin\",\r\n}).executes((ctx) => {\r\n  if (isLockedDown()) {\r\n    setLockDown(false);\r\n    ctx.sender.tell(`\u00A7aUnlocked the server!`);\r\n  } else {\r\n    ctx.reply(`\u00A7aClose chat to confirm lockdown`);\r\n    confirmAction(ctx.sender, text[\"commands.lockdown.confirm\"], () => {\r\n      setLockDown(true);\r\n      for (const player of world.getPlayers()) {\r\n        if (getRole(player) == \"admin\") continue;\r\n        kick(player, text[\"lockdown.kick.message\"]());\r\n      }\r\n      world.say(`\u00A7l\u00A7cServer is now LOCKED!`);\r\n    });\r\n  }\r\n});\r\n", "import { Player } from \"@minecraft/server\";\nimport { TABLES } from \"../../tables.js\";\nimport type { IMuteData } from \"../../types.js\";\nimport { durationToMs } from \"../../../../utils.js\";\n\nexport class Mute {\n  length: number;\n  /**\n   * Gets the mute data for this player\n   */\n  static getMuteData(player: Player): IMuteData {\n    return TABLES.mutes.get(player.name);\n  }\n  /**\n   * Mutes a player for a length\n   */\n  constructor(\n    player: Player,\n    duration?: string,\n    reason: string = \"No Reason\",\n    by: string = \"Rubedo Auto Mod\"\n  ) {\n    const msLength = duration ? durationToMs(duration) : null;\n    const data: IMuteData = {\n      playerName: player.name,\n      date: Date.now(),\n      duration: msLength,\n      expire: msLength ? msLength + Date.now() : null,\n      reason: reason,\n      by: by,\n    };\n    TABLES.mutes.set(player.name, data);\n  }\n}\n", "import { ArgumentTypes, Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { Mute } from \"../models/Mute.js\";\nimport { getRole } from \"../../utils.js\";\nimport { TABLES } from \"../../tables.js\";\nimport { msToTime } from \"../../../../utils.js\";\nimport { text } from \"../../../../rubedo/lang/text.js\";\n\nconst root = new Command({\n  name: \"mute\",\n  description: \"Manage Mutes\",\n  requires: (player) => [\"admin\", \"moderator\"].includes(getRole(player)),\n});\n\nroot\n  .literal({\n    name: \"add\",\n    description: \"Mutes a player\",\n  })\n  .argument(new ArgumentTypes.player(\"player\"))\n  .argument(new ArgumentTypes.duration(\"duration\"))\n  .string(\"reason\")\n  .executes((ctx, player, duration, reason) => {\n    new Mute(player, duration, reason, ctx.sender.name);\n    ctx.reply(\n      `\u00A7cMuted \u00A7f\"\u00A7a${player.name}\u00A7f\" \u00A7cfor ${duration} Because: \"${reason}\" \u00A7aSuccessfully`\n    );\n    player.tell(\n      `\u00A7cYou have been muted by \u00A7f\"${ctx.sender.name}\" \u00A7cfor ${duration} Because: \"${reason}\"`\n    );\n  });\n\nroot\n  .literal({\n    name: \"remove\",\n    description: \"un-mutes a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const mute = TABLES.mutes\n      .values()\n      .find((mute) => mute.playerName == playerName);\n    if (!mute) return ctx.reply(`${playerName} is not muted!`);\n\n    TABLES.mutes.delete(mute.playerName);\n    try {\n      ctx.sender.runCommandAsync(`ability \"${playerName}\" mute false`);\n    } catch (error) {}\n    ctx.reply(`\u00A7a${playerName}\u00A7r has been UnMuted!`);\n  });\n\nroot\n  .literal({\n    name: \"list\",\n    description: \"Lists all freezes\",\n  })\n  .executes((ctx) => {\n    const mutes = TABLES.mutes.values();\n    if (mutes.length == 0) return ctx.sender.tell(`\u00A7cNo one is muted!`);\n    ctx.sender.tell(`\u00A72--- Showing Mutes (${mutes.length}) ---`);\n    for (const mute of mutes) {\n      ctx.sender.tell(\n        text[\"commands.mutes.list.player\"](\n          mute.playerName,\n          mute.reason,\n          mute.expire ? msToTime(mute.expire) : \"Forever\"\n        )\n      );\n    }\n  });\n", "import { Location } from \"@minecraft/server\";\nimport { Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { getRole } from \"../../utils.js\";\nimport { Npc } from \"../models/Npc.js\";\n\nnew Command({\n  name: \"npc\",\n  description: \"Spawns a npc at your coordinates\",\n  requires: (player) => getRole(player) == \"admin\",\n}).executes((ctx) => {\n  const { x, y, z } = ctx.sender.location;\n  new Npc(new Location(x, y, z), ctx.sender.dimension);\n  ctx.reply(`Spawned a verified npc at your current location`);\n});\n", "import { Dimension, Entity, Location } from \"@minecraft/server\";\r\nimport { clearNpcLocations, NPC_LOCATIONS } from \"../../index.js\";\r\nimport { TABLES } from \"../../tables.js\";\r\nimport type { INpcLocation } from \"../../types.js\";\r\nimport { LocationEquals } from \"../../../../utils.js\";\r\n\r\nexport class Npc {\r\n  /**\r\n   * Checks if a entity is a valid npc\r\n   * @param entity npc\r\n   */\r\n  static isValid(entity: Entity): boolean {\r\n    if (entity.typeId != \"minecraft:npc\") return false;\r\n    if (NPC_LOCATIONS.find((l) => LocationEquals(l, entity.location)))\r\n      return true;\r\n    return TABLES.npcs.keys().find((key) => entity.id == key) ? true : false;\r\n  }\r\n  /**\r\n   * Adds a new verified npc to the world\r\n   */\r\n  constructor(location: Location, dimension: Dimension) {\r\n    NPC_LOCATIONS.push(location);\r\n    const entity = dimension.spawnEntity(\"minecraft:npc\", location);\r\n\r\n    const data: INpcLocation = {\r\n      dimension: entity.dimension.id,\r\n      x: entity.location.x,\r\n      y: entity.location.y,\r\n      z: entity.location.z,\r\n    };\r\n    TABLES.npcs.set(entity.id, data);\r\n    clearNpcLocations();\r\n  }\r\n}\r\n", "import { system } from \"@minecraft/server\";\nimport { Command } from \"../../../../rubedo/lib/Command/Command\";\n\nasync function getServerTPS(): Promise<number> {\n  let startTime = Date.now();\n  let ticks = 0;\n  return new Promise((resolve) => {\n    let s = system.runSchedule(() => {\n      if (Date.now() - startTime < 1000) {\n        ticks++;\n      } else {\n        system.clearRunSchedule(s);\n        resolve(ticks);\n      }\n    });\n  });\n}\n\nnew Command({\n  name: \"ping\",\n  description: \"Returns the current Ticks Per Second of the servers ping\",\n}).executes(async (ctx) => {\n  let ticks = await getServerTPS();\n  ctx.reply(\n    `\u00A7aCurrent Ticks Per Second: ${\n      ticks > 18 ? \"\u00A7f{ \u00A7aGood\" : ticks > 13 ? \"\u00A7f{ \u00A7eOk\" : \"\u00A7f{ \u00A7cSevere\"\n    } ${ticks} \u00A7f}`\n  );\n});\n", "import { BlockLocation } from \"@minecraft/server\";\nimport { Region } from \"../models/Region.js\";\nimport { getRole } from \"../../utils.js\";\nimport { Command } from \"../../../../rubedo/lib/Command/Command.js\";\n\nconst command = new Command({\n  name: \"region\",\n  description: \"Create a Region\",\n  requires: (player) => getRole(player) == \"admin\",\n});\n\ncommand\n  .literal({\n    name: \"add\",\n    description: \"Adds a new protection region\",\n  })\n  .int(\"from_x\")\n  .int(\"from_z\")\n  .int(\"to_x\")\n  .int(\"to_z\")\n  .executes((ctx, from_x, from_z, to_x, to_z) => {\n    new Region(\n      { x: from_x, z: from_z },\n      { x: to_x, z: to_z },\n      ctx.sender.dimension.id\n    );\n    ctx.reply(\n      `Created Region From ${from_x} -64 ${from_z} ${to_x} 320 ${to_z}`\n    );\n  });\n\ncommand\n  .literal({\n    name: \"remove\",\n    description: \"Removes a region at the players current position\",\n  })\n  .executes((ctx) => {\n    const loc = new BlockLocation(\n      ctx.sender.location.x,\n      ctx.sender.location.y,\n      ctx.sender.location.z\n    );\n    const r = Region.removeRegionAtBlockLocation(loc, ctx.sender.dimension.id);\n    if (r) {\n      ctx.reply(`Removed Region at ${loc.x} ${loc.y} ${loc.z}`);\n    } else {\n      ctx.reply(`Failed to find/remove region at ${loc.x} ${loc.y} ${loc.z}`);\n    }\n  });\n\ncommand\n  .literal({\n    name: \"removeAll\",\n    description: \"Removes all regions\",\n  })\n  .executes((ctx) => {\n    Region.getAllRegions().forEach((r) => r.delete());\n    ctx.reply(`Removed All regions`);\n  });\n\ncommand\n  .literal({\n    name: \"list\",\n    description: \"Lists all regions and positions\",\n  })\n  .executes((ctx) => {\n    const regions = Region.getAllRegions();\n    for (const region of regions) {\n      ctx.reply(\n        `Region from ${region.from.x}, ${region.from.z} to ${region.to.x}, ${region.to.z} in dimension ${region.dimensionId}`\n      );\n    }\n    if (regions.length == 0) return ctx.reply(`No regions have been made yet`);\n  });\n\nconst permission = command.literal({\n  name: \"permission\",\n  description: \"Handles permissions for regions\",\n});\n\npermission\n  .literal({\n    name: \"set\",\n    description:\n      \"Sets a certain permission on the region the player is currently in to a value\",\n  })\n  .array(\"key\", [\"doorsAndSwitches\", \"openContainers\", \"pvp\"] as const)\n  .boolean(\"value\")\n  .executes((ctx, key, value) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    region.changePermission(key, value);\n    ctx.reply(`Changed permission ${key} to ${value}`);\n  });\n\npermission\n  .literal({\n    name: \"list\",\n    description: \"Lists the permissions for the current region\",\n  })\n  .executes((ctx) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    ctx.reply(\n      `Current region permissions ${JSON.stringify(region.permissions)}`\n    );\n  });\n\nconst entityCommands = permission.literal({\n  name: \"entities\",\n  description: \"Holds the subCommands for adding or removing allowedEntities\",\n});\n\nentityCommands\n  .literal({\n    name: \"add\",\n    description: \"Adds a entity to the allowed entities list\",\n  })\n  .string(\"entity\")\n  .executes((ctx, entity) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    const currentAllowedEntities = region.permissions.allowedEntities;\n    currentAllowedEntities.push(entity);\n    region.changePermission(\"allowedEntities\", currentAllowedEntities);\n    ctx.reply(\n      `Added entity ${entity} to the allowed entities of the region your currently standing in`\n    );\n  });\n\nentityCommands\n  .literal({\n    name: \"remove\",\n    description: \"Removes a entity from the allowed entities in the region\",\n  })\n  .string(\"entity\")\n  .executes((ctx, entity) => {\n    const region = Region.blockLocationInRegion(\n      new BlockLocation(\n        ctx.sender.location.x,\n        ctx.sender.location.y,\n        ctx.sender.location.z\n      ),\n      ctx.sender.dimension.id\n    );\n    if (!region) return ctx.reply(`You are not in a region`);\n    let currentAllowedEntities = region.permissions.allowedEntities;\n    if (!currentAllowedEntities.includes(entity))\n      return ctx.reply(\n        `The entity ${entity} is not allowed to enter the region`\n      );\n    currentAllowedEntities = currentAllowedEntities.filter((v) => v != entity);\n    region.changePermission(\"allowedEntities\", currentAllowedEntities);\n    ctx.reply(\n      `Removed entity ${entity} to the allowed entities of the region your currently standing in`\n    );\n  });\n", "import { Events } from \"@minecraft/server\";\r\nimport { ENCHANTMENTS } from \"./config/enchantments\";\r\n\r\n/**\r\n * The roles that are in this server\r\n */\r\nexport enum ROLES {\r\n  member,\r\n  admin,\r\n  moderator,\r\n  builder,\r\n}\r\n\r\nexport type ConfigType = {\r\n  /**\r\n   * {@link BANNED_ITEMS}\r\n   */\r\n  banned_items: string[];\r\n  /**\r\n   * {@link BANNED_BLOCKS}\r\n   */\r\n  banned_blocks: string[];\r\n  /**\r\n   * {@link ENCHANTMENTS}\r\n   */\r\n  enchantments: {\r\n    [Property in keyof typeof ENCHANTMENTS]: number;\r\n  };\r\n  /**\r\n   * Appeal Link for the server\r\n   */\r\n  appealLink: string;\r\n};\r\n\r\nexport interface LogData {\r\n  /**\r\n   * An optional playerName who is associated with this log\r\n   * @example \"Smell of curry\"\r\n   */\r\n  playerName?: string;\r\n  /**\r\n   * The message for this log\r\n   * @example \"Smell of curry is bad\"\r\n   */\r\n  message: string;\r\n  /**\r\n   * An optional property to list what protection this was from\r\n   */\r\n  protection?: string;\r\n}\r\n\r\nexport type EventsReturnType<T extends keyof Events> = (\r\n  arg: Parameters<Parameters<Events[T][\"subscribe\"]>[0]>[0]\r\n) => void;\r\n\r\nexport type IProtectionsConfig = {\r\n  [key: string]: boolean | string | number;\r\n  /**\r\n   * If this protection is enabled\r\n   */\r\n  enabled: boolean;\r\n};\r\n\r\nexport interface IBanData {\r\n  /**\r\n   * The unique id of this ban\r\n   */\r\n  key: string;\r\n  /**\r\n   * The playersName of who was banned\r\n   * @example \"Smell of curry\"\r\n   */\r\n  playerName: string;\r\n  /**\r\n   * The date in MS when this player was banned\r\n   */\r\n  date: number;\r\n  /**\r\n   * The duration in ms that this ban will be for\r\n   * if null player is banned forever\r\n   */\r\n  duration?: number;\r\n  /**\r\n   * When this ban will expire, if null it will never expire meaning player is banned forever\r\n   */\r\n  expire?: number;\r\n  /**\r\n   * The reason for why this player was banned\r\n   * @example \"Hacking\"\r\n   */\r\n  reason?: string;\r\n  /**\r\n   * Who banned this player\r\n   * @example \"Smell of curry\"\r\n   * @example \"Rubedo Anti Cheat\"\r\n   */\r\n  by?: string;\r\n}\r\n\r\nexport interface IFreezeData {\r\n  /**\r\n   * Players name of who was banned\r\n   */\r\n  playerName: string;\r\n  /**\r\n   * Unique id of this freeze instance\r\n   */\r\n  key: string;\r\n  /**\r\n   * The reason for this freeze\r\n   */\r\n  reason?: string;\r\n  /**\r\n   * The location of this freeze\r\n   */\r\n  location: {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    dimension: string;\r\n  };\r\n}\r\n\r\nexport interface IMuteData {\r\n  /**\r\n   * Players name of who is muted\r\n   * @example \"Smell of curry\"\r\n   */\r\n  playerName: string;\r\n  /**\r\n   * The date this player got muted\r\n   */\r\n  date: number;\r\n  /**\r\n   * The duration of this mute in ms\r\n   * if null player is muted forever\r\n   */\r\n  duration?: number;\r\n  /**\r\n   * When this players mute will expire in ms\r\n   * if null this mute will never expire\r\n   */\r\n  expire?: number;\r\n  /**\r\n   * Why this player is muted\r\n   * @example \"Spamming\"\r\n   */\r\n  reason?: string;\r\n  /**\r\n   * Who muted this player\r\n   * @example \"Smell of curry\"\r\n   * @example \"Rubedo Anti Cheat\"\r\n   */\r\n  by?: string;\r\n}\r\n\r\nexport interface INpcLocation {\r\n  dimension: string;\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n}\r\n\r\nexport interface IRegionDB {\r\n  dimensionId: string;\r\n  from: IRegionCords;\r\n  to: IRegionCords;\r\n  key: string;\r\n  permissions: IRegionPermissions;\r\n}\r\n\r\nexport interface IRegionCords {\r\n  x: number;\r\n  z: number;\r\n}\r\n\r\nexport interface IRegionPermissions {\r\n  /**\r\n   * if the player can use chests, default: true\r\n   */\r\n  doorsAndSwitches: Boolean;\r\n  /**\r\n   * if the player can use doors, default: true\r\n   */\r\n  openContainers: Boolean;\r\n  /**\r\n   * if players can fight, default: false\r\n   */\r\n  pvp: Boolean;\r\n  /**\r\n   * the entities allowed in this region\r\n   */\r\n  allowedEntities: Array<string>;\r\n}\r\n", "import {\n  ArgumentTypes,\n  Command,\n} from \"../../../../rubedo/lib/Command/Command.js\";\nimport {\n  getRole,\n  getServerOwner,\n  isServerOwner,\n  setRole,\n  setServerOwner,\n} from \"../../utils.js\";\nimport { TABLES } from \"../../tables.js\";\nimport { confirmAction } from \"../../../../rubedo/lib/Form/utils\";\nimport { ROLES } from \"../../types\";\n\n// Helper\nconst StringIsNumber = (value: any) => isNaN(Number(value)) === false;\n\n// Turn enum into array\nfunction ToArray(enumme: any) {\n  return (\n    Object.keys(enumme)\n      // @ts-ignore\n      .filter(StringIsNumber)\n      .map((key) => enumme[key])\n  );\n}\n\nconst root = new Command({\n  name: \"role\",\n  description: \"Changes the role for a player\",\n  requires: (player) => getRole(player) == \"admin\" || isServerOwner(player),\n});\n\nroot\n  .literal({\n    name: \"set\",\n    description: \"Sets the role for a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .argument(new ArgumentTypes.array(\"role\", ToArray(ROLES) as string[]))\n  .executes((ctx, playerName, role) => {\n    setRole(playerName, role as keyof typeof ROLES);\n    ctx.reply(`Changed role of ${playerName} to ${role}`);\n  });\n\nroot\n  .literal({\n    name: \"get\",\n    description: \"Gets the role of a player\",\n  })\n  .argument(new ArgumentTypes.playerName(\"playerName\"))\n  .executes((ctx, playerName) => {\n    const role = getRole(playerName);\n    ctx.reply(`${playerName} has role: ${role}`);\n  });\n\nconst ownerRoot = root.literal({\n  name: \"owner\",\n  description: \"Manages the owner\",\n});\n\nownerRoot\n  .literal({\n    name: \"get\",\n    description: \"Gets the owner of the world\",\n  })\n  .executes((ctx) => {\n    const ownerId = getServerOwner();\n    const ids = TABLES.ids.collection();\n    const ownerName = Object.keys(ids).find((key) => ids[key] === ownerId);\n    ctx.reply(`\u00A7aServer Owner: ${ownerName} (id: ${ownerId})`);\n  });\n\nownerRoot\n  .literal({\n    name: \"transfer\",\n    description: \"Transfers the owner of the world\",\n    requires: (player) => isServerOwner(player),\n  })\n  .argument(new ArgumentTypes.player())\n  .executes((ctx, player) => {\n    confirmAction(\n      ctx.sender,\n      `Are you sure you want to transfer the server ownership to ${player.name}, this action is not reversible!`,\n      () => {\n        setServerOwner(player);\n        ctx.reply(\n          `\u00A7aSet the server Owner to: ${player.name} (id: ${player.id})`\n        );\n      }\n    );\n    ctx.reply(`\u00A7aClose chat to confirm`);\n  });\n\nownerRoot\n  .literal({\n    name: \"clear\",\n    description: \"clear's the owner of the world\",\n    requires: (player) => isServerOwner(player),\n  })\n  .executes((ctx) => {\n    confirmAction(\n      ctx.sender,\n      \"Are you sure you want to clear the server owner, this action is not reversible!\",\n      () => {\n        setServerOwner(null);\n        ctx.reply(\n          `\u00A7aCleared the server owner! run \"/reload\" or reload world to run \"/function start\" again!`\n        );\n      }\n    );\n    ctx.reply(`\u00A7aClose chat to confirm`);\n  });\n", "import { Player } from \"@minecraft/server\";\r\nimport { ENCHANTMENTS } from \"../../config/enchantments\";\r\nimport { getConfigId, setConfigId } from \"../../utils\";\r\nimport { APPEAL_LINK } from \"../../config/moderation\";\r\nimport { ActionForm } from \"../../../../rubedo/lib/Form/Models/ActionForm\";\r\nimport { ModalForm } from \"../../../../rubedo/lib/Form/Models/ModelForm\";\r\n\r\nexport function manageBannedItemsForm(player: Player) {\r\n  new ActionForm(\"Manage Banned Items\")\r\n    .addButton(\"Remove a Banned Item\", null, () => {\r\n      removeBannedItemForm(player);\r\n    })\r\n    .addButton(\"Ban an item\", null, () => {\r\n      addBannedItemForm(player);\r\n    })\r\n    .show(player);\r\n}\r\nexport function removeBannedItemForm(player: Player) {\r\n  new ModalForm(\"Remove Banned Items\")\r\n    .addDropdown(\"Select item to remove\", getConfigId(\"banned_items\"))\r\n    .show(player, (ctx, item) => {\r\n      let items = getConfigId(\"banned_items\");\r\n      items = items.filter((p) => p != item);\r\n      setConfigId(\"banned_items\", items);\r\n      player.tell(`Removed Banned item \"${item}\"`);\r\n    });\r\n}\r\n\r\nexport function addBannedItemForm(player: Player) {\r\n  new ModalForm(\"Add Banned Item\")\r\n    .addTextField(\"Item Id\", \"minecraft:string\")\r\n    .show(player, (ctx, item) => {\r\n      let items = getConfigId(\"banned_items\");\r\n      if (items.includes(item))\r\n        return ctx.error(`\u00A7cItem \"${item}\" is already banned`);\r\n      items.push(item);\r\n      setConfigId(\"banned_items\", items);\r\n      player.tell(`Banned the item \"${item}\"`);\r\n    });\r\n}\r\n\r\nexport function manageBannedBlocksForm(player: Player) {\r\n  new ActionForm(\"Manage Banned Blocks\")\r\n    .addButton(\"Remove a Banned Block\", null, () => {\r\n      removeBannedBlockForm(player);\r\n    })\r\n    .addButton(\"Ban an block\", null, () => {\r\n      addBannedBlockForm(player);\r\n    })\r\n    .show(player);\r\n}\r\n\r\nexport function removeBannedBlockForm(player: Player) {\r\n  new ModalForm(\"Remove Banned Block\")\r\n    .addDropdown(\"Select block to remove\", getConfigId(\"banned_blocks\"))\r\n    .show(player, (ctx, block) => {\r\n      let blocks = getConfigId(\"banned_blocks\");\r\n      blocks = blocks.filter((p) => p != block);\r\n      setConfigId(\"banned_blocks\", blocks);\r\n      player.tell(`Removed Banned block \"${block}\"`);\r\n    });\r\n}\r\n\r\nexport function addBannedBlockForm(player: Player) {\r\n  new ModalForm(\"Add Banned Block\")\r\n    .addTextField(\"Block Id\", \"minecraft:barrier\")\r\n    .show(player, (ctx, block) => {\r\n      let blocks = getConfigId(\"banned_blocks\");\r\n      if (blocks.includes(block))\r\n        return ctx.error(`\u00A7cBlock \"${block}\" is already banned`);\r\n      blocks.push(block);\r\n      setConfigId(\"banned_blocks\", blocks);\r\n      player.tell(`Banned the block \"${block}\"`);\r\n    });\r\n}\r\n\r\nexport function manageEnchantmentLevelsForm(player: Player) {\r\n  new ModalForm(\"Manage Enchantment Levels\")\r\n    .addDropdown(\"Enchantment to change\", Object.keys(ENCHANTMENTS), 0)\r\n    .addTextField(\"Level (number)\", \"5\")\r\n    .show(player, (ctx, enchantment, levelString) => {\r\n      if (isNaN(levelString as any))\r\n        return ctx.error(\r\n          `\u00A7c\"${levelString}\" is not a number, please enter a value like, \"3\", \"9\", etc.`\r\n        );\r\n      const level = parseInt(levelString);\r\n      let enchants = getConfigId(\"enchantments\");\r\n      enchants[enchantment as keyof typeof ENCHANTMENTS] = level;\r\n      setConfigId(\"enchantments\", enchants);\r\n      player.tell(`Set max level for ${enchantment} to ${level}`);\r\n    });\r\n}\r\n\r\nexport function manageAppealLinkForm(player: Player) {\r\n  new ModalForm(\"Manage Appeal Link\")\r\n    .addTextField(\"Appeal Link\", APPEAL_LINK)\r\n    .show(player, (ctx, link) => {\r\n      setConfigId(\"appealLink\", link);\r\n      player.tell(`Changed the servers appeal link to ${link}`);\r\n    });\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport type { IProtectionsConfig } from \"../../types\";\r\nimport { PROTECTIONS } from \"../../protections\";\r\nimport { Protection } from \"../models/Protection\";\r\nimport { showHomeForm } from \"./home\";\r\nimport { ModalForm } from \"../../../../rubedo/lib/Form/Models/ModelForm\";\r\nimport { ActionForm } from \"../../../../rubedo/lib/Form/Models/ActionForm\";\r\n\r\nexport function showAutoModHomeForm(player: Player) {\r\n  const form = new ActionForm(\"Manage Protections\");\r\n\r\n  for (const protection of Object.values(PROTECTIONS)) {\r\n    form.addButton(protection.name, protection.iconPath, () => {\r\n      showProtectionConfig(protection, player);\r\n    });\r\n  }\r\n  form\r\n    .addButton(\"Back\", \"textures/ui/arrow_dark_left_stretch.png\", () => {\r\n      showHomeForm(player);\r\n    })\r\n    .show(player);\r\n}\r\n\r\nexport function showProtectionConfig(protection: Protection, player: Player) {\r\n  const data = protection.getConfig();\r\n  const form = new ModalForm(\r\n    `Manage ${protection.name} Protection Config`\r\n  ).addToggle(\"Enabled\", data[\"enabled\"]);\r\n  let keys: string[] = [];\r\n  for (const [key, value] of Object.entries(protection.configDefault)) {\r\n    keys.push(key);\r\n    if (typeof value.defaultValue == \"boolean\") {\r\n      form.addToggle(value.description, data[key] as boolean);\r\n    } else if (typeof value.defaultValue == \"number\") {\r\n      form.addSlider(value.description, 0, 100, 1, data[key] as number);\r\n    } else {\r\n      form.addTextField(value.description, null, data[key] as string);\r\n    }\r\n  }\r\n  form.show(player, (ctx, enabled, ...keys) => {\r\n    if (enabled != data[\"enabled\"]) {\r\n      if (enabled) protection.enable();\r\n      if (!enabled) protection.disable();\r\n    }\r\n    let config: IProtectionsConfig = {\r\n      enabled: enabled,\r\n    };\r\n    for (const [i, key] of Object.keys(protection.configDefault).entries()) {\r\n      config[key] = keys[i];\r\n    }\r\n    protection.setConfig(config);\r\n    player.tell(`Updated config for ${protection.name}!`);\r\n  });\r\n}\r\n", "import { Player } from \"@minecraft/server\";\r\nimport * as settings from \"./settings\";\r\nimport * as automod from \"./automod\";\r\nimport { ActionForm } from \"../../../../rubedo/lib/Form/Models/ActionForm\";\r\n\r\nexport function showHomeForm(player: Player) {\r\n  new ActionForm(\"Rubedo Settings\")\r\n    .addButton(\"Auto Mod\", \"textures/ui/permissions_op_crown.png\", () => {\r\n      automod.showAutoModHomeForm(player);\r\n    })\r\n    .addButton(\"Banned items\", \"textures/blocks/sculk_shrieker_top.png\", () => {\r\n      settings.manageBannedItemsForm(player);\r\n    })\r\n    .addButton(\"Banned blocks\", \"textures/blocks/barrier.png\", () => {\r\n      settings.manageBannedBlocksForm(player);\r\n    })\r\n    .addButton(\"Enchantments\", \"textures/items/book_enchanted.png\", () => {\r\n      settings.manageEnchantmentLevelsForm(player);\r\n    })\r\n    .addButton(\"Appeal Link\", \"textures/ui/Feedback.png\", () => {\r\n      settings.manageAppealLinkForm(player);\r\n    })\r\n    .show(player);\r\n}\r\n", "import { Command } from \"../../../../rubedo/lib/Command/Command.js\";\r\nimport { getRole } from \"../../utils.js\";\r\nimport { showHomeForm } from \"../forms/home.js\";\r\n\r\nnew Command({\r\n  name: \"settings\",\r\n  description: \"Opens up the settings menu for the player\",\r\n  requires: (player) => [\"admin\", \"moderator\"].includes(getRole(player)),\r\n}).executes((ctx) => {\r\n  showHomeForm(ctx.sender);\r\n  ctx.sender.tell(`\u00A7aForm request sent, close chat to continue!`);\r\n});\r\n", "import { Player, world } from \"@minecraft/server\";\nimport { Command } from \"../../../../rubedo/lib/Command/Command.js\";\nimport { getRole } from \"../../utils.js\";\n\nfunction vanish(player: Player, say: boolean) {\n  if (player.hasTag(`spectator`)) {\n    player.runCommandAsync(`gamemode c`);\n    player.triggerEvent(`removeSpectator`);\n    player.removeTag(`spectator`);\n    if (!say) return;\n    world.say({\n      rawtext: [\n        {\n          translate: \"multiplayer.player.joined\",\n          with: [`\u00A7e${player.name}`],\n        },\n      ],\n    });\n  } else {\n    player.runCommandAsync(`gamemode spectator`);\n    player.triggerEvent(`addSpectator`);\n    player.addTag(`spectator`);\n    if (!say) return;\n    world.say({\n      rawtext: [\n        {\n          translate: \"multiplayer.player.left\",\n          with: [`\u00A7e${player.name}`],\n        },\n      ],\n    });\n  }\n}\n\nnew Command({\n  name: \"vanish\",\n  description: \"Toggles Vanish Mode on the sender\",\n  requires: (player) => getRole(player) == \"admin\",\n})\n  .executes((ctx) => {\n    vanish(ctx.sender, false);\n  })\n  .boolean(\"say\")\n  .executes((ctx, say) => {\n    vanish(ctx.sender, say);\n  });\n", "/*\r\n|--------------------------------------------------------------------------\r\n| Version\r\n|--------------------------------------------------------------------------\r\n|\r\n| This is the version of rubedo recommended to NOT CHANGE could cause bugs.\r\n|\r\n*/\r\nexport const VERSION = \"2.6.5-beta\";\r\n\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Game Version\r\n|--------------------------------------------------------------------------\r\n|\r\n| This is the version of minecraft that this version of rubedo\r\n| was made for its a simple constant to tell creators what version\r\n| this gametest api is supposed to work perfectly for.\r\n|\r\n*/\r\nexport const GAME_VERSION = \"1.19.50\";\r\n", "import { VERSION } from \"../../../../rubedo/config/app\";\nimport { Command } from \"../../../../rubedo/lib/Command/Command\";\n\nnew Command({\n  name: \"version\",\n  description: \"Get Current Rubedo Version\",\n  aliases: [\"v\"],\n}).executes((ctx) => {\n  ctx.reply(`Current Rubedo Version: ${VERSION}`);\n});\n", "import { ArgumentTypes, Command } from \"../../../../rubedo/lib/Command/Command.js\";\r\nimport { getRole, kick } from \"../../utils\";\r\n\r\nnew Command({\r\n  name: \"kick\",\r\n  description: \"Kicks a player from the game\",\r\n  requires: (player) => getRole(player) == \"admin\",\r\n})\r\n  .argument(new ArgumentTypes.player())\r\n  .string(\"reason\")\r\n  .executes((ctx, player, reason) => {\r\n    kick(player, [reason]);\r\n    ctx.reply(`\u00A7aKicked ${player.name} from world`);\r\n  });\r\n", "import { TABLES } from \"../../tables.js\";\r\nimport type { LogData } from \"../../types\";\r\n\r\nexport class Log {\r\n  /**\r\n   * The data on this Log\r\n   */\r\n  data: LogData;\r\n  constructor(data: LogData) {\r\n    this.data = data;\r\n    console.warn(`[LOG]: ${data.message}`);\r\n    TABLES.logs.set(Date.now().toString(), data);\r\n  }\r\n}\r\n", "import { PREFIX } from \"../../../../rubedo/config/commands.js\";\r\nimport { ArgumentTypes, Command } from \"../../../../rubedo/lib/Command/Command.js\";\r\nimport { TABLES } from \"../../tables.js\";\r\nimport { getRole } from \"../../utils\";\r\nimport { Log } from \"../models/Log\";\r\n\r\nfunction timeDifference(previous: number) {\r\n  var msPerMinute = 60 * 1000;\r\n  var msPerHour = msPerMinute * 60;\r\n  var msPerDay = msPerHour * 24;\r\n  var msPerMonth = msPerDay * 30;\r\n  var msPerYear = msPerDay * 365;\r\n\r\n  var elapsed = Date.now() - previous;\r\n\r\n  if (elapsed < msPerMinute) {\r\n    return Math.round(elapsed / 1000) + \" seconds ago\";\r\n  } else if (elapsed < msPerHour) {\r\n    return Math.round(elapsed / msPerMinute) + \" minutes ago\";\r\n  } else if (elapsed < msPerDay) {\r\n    return Math.round(elapsed / msPerHour) + \" hours ago\";\r\n  } else if (elapsed < msPerMonth) {\r\n    return \"approximately \" + Math.round(elapsed / msPerDay) + \" days ago\";\r\n  } else if (elapsed < msPerYear) {\r\n    return \"approximately \" + Math.round(elapsed / msPerMonth) + \" months ago\";\r\n  } else {\r\n    return \"approximately \" + Math.round(elapsed / msPerYear) + \" years ago\";\r\n  }\r\n}\r\n\r\nconst root = new Command({\r\n  name: \"log\",\r\n  description: \"Manages the log command\",\r\n  requires: (player) => getRole(player) == \"admin\",\r\n});\r\n\r\nroot\r\n  .literal({\r\n    name: \"add\",\r\n    description: \"Adds a new log\",\r\n  })\r\n  .string(\"message\")\r\n  .executes((ctx, message) => {\r\n    new Log({ message: message });\r\n    ctx.reply(`\u00A7aAdded new log: ${message}`);\r\n  });\r\n\r\nroot\r\n  .literal({\r\n    name: \"getAll\",\r\n    description: \"Gets all logs sorted in descending\",\r\n  })\r\n  .int(\"page\")\r\n  .array(\"order\", [\"ascending\", \"descending\"] as const)\r\n  .executes((ctx, page, order) => {\r\n    const allLogs = Object.entries(TABLES.logs.collection()).sort((a, b) =>\r\n      order == \"ascending\"\r\n        ? parseInt(b[0]) - parseInt(a[0])\r\n        : parseInt(a[0]) - parseInt(b[0])\r\n    );\r\n    if (allLogs.length == 0) return ctx.reply(`\u00A7cNo Logs have been made!`);\r\n    const maxPages = Math.ceil(allLogs.length / 8);\r\n    if (page > maxPages) page = maxPages;\r\n    ctx.reply(\r\n      `\u00A72--- Showing logs page ${page} of ${maxPages} (${PREFIX}log getAll <page: int>) ---`\r\n    );\r\n\r\n    for (const [key, value] of allLogs.slice(page * 8 - 8, page * 8)) {\r\n      ctx.reply(`${timeDifference(parseInt(key))}: ${value.message}`);\r\n    }\r\n  });\r\n\r\nroot\r\n  .literal({\r\n    name: \"getPlayersLogs\",\r\n    description: \"Gets all logs associated with a player\",\r\n  })\r\n  .argument(new ArgumentTypes.playerName())\r\n  .int(\"page\")\r\n  .array(\"order\", [\"ascending\", \"descending\"] as const)\r\n  .executes((ctx, playerName, page, order) => {\r\n    const allLogs = Object.entries(TABLES.logs.collection())\r\n      .filter((v) => v[1].playerName == playerName)\r\n      .sort((a, b) =>\r\n        order == \"ascending\"\r\n          ? parseInt(b[0]) - parseInt(a[0])\r\n          : parseInt(a[0]) - parseInt(b[0])\r\n      );\r\n    if (allLogs.length == 0)\r\n      return ctx.reply(`\u00A7cNo Logs exists for \"${playerName}\"!`);\r\n    const maxPages = Math.ceil(allLogs.length / 8);\r\n    if (page > maxPages) page = maxPages;\r\n    ctx.reply(\r\n      `\u00A72--- Showing logs for \"${playerName}\" page ${page} of ${maxPages} ---`\r\n    );\r\n\r\n    for (const [key, value] of allLogs.slice(page * 8 - 8, page * 8)) {\r\n      ctx.reply(`${timeDifference(parseInt(key))}: ${value.message}`);\r\n    }\r\n  });\r\n\r\nroot\r\n  .literal({\r\n    name: \"getProtectionLogs\",\r\n    description: \"Gets all logs associated with a protection\",\r\n  })\r\n  .string(\"protection\")\r\n  .int(\"page\")\r\n  .array(\"order\", [\"ascending\", \"descending\"] as const)\r\n  .executes((ctx, protection, page, order) => {\r\n    const allLogs = Object.entries(TABLES.logs.collection())\r\n      .filter((v) => v[1].protection == protection)\r\n      .sort((a, b) =>\r\n        order == \"ascending\"\r\n          ? parseInt(b[0]) - parseInt(a[0])\r\n          : parseInt(a[0]) - parseInt(b[0])\r\n      );\r\n    if (allLogs.length == 0)\r\n      return ctx.reply(`\u00A7cNo Logs exists for protection: \"${protection}\"!`);\r\n    const maxPages = Math.ceil(allLogs.length / 8);\r\n    if (page > maxPages) page = maxPages;\r\n    ctx.reply(\r\n      `\u00A72--- Showing logs for Protection: \"${protection}\" page ${page} of ${maxPages} ---`\r\n    );\r\n\r\n    for (const [key, value] of allLogs.slice(page * 8 - 8, page * 8)) {\r\n      ctx.reply(`${timeDifference(parseInt(key))}: ${value.message}`);\r\n    }\r\n  });\r\n\r\nroot\r\n  .literal({\r\n    name: \"clearAll\",\r\n    description: \"Clears all logs\",\r\n  })\r\n  .executes((ctx) => {\r\n    TABLES.logs.clear();\r\n    ctx.reply(`\u00A7aCleared All logs!`);\r\n  });\r\n", "import { ArgumentTypes, Command } from \"../../../../rubedo/lib/Command/Command.js\";\r\nimport { getRole } from \"../../utils\";\r\n\r\nconst root = new Command({\r\n  name: \"teleport\",\r\n  description: \"Teleports entities (players, mobs, etc.).\",\r\n  aliases: [\"tp\"],\r\n  requires: (player) => getRole(player) == \"admin\",\r\n});\r\n\r\nroot\r\n  .argument(new ArgumentTypes.player())\r\n  .location(\"destination\")\r\n  .executes((ctx, player, destination) => {\r\n    player.addTag(\"skip-movement-check\");\r\n    player.teleport(destination, player.dimension, 0, 0);\r\n    ctx.reply(\r\n      `Teleported ${player.name} to ${destination.x} ${destination.y} ${destination.z}`\r\n    );\r\n  });\r\n", "import { Player, system, world } from \"@minecraft/server\";\r\nimport { EntitiesLoad } from \"./EntitiesLoad\";\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: (player: Player) => void;\r\n    delay: number;\r\n    lastCall: number;\r\n  };\r\n} = {};\r\n\r\nEntitiesLoad.subscribe(() => {\r\n  system.runSchedule(() => {\r\n    const players = [...world.getPlayers()];\r\n    for (const [i, player] of players.entries()) {\r\n      for (const CALLBACK of Object.values(CALLBACKS)) {\r\n        if (\r\n          CALLBACK.delay != 0 &&\r\n          system.currentTick - CALLBACK.lastCall < CALLBACK.delay\r\n        )\r\n          continue;\r\n        CALLBACK.callback(player);\r\n        if (i == players.length - 1) CALLBACK.lastCall = system.currentTick;\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\nexport class forEachPlayer {\r\n  /**\r\n   * Subscribes to a callback that returns every player\r\n   * @param callback what to be called for each player\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(\r\n    callback: (player: Player) => void,\r\n    delay: number = 0\r\n  ): number {\r\n    const key = Object.keys(CALLBACKS).length;\r\n    CALLBACKS[key] = { callback: callback, delay: delay, lastCall: 0 };\r\n    return key;\r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n", "import { TABLES } from \"../../tables.js\";\nimport { msToTime } from \"../../../../utils.js\";\nimport { kick, getConfigId } from \"../../utils.js\";\nimport { forEachPlayer } from \"../../../../rubedo/lib/Events/forEachPlayer.js\";\n\nforEachPlayer.subscribe((player) => {\n  try {\n    const banData = TABLES.bans.get(player.id);\n    if (!banData) return;\n    if (banData.expire && banData.expire < Date.now())\n      return TABLES.bans.delete(player.id);\n    kick(\n      player,\n      [\n        `\u00A7cYou have been banned!`,\n        `\u00A7aReason: \u00A7f${banData.reason}`,\n        `\u00A7fExpiry: \u00A7b${\n          banData.expire ? msToTime(banData.expire - Date.now()) : \"Forever\"\n        }`,\n        `\u00A7fAppeal at: \u00A7b${getConfigId(\"appealLink\")}`,\n      ],\n      () => {\n        console.warn(new Error(\"Failed to kick player\"));\n        TABLES.bans.delete(player.id);\n      }\n    );\n  } catch (error) {\n    console.warn(error + error.stack);\n  }\n}, 20);\n", "import { Location } from \"@minecraft/server\";\nimport { TABLES } from \"../../tables.js\";\nimport { DIMENSIONS } from \"../../../../utils.js\";\nimport { forEachPlayer } from \"../../../../rubedo/lib/Events/forEachPlayer.js\";\n\nforEachPlayer.subscribe((player) => {\n  try {\n    const freezeData = TABLES.freezes.get(player.id);\n\n    if (!freezeData)\n      return player.getComponent(\"movement\").resetToDefaultValue();\n    player.getComponent(\"movement\").setCurrent(0);\n\n    player.teleport(\n      new Location(\n        freezeData.location.x,\n        freezeData.location.y,\n        freezeData.location.z\n      ),\n      DIMENSIONS[freezeData.location.dimension as keyof typeof DIMENSIONS],\n      0,\n      0\n    );\n  } catch (error) {}\n}, 200);\n", "import { world, BeforeChatEvent } from \"@minecraft/server\";\r\nimport { PREFIX } from \"../../config/commands\";\r\n\r\ntype beforeChatCallback = (arg: BeforeChatEvent) => void;\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: beforeChatCallback;\r\n  };\r\n} = {};\r\n\r\nworld.events.beforeChat.subscribe((data) => {\r\n  if (data.message.startsWith(PREFIX)) return; // This is a command\r\n  for (const callback of Object.values(CALLBACKS)) {\r\n    callback.callback(data);\r\n  }\r\n});\r\n\r\nexport class beforeChat {\r\n  /**\r\n   * Subscribes to a callback to get notified when a chat is sent that is not a command\r\n   * @param callback what to be called when one of these entity's inventory changes\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(callback: beforeChatCallback): number {\r\n    const key = Date.now();\r\n    CALLBACKS[key] = { callback: callback };\r\n    return key;\r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n", "import { Mute } from \"../models/Mute.js\";\nimport { TABLES } from \"../../tables.js\";\nimport { text } from \"../../../../rubedo/lang/text.js\";\nimport { beforeChat } from \"../../../../rubedo/lib/Events/beforeChat.js\";\n\nbeforeChat.subscribe((data) => {\n  const muteData = Mute.getMuteData(data.sender);\n  if (!muteData) return;\n  if (muteData.expire && muteData.expire < Date.now())\n    return TABLES.mutes.delete(data.sender.name);\n  data.cancel = true;\n  data.sender.tell(text[\"modules.managers.mute.isMuted\"]());\n});\n", "import { BlockLocation, Player, system, world } from \"@minecraft/server\";\nimport { Region } from \"../models/Region.js\";\nimport { getRole, loadRegionDenys } from \"../../utils.js\";\nimport { BLOCK_CONTAINERS, DOORS_SWITCHES } from \"../../config/region.js\";\nimport { DIMENSIONS } from \"../../../../utils.js\";\nimport { EntitiesLoad } from \"../../../../rubedo/lib/Events/EntitiesLoad.js\";\nimport { forEachPlayer } from \"../../../../rubedo/lib/Events/forEachPlayer.js\";\n\n/**\n * Sets Deny blocks at bottom of region every 5 mins\n */\nsystem.runSchedule(() => {\n  loadRegionDenys();\n}, 6000);\n\n/**\n * Permissions for region\n */\nworld.events.beforeItemUseOn.subscribe((data) => {\n  if ([\"moderator\", \"admin\"].includes(getRole(data.source as Player))) return;\n  const region = Region.blockLocationInRegion(\n    data.blockLocation,\n    data.source.dimension.id\n  );\n  if (!region) return;\n  const block = data.source.dimension.getBlock(data.blockLocation);\n  if (\n    DOORS_SWITCHES.includes(block.typeId) &&\n    region.permissions.doorsAndSwitches\n  )\n    return;\n  if (\n    BLOCK_CONTAINERS.includes(block.typeId) &&\n    region.permissions.openContainers\n  )\n    return;\n  data.cancel = true;\n});\n\nworld.events.beforeExplosion.subscribe((data) => {\n  for (let i = 0; i < data.impactedBlocks.length; i++) {\n    const bL = data.impactedBlocks[i];\n    let region = Region.blockLocationInRegion(bL, data.dimension.id);\n    if (region) return (data.cancel = true);\n  }\n});\n\nworld.events.entityCreate.subscribe(async ({ entity }) => {\n  const region = await Region.blockLocationInRegionSync(\n    new BlockLocation(entity.location.x, entity.location.y, entity.location.z),\n    entity.dimension.id\n  );\n  if (!region) return;\n  if (region.permissions.allowedEntities.includes(entity.typeId)) return;\n  entity.teleport({ x: 0, y: -64, z: 0 }, entity.dimension, 0, 0);\n  entity.kill();\n});\n\nEntitiesLoad.subscribe(() => {\n  system.runSchedule(async () => {\n    for (const region of await Region.getAllRegionsSync()) {\n      for (const entity of DIMENSIONS[\n        region.dimensionId as keyof typeof DIMENSIONS\n      ].getEntities({ excludeTypes: region.permissions.allowedEntities })) {\n        if (!region.entityInRegion(entity)) continue;\n        entity.teleport({ x: 0, y: -64, z: 0 }, entity.dimension, 0, 0);\n        entity.kill();\n      }\n    }\n  }, 100);\n});\n\n/**\n * Gives player a tag if they are in a region\n */\nforEachPlayer.subscribe((player) => {\n  for (const region of Region.getAllRegions()) {\n    if (region.entityInRegion(player)) {\n      player.addTag(`inRegion`);\n      if (!region.permissions.pvp) player.addTag(`region-protected`);\n    } else {\n      player.removeTag(`inRegion`);\n      player.removeTag(`region-protected`);\n    }\n  }\n}, 5);\n", "import { world } from \"@minecraft/server\";\r\nimport { TABLES } from \"../../tables.js\";\r\nimport { getRole, isLockedDown, kick, setRole } from \"../../utils\";\r\nimport { Mute } from \"../models/Mute\";\r\nimport { ChangePlayerRoleTask } from \"../models/Task\";\r\nimport { text } from \"../../../../rubedo/lang/text.js\";\r\nimport { EntitiesLoad } from \"../../../../rubedo/lib/Events/EntitiesLoad.js\";\r\n\r\nworld.events.playerJoin.subscribe(async ({ player }) => {\r\n  await EntitiesLoad.awaitLoad();\r\n  if (isLockedDown() && getRole(player) != \"admin\")\r\n    return kick(player, text[\"lockdown.kick.message\"]());\r\n  // --\r\n  if (Mute.getMuteData(player)) player.runCommandAsync(`ability @s mute true`);\r\n  if (!TABLES.ids.has(player.name)) {\r\n    // Player is new!\r\n    TABLES.ids.set(player.name, player.id);\r\n  } else {\r\n    player.addTag(\"old\");\r\n  }\r\n  /**\r\n   * This is a role that was tried to push when the player was offline\r\n   * so were setting it now because the player just joined\r\n   */\r\n  const roleToSet = ChangePlayerRoleTask.getPlayersRoleToSet(player.name);\r\n  if (roleToSet) setRole(player, roleToSet);\r\n});\r\n", "import {\n  Entity,\n  InventoryComponentContainer,\n  Items,\n  MinecraftItemTypes,\n  world,\n} from \"@minecraft/server\";\nimport { ItemType } from \"@minecraft/server\";\nimport { AIR } from \"../../../../rubedo/lib/Chest GUI\";\nimport { PageItem } from \"../../../../rubedo/lib/Chest GUI/Models/PageItem\";\nimport { Page } from \"../../../../rubedo/lib/Chest GUI/Models/Page\";\nimport { CHESTGUIS } from \"../../../../rubedo/lib/Chest GUI/utils\";\n\n/**\n * The possible fillable slots where items can be put\n * this is for inventory fill\n */\nconst FILLABLE_SLOTS = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44,\n];\n\n/**\n * The possible fillable slots where items can be put\n * this is for inventory fill\n */\nconst FILLABLE_SLOTS_ENDERCHEST = [\n  10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32,\n  33, 34, 37, 38, 39, 40, 41, 42, 43,\n];\n\n/**\n * Fills the chest Screen with the desired kit\n */\nexport function ViewPlayersFill(entity: Entity, page: Page, extras: any) {\n  const container: InventoryComponentContainer = entity.getComponent(\n    \"minecraft:inventory\"\n  ).container;\n\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n  for (const [i, player] of [...world.getPlayers()].entries()) {\n    const slot = FILLABLE_SLOTS[i];\n    const item = new PageItem(MinecraftItemTypes.skull, {\n      nameTag: player.name,\n      data: 3,\n    });\n    container.setItem(slot, item.itemStack);\n    page.slots[slot] = {\n      item: item,\n      action: (ctx) => {\n        ctx.PageAction(\"moderation:see_inventory\", { name: player.name });\n      },\n    };\n  }\n}\n\n/**\n * Fills the chest Screen with the desired kit\n */\nexport function ViewPlayerInventoryFill(\n  entity: Entity,\n  page: Page,\n  extras: any\n) {\n  const container = entity.getComponent(\"minecraft:inventory\").container;\n\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n  const EnderChestItem = new PageItem(MinecraftItemTypes.enderChest, {\n    nameTag: `\u00A7eView \u00A7f${extras?.name}\u00A7e Ender Chest\\n\u00A7fNote: \u00A7cThis will not grab \u00A7lANY NBT!\u00A7r`,\n  });\n  container.setItem(49, EnderChestItem.itemStack);\n  page.slots[49] = {\n    item: EnderChestItem,\n    action: (ctx) => {\n      ctx.PageAction(\"moderation:see_ender_chest\", { name: extras.name });\n    },\n  };\n  const player = [...world.getPlayers()].find((p) => p.name == extras.name);\n  if (!player) {\n    const gui = Object.values(CHESTGUIS).find((e) => e.entity.id == entity.id);\n    gui.despawn();\n    player.tell(`\"${extras.name}\" Could not be found, Gui Crashed`);\n  }\n  const inventory = player.getComponent(\"inventory\").container;\n  /**\n   * the value of how many slots have been taken\n   */\n  let used_slots = 0;\n  for (let i = 0; i < inventory.size; i++) {\n    const item = inventory.getItem(i);\n    const slot = FILLABLE_SLOTS[used_slots];\n    used_slots++;\n    if (!item) {\n      container.setItem(slot, AIR);\n      continue;\n    }\n    container.setItem(slot, item);\n    page.slots[slot] = {\n      item: new PageItem(\n        Items.get(item.typeId),\n        { amount: item.amount, data: item.data },\n        item\n      ),\n      action: (ctx) => {\n        if (i < 9) {\n          player.runCommandAsync(`replaceitem entity @s slot.hotbar ${i} air`);\n        } else {\n          player.runCommandAsync(\n            `replaceitem entity @s slot.inventory ${i - 9} air`\n          );\n        }\n        ctx.GiveAction();\n        page.slots[slot] = {\n          item: null,\n          action: (ctx) => {\n            inventory.addItem(ctx.getItemAdded());\n          },\n        };\n      },\n    };\n  }\n}\n\n/**\n * Fills the chest Screen with the desired kit\n */\nexport async function ViewPlayerEnderChestFill(\n  entity: Entity,\n  page: Page,\n  extras: any\n) {\n  const container = entity.getComponent(\"minecraft:inventory\").container;\n  for (let i = 0; i < container.size; i++) {\n    const slot = page.slots[i];\n    if (!slot || !slot.item) {\n      container.setItem(i, AIR);\n      continue;\n    }\n    container.setItem(i, slot.item.itemStack);\n  }\n  const player = [...world.getPlayers()].find((p) => p.name == extras?.name);\n  if (!player) {\n    const gui = Object.values(CHESTGUIS).find((e) => e.entity.id == entity.id);\n    gui.despawn();\n    player.tell(`\"${extras.name}\" Could not be found, Gui Crashed`);\n  }\n  /**\n   * the value of how many slots have been taken\n   */\n  let used_slots = 0;\n  const ItemTypes: ItemType[] = Object.values(MinecraftItemTypes);\n  for (const item of ItemTypes) {\n    try {\n      await player.runCommandAsync(\n        `testfor @s[hasitem={item=${item.id},location=slot.enderchest}]`\n      );\n      const ChestGuiItem = new PageItem(item, {\n        nameTag: \"Note: \u00A7l\u00A7cThis is not the exact item\",\n      });\n      const slot = FILLABLE_SLOTS_ENDERCHEST[used_slots];\n      container.setItem(slot, ChestGuiItem.itemStack);\n      page.slots[slot] = {\n        item: ChestGuiItem,\n        action: (ctx) => {\n          ctx.GiveAction();\n          page.slots[slot] = null;\n        },\n      };\n      used_slots++;\n    } catch (error) {}\n  }\n}\n\nnew Page(\"moderation:see\", ViewPlayersFill)\n  .setSlots(\n    [50],\n    new PageItem(MinecraftItemTypes.arrow, {\n      nameTag: \"\u00A7fBack\",\n    }),\n    (ctx) => {\n      ctx.PageAction(\"home\");\n    }\n  )\n  .setSlots(\n    [48],\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\n    (ctx) => {\n      ctx.CloseAction();\n    }\n  );\n\nnew Page(\"moderation:see_inventory\", ViewPlayerInventoryFill)\n  .setSlots(\n    [50],\n    new PageItem(MinecraftItemTypes.arrow, {\n      nameTag: \"\u00A7fBack\",\n    }),\n    (ctx) => {\n      ctx.PageAction(\"moderation:see\");\n    }\n  )\n  .setSlots(\n    [48],\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\n    (ctx) => {\n      ctx.CloseAction();\n    }\n  );\n\nnew Page(\"moderation:see_ender_chest\", ViewPlayerEnderChestFill)\n  .setSlots(\n    [50],\n    new PageItem(MinecraftItemTypes.arrow, {\n      nameTag: \"\u00A7fBack\",\n    }),\n    (ctx) => {\n      ctx.PageAction(\"moderation:see\");\n    }\n  )\n  .setSlots(\n    [48],\n    new PageItem(MinecraftItemTypes.barrier, { nameTag: \"\u00A7cClose GUI\" }),\n    (ctx) => {\n      ctx.CloseAction();\n    }\n  );\n", "import { Player, MinecraftBlockTypes } from \"@minecraft/server\";\nimport { FORBIDDEN_BLOCKS } from \"../../config/moderation\";\nimport { Npc } from \"../models/Npc\";\nimport { getConfigId, getRole } from \"../../utils\";\nimport { Ban } from \"../models/Ban\";\nimport { Protection } from \"../models/Protection\";\n\n/**\n * Entities that are not allowed to spawn because they can be used by CBE\n */\nconst CBE_ENTITIES = [\"minecraft:command_block_minecart\"];\n\nconst protection = new Protection<{\n  entityCreate: boolean;\n  banSpawnEggs: boolean;\n}>(\n  \"cbe\",\n  \"Stops CBE\",\n  \"textures/blocks/command_block.png\",\n  true\n).setConfigDefault({\n  entityCreate: {\n    description: \"Adds NPC protection\",\n    defaultValue: true,\n  },\n  banSpawnEggs: {\n    description: \"If spawn eggs should be banned\",\n    defaultValue: true,\n  },\n});\n\nprotection.subscribe(\"entityCreate\", ({ entity }) => {\n  const config = protection.getConfig();\n  if (!config.entityCreate) return;\n  const kill = () => {\n    try {\n      entity.triggerEvent(\"despawn\");\n      entity.kill();\n    } catch (error) {\n      entity.kill();\n    }\n  };\n  if (CBE_ENTITIES.includes(entity.typeId)) return kill();\n  if (entity.typeId == \"minecraft:npc\" && !Npc.isValid(entity)) return kill();\n});\n\nprotection.subscribe(\"beforeItemUseOn\", (data) => {\n  if (!(data.source instanceof Player)) return;\n  if ([\"admin\", \"moderator\"].includes(getRole(data.source))) return;\n  const config = protection.getConfig();\n\n  if (data.item.typeId.endsWith(\"spawn_egg\")) {\n    if (!config.banSpawnEggs) return;\n    const block = data.source.dimension.getBlock(data.blockLocation);\n    if (block.typeId == MinecraftBlockTypes.mobSpawner.id) return;\n    // Cancel use so players cant use spawnEggs on floor\n    data.cancel = true;\n    data.source.tell(`\u00A7c[Rubedo]: You cannot place spawnEggs on the floor!`);\n    data.source.playSound(`note.bass`);\n  } else {\n    if (FORBIDDEN_BLOCKS.includes(data.item.typeId)) {\n      data.cancel = true;\n      return;\n    }\n    const BANNED_BLOCKS = getConfigId(\"banned_blocks\");\n    if (!BANNED_BLOCKS.includes(data.item.typeId)) return;\n    data.cancel = true;\n    new Ban(data.source, null, \"Placing Banned Blocks\");\n  }\n});\n", "import { Events, Player, system, world } from \"@minecraft/server\";\r\nimport { TABLES } from \"../../tables.js\";\r\nimport { EventsReturnType, IProtectionsConfig } from \"../../types.js\";\r\nimport { PROTECTIONS } from \"../../protections.js\";\r\nimport { forEachPlayer } from \"../../../../rubedo/lib/Events/forEachPlayer.js\";\r\n\r\n/**\r\n * A protection instance\r\n */\r\nexport class Protection<Config = IProtectionsConfig> {\r\n  /**\r\n   * Events that this is subscribed to\r\n   */\r\n  private events: {\r\n    -readonly [Key in keyof Events]+?: {\r\n      /**\r\n       * Callback this event is to run.\r\n       */\r\n      callback: ReturnType<Events[Key][\"subscribe\"]>;\r\n      /**\r\n       * If this has been triggered on world.events\r\n       */\r\n      triggered: boolean;\r\n    };\r\n  };\r\n\r\n  /**\r\n   * List of events that this protection is scheduled\r\n   */\r\n  private schedules: {\r\n    /**\r\n     * Callback to run\r\n     */\r\n    callback: () => void;\r\n    /**\r\n     * Delay in ticks\r\n     */\r\n    tickInterval: number;\r\n    /**\r\n     * If null, this event hasn't been registered by {@link system.runSchedule}\r\n     * if {@link number}, the event has been registered and this key can be used to {@link system.clearRunSchedule}\r\n     */\r\n    runScheduleId: number | null;\r\n  }[];\r\n\r\n  /**\r\n   * A list of forEachPlayer keys used to unsubscribe\r\n   */\r\n  private forEachPlayers: {\r\n    /**\r\n     * Callback to run\r\n     * @param player\r\n     * @returns\r\n     */\r\n    callback: (player: Player) => void;\r\n    /**\r\n     * Delay in ticks\r\n     */\r\n    delay: number;\r\n    /**\r\n     * If null, this event hasn't been registered by {@link forEachPlayer}\r\n     * if {@link number}, the event has been registered and this key can be used to unsubscribe\r\n     */\r\n    key: number | null;\r\n  }[];\r\n\r\n  /**\r\n   * Callback to run on enable\r\n   */\r\n  private onEnableCallback: () => void | undefined;\r\n\r\n  /**\r\n   * Callback to run on disable\r\n   */\r\n  private onDisableCallback: () => void | undefined;\r\n\r\n  /**\r\n   * If this protection is enabled\r\n   */\r\n  private isEnabled: boolean;\r\n\r\n  /**\r\n   * The default config object\r\n   */\r\n  configDefault:\r\n    | {\r\n        [key in keyof Config]: {\r\n          description: string;\r\n          defaultValue: Config[key];\r\n        };\r\n      }\r\n    | null;\r\n\r\n  /**\r\n   * Creates a new protection module\r\n   */\r\n  constructor(\r\n    public name: string,\r\n    public description: string,\r\n    public iconPath: string,\r\n    public isEnabledByDefault: boolean\r\n  ) {\r\n    this.name = name;\r\n    this.description = description;\r\n    this.iconPath = iconPath;\r\n    this.configDefault = null;\r\n    this.isEnabled = false;\r\n    this.isEnabledByDefault = isEnabledByDefault;\r\n    // ---- events\r\n    this.events = {};\r\n    this.schedules = [];\r\n    this.forEachPlayers = [];\r\n    // Save protection\r\n    PROTECTIONS[this.name] = this;\r\n  }\r\n\r\n  /**\r\n   * Sets the config to a typed object\r\n   * @param data typed object\r\n   * @returns\r\n   */\r\n  setConfigDefault(data: {\r\n    [key in keyof Config]: {\r\n      description: string;\r\n      defaultValue: Config[key];\r\n    };\r\n  }): Protection<Config> {\r\n    this.configDefault = data;\r\n    TABLES.protections.hasSync(this.name).then((v) => {\r\n      if (v) return;\r\n      let saveData: IProtectionsConfig = {\r\n        enabled: true,\r\n      };\r\n      for (const key of Object.keys(data)) {\r\n        // @ts-ignore\r\n        saveData[key] = data[key as keyof typeof data].defaultValue;\r\n      }\r\n      TABLES.protections.set(this.name, saveData);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets the config data\r\n   * @returns Config\r\n   */\r\n  getConfig(): Config {\r\n    let config = TABLES.protections.get(this.name);\r\n    if (!config) config = { enabled: this.isEnabled };\r\n    return config as Config;\r\n  }\r\n\r\n  async setConfig(data: Config) {\r\n    return TABLES.protections.set(this.name, data as IProtectionsConfig);\r\n  }\r\n\r\n  /**\r\n   * Triggers a change to a activate this module or not.\r\n   * @param enabled if this protection is enabled or not\r\n   */\r\n  private triggerChange(enabled: boolean) {\r\n    if (enabled) {\r\n      this.isEnabled = true;\r\n      // Enable this protection\r\n      this.onEnableCallback?.();\r\n      for (const [key, value] of Object.entries(this.events)) {\r\n        if (value.triggered) continue;\r\n        let callback = world.events[key as keyof Events].subscribe(\r\n          // @ts-ignore\r\n          value.callback\r\n        );\r\n        value.triggered = true;\r\n        value.callback = callback;\r\n      }\r\n      for (const v of this.forEachPlayers) {\r\n        if (v.key) continue;\r\n        let key = forEachPlayer.subscribe(v.callback, v.delay);\r\n        v.key = key;\r\n      }\r\n      for (const v of this.schedules) {\r\n        if (v.runScheduleId) continue;\r\n        let runScheduleId = system.runSchedule(v.callback);\r\n        v.runScheduleId = runScheduleId;\r\n      }\r\n    } else {\r\n      this.isEnabled = false;\r\n      // Disable this protection\r\n      this.onDisableCallback?.();\r\n      for (const [key, value] of Object.entries(this.events)) {\r\n        if (!value.triggered) continue;\r\n        // @ts-ignore\r\n        world.events[key as keyof Events].unsubscribe(value.callback);\r\n        value.triggered = false;\r\n      }\r\n      for (const v of this.forEachPlayers) {\r\n        if (!v.key) continue;\r\n        forEachPlayer.unsubscribe(v.key);\r\n        v.key = null;\r\n      }\r\n      for (const v of this.schedules) {\r\n        if (!v.runScheduleId) continue;\r\n        system.clearRunSchedule(v.runScheduleId);\r\n        v.runScheduleId = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Runs a callback once this protection is activated\r\n   * @param callback function to run\r\n   */\r\n  onEnable(callback: () => void): Protection<Config> {\r\n    this.onEnableCallback = callback;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Runs a callback once this protection is disabled\r\n   * @param callback function to run\r\n   */\r\n  onDisable(callback: () => void): Protection<Config> {\r\n    this.onDisableCallback = callback;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Subscribes to a worldEvent\r\n   * @param id event id to subscribe\r\n   * @param callback what to run on event callback\r\n   * @returns this\r\n   */\r\n  subscribe<T extends keyof Events>(\r\n    id: T,\r\n    callback: EventsReturnType<T>\r\n  ): Protection<Config> {\r\n    this.events[id] = {\r\n      callback: callback,\r\n      triggered: false,\r\n    };\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Schedules a callback to be run every x number of ticks\r\n   * @param callback callback\r\n   * @param tickInterval ticks\r\n   */\r\n  runSchedule(callback: () => void, tickInterval?: number): Protection<Config> {\r\n    this.schedules.push({\r\n      callback: callback,\r\n      tickInterval: tickInterval,\r\n      runScheduleId: null,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Callback for each valid players\r\n   * @param callback\r\n   * @param delay\r\n   */\r\n  forEachPlayer(\r\n    callback: (player: Player) => void,\r\n    delay: number = 0\r\n  ): Protection<Config> {\r\n    this.forEachPlayers.push({\r\n      callback: callback,\r\n      delay: delay,\r\n      key: null,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables this protection\r\n   */\r\n  enable() {\r\n    this.triggerChange(true);\r\n  }\r\n\r\n  /**\r\n   * Disables this protection\r\n   */\r\n  disable() {\r\n    this.triggerChange(false);\r\n  }\r\n}\r\n", "import { getRole } from \"../../utils.js\";\nimport { Ban } from \"../models/Ban.js\";\nimport { Protection } from \"../models/Protection.js\";\n\n/**\n * Minecraft Bedrock Anti Crasher\n * @license MIT\n * @author Smell of curry\n * @version 1.0.0\n * --------------------------------------------------------------------------\n * This anti crasher works by testing if a player has reached a location\n * Horion's crasher teleports the player to 30 Million so we just test for\n * That location and if they are there we kick the player (USES: player.json)\n * --------------------------------------------------------------------------\n */\n\n/**\n * This is the distance where if you go past it will ban you\n */\nconst DISTANCE = 320000;\n\nnew Protection(\n  \"crasher\",\n  \"Protection against type 1 crasher\",\n  \"textures/ui/servers.png\",\n  true\n).forEachPlayer((player) => {\n  if (getRole(player) == \"admin\") return;\n  if (\n    Math.abs(player.location.x) > DISTANCE ||\n    Math.abs(player.location.y) > DISTANCE ||\n    Math.abs(player.location.z) > DISTANCE\n  ) {\n    new Ban(player, null, \"Crasher detected\");\n  }\n});\n", "import { GameMode, world } from \"@minecraft/server\";\nimport { getRole } from \"../../utils.js\";\nimport { Ban } from \"../models/Ban.js\";\nimport { Protection } from \"../models/Protection.js\";\nimport { Log } from \"../models/Log.js\";\nimport { PlayerLog } from \"../../../../rubedo/database/types/PlayerLog.js\";\n\n/**\n * The gamemode that you cannot be in unless you have staff tag\n */\nconst ILLEGAL_GAMEMODE = GameMode.creative;\n\n/**\n * Stores per world load violation data for players\n */\nconst ViolationCount = new PlayerLog<number>();\n\nconst protection = new Protection<{\n  clearPlayer: boolean;\n  setToSurvival: boolean;\n  banPlayer: boolean;\n  violationCount: number;\n}>(\n  \"gamemode\",\n  \"Blocks illegal gamemode\",\n  \"textures/ui/creative_icon.png\",\n  true\n).setConfigDefault({\n  clearPlayer: {\n    description: \"Whether to clear players inventory.\",\n    defaultValue: true,\n  },\n  setToSurvival: {\n    description: \"If player should be set to survival after being flagged.\",\n    defaultValue: true,\n  },\n  banPlayer: {\n    description: \"If player should be banned after violation count is met.\",\n    defaultValue: false,\n  },\n  violationCount: {\n    description: \"The amount of violations before ban.\",\n    defaultValue: 0,\n  },\n});\n\nprotection.runSchedule(() => {\n  const config = protection.getConfig();\n  for (const player of world.getPlayers({ gameMode: ILLEGAL_GAMEMODE })) {\n    if ([\"moderator\", \"admin\", \"builder\"].includes(getRole(player))) continue;\n    try {\n      if (config.setToSurvival) player.runCommandAsync(`gamemode s`);\n      if (config.clearPlayer) player.runCommandAsync(`clear @s`);\n    } catch (error) {}\n    new Log({\n      playerName: player.name,\n      protection: \"Gamemode\",\n      message: `${player.name} has entered into a illegal gamemode!`,\n    });\n    const count = (ViolationCount.get(player) ?? 0) + 1;\n    ViolationCount.set(player, count);\n    if (config.banPlayer && count >= config.violationCount)\n      new Ban(player, null, \"Illegal Gamemode\");\n  }\n}, 20);\n", "import { Player, world } from \"@minecraft/server\";\r\n\r\nexport class PlayerLog<T extends any = any> {\r\n  data: Map<string, T>;\r\n  events: Object;\r\n\r\n  constructor() {\r\n    this.data = new Map();\r\n    this.events = {\r\n      playerLeave: world.events.playerLeave.subscribe((data) =>\r\n        this.data.delete(data.playerName)\r\n      ),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Logs a player to a value\r\n   */\r\n  set(player: Player, value: T): void {\r\n    this.data.set(player.name, value);\r\n  }\r\n\r\n  /**\r\n   * Gets a players value\r\n   */\r\n  get(player: Player): T | undefined {\r\n    return this.data.get(player.name);\r\n  }\r\n\r\n  /**\r\n   * Deletes a player from log\r\n   */\r\n  delete(player: Player) {\r\n    this.data.delete(player.name);\r\n  }\r\n\r\n  /**\r\n   * Clears this Player log\r\n   */\r\n  clear() {\r\n    this.data.clear();\r\n  }\r\n\r\n  /**\r\n   * Gets all the players in the log\r\n   */\r\n  playerNames(): Array<string> {\r\n    return [...this.data.keys()];\r\n  }\r\n\r\n  /**\r\n   * Checks to see if a player is in this list\r\n   * @param player player to check\r\n   * @returns\r\n   */\r\n  includes(player: Player): boolean {\r\n    return this.playerNames().includes(player.name);\r\n  }\r\n}\r\n", "import {\r\n  world,\r\n  Location,\r\n  Block,\r\n  BlockPermutation,\r\n  Dimension,\r\n  Player,\r\n  system,\r\n} from \"@minecraft/server\";\r\nimport { API_CONTAINERS } from \"../../config/containers.js\";\r\nimport { CONTAINER_LOCATIONS } from \"../Containers/index.js\";\r\n\r\ntype beforeBlockBreakCallback = (arg0: BeforeBlockBreakEvent) => void;\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: beforeBlockBreakCallback;\r\n  };\r\n} = {};\r\n\r\nworld.events.blockBreak.subscribe((data) => {\r\n  for (const callback of Object.values(CALLBACKS)) {\r\n    callback.callback(\r\n      new BeforeBlockBreakEvent(\r\n        data.block,\r\n        data.brokenBlockPermutation,\r\n        data.dimension,\r\n        data.player\r\n      )\r\n    );\r\n  }\r\n});\r\n\r\nexport class beforeBlockBreak {\r\n  /**\r\n   * Subscribes to a callback to get notified when a chat is sent that is not a command\r\n   * @param callback what to be called when one of these entities inventory's changes\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(callback: beforeBlockBreakCallback): number {\r\n    const key = Date.now();\r\n    CALLBACKS[key] = { callback: callback };\r\n    return key;\r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n}\r\n\r\nclass BeforeBlockBreakEvent {\r\n  /**\r\n   * Contains information regarding an event before a player breaks a block.\r\n   * @param block Block broken in this event. Note that because this event fires right after a block is broken, the block you will receive will likely be of type 'minecraft:air'. See the .brokenBlockPermutation property for information on this block before it was broken.\r\n   * @param brokenBlockPermutation Returns permutation information about this block before it was broken.\r\n   * @param dimension Dimension that contains the block that has been broken in this event.\r\n   * @param player Player that broke the block for this event.\r\n   */\r\n  constructor(\r\n    public block: Block,\r\n    public brokenBlockPermutation: BlockPermutation,\r\n    public dimension: Dimension,\r\n    public player: Player\r\n  ) {\r\n    this.block = block;\r\n    this.brokenBlockPermutation = brokenBlockPermutation;\r\n    this.dimension = dimension;\r\n    this.player = player;\r\n  }\r\n\r\n  set cancel(value: boolean) {\r\n    // setting block back\r\n    this.dimension\r\n      .getBlock(this.block.location)\r\n      .setPermutation(this.brokenBlockPermutation.clone());\r\n    // setting chest inventory back\r\n    if (API_CONTAINERS.includes(this.brokenBlockPermutation.type.id)) {\r\n      const OLD_INVENTORY =\r\n        CONTAINER_LOCATIONS[JSON.stringify(this.block.location)];\r\n      if (OLD_INVENTORY) {\r\n        OLD_INVENTORY.load(this.block.getComponent(\"inventory\").container);\r\n      }\r\n    }\r\n    // killing dropped items\r\n    system.run(() => {\r\n      [\r\n        ...this.dimension.getEntities({\r\n          maxDistance: 2,\r\n          type: \"minecraft:item\",\r\n          location: new Location(\r\n            this.block.location.x,\r\n            this.block.location.y,\r\n            this.block.location.z\r\n          ),\r\n        }),\r\n      ].forEach((e) => e.kill());\r\n    });\r\n  }\r\n}\r\n", "import { getRole } from \"../../utils.js\";\nimport { Ban } from \"../models/Ban.js\";\nimport { Protection } from \"../models/Protection.js\";\nimport { PlayerLog } from \"../../../../rubedo/database/types/PlayerLog.js\";\nimport { beforeBlockBreak } from \"../../../../rubedo/lib/Events/beforeBlockBreak.js\";\n\n/**\n * The log of the players break times\n */\nconst log = new PlayerLog();\n\n/**\n * if a block is broken faster than this time it is considered hacking\n */\nconst IMPOSSIBLE_BREAK_TIME = 15;\n\n/**\n * When breaking vegetation blocks it could cause a false trigger\n * so when a block gets broken and it has one of the block tags\n * it gets skipped and doesn't count in the nuker event\n *\n * @link https://wiki.bedrock.dev/blocks/block-tags.html\n */\nconst VALID_BLOCK_TAGS = [\n  \"snow\",\n  \"lush_plants_replaceable\",\n  \"azalea_log_replaceable\",\n  \"minecraft:crop\",\n  \"fertilize_area\",\n];\n\n/**\n * A list of all the blocks that are impossible to break unless you have hacks\n */\nconst IMPOSSIBLE_BREAKS = [\n  \"minecraft:water\",\n  \"minecraft:flowing_water\",\n  \"minecraft:lava\",\n  \"minecraft:flowing_lava\",\n  \"minecraft:bedrock\",\n];\n\n/**\n * Stores per world load violation data for players\n */\nconst ViolationCount = new PlayerLog<number>();\n\nlet beforeBlockBreakKey: number = null;\n\nconst protection = new Protection<{\n  banPlayer: boolean;\n  violationCount: number;\n}>(\n  \"nuker\",\n  \"Blocks block breaking too fast\",\n  \"textures/blocks/dirt.png\",\n  true\n).setConfigDefault({\n  banPlayer: {\n    description: \"If the player should be banned once violation count is met\",\n    defaultValue: false,\n  },\n  violationCount: {\n    description: \"Violations before ban\",\n    defaultValue: 0,\n  },\n});\n\nprotection\n  .onEnable(() => {\n    const config = protection.getConfig();\n    beforeBlockBreakKey = beforeBlockBreak.subscribe((data) => {\n      if ([\"moderator\", \"admin\"].includes(getRole(data.player))) return;\n      if (data.block.getTags().some((tag) => VALID_BLOCK_TAGS.includes(tag)))\n        return;\n      const old = log.get(data.player);\n      log.set(data.player, Date.now());\n      if (!old) return;\n\n      // If block is impossible to break skip check, reduces lag.\n      if (!IMPOSSIBLE_BREAKS.includes(data.block.typeId)) {\n        if (old < Date.now() - IMPOSSIBLE_BREAK_TIME) return;\n        const count = (ViolationCount.get(data.player) ?? 0) + 1;\n        ViolationCount.set(data.player, count);\n        if (config.banPlayer && count >= config.violationCount)\n          new Ban(data.player, null, \"Using Nuker\");\n      }\n\n      data.cancel = true;\n    });\n  })\n  .onDisable(() => {\n    beforeBlockBreak.unsubscribe(beforeBlockBreakKey);\n  });\n", "import { PREFIX } from \"../../../../rubedo/config/commands\";\r\nimport { PlayerLog } from \"../../../../rubedo/database/types/PlayerLog\";\r\nimport { getRole } from \"../../utils\";\r\nimport { Mute } from \"../models/Mute\";\r\nimport { Protection } from \"../models/Protection\";\r\n\r\nconst previousMessage = new PlayerLog<string>();\r\n\r\n/**\r\n * Stores per world load violation data for players\r\n */\r\nconst ViolationCount = new PlayerLog<number>();\r\n\r\nconst protection = new Protection<{\r\n  permMutePlayer: boolean;\r\n  violationCount: number;\r\n  repeatedMessages: boolean;\r\n  zalgo: boolean;\r\n}>(\r\n  \"spam\",\r\n  \"Blocks spam in chat\",\r\n  \"textures/ui/mute_on.png\",\r\n  true\r\n).setConfigDefault({\r\n  permMutePlayer: {\r\n    description:\r\n      \"If player should be permanently muted once violation count is met.\",\r\n    defaultValue: false,\r\n  },\r\n  violationCount: {\r\n    description: \"Violation count before permanent mute\",\r\n    defaultValue: 0,\r\n  },\r\n  repeatedMessages: {\r\n    description: \"Blocks repeated messages\",\r\n    defaultValue: true,\r\n  },\r\n  zalgo: {\r\n    description: \"Blocks zalgo\",\r\n    defaultValue: true,\r\n  },\r\n});\r\n\r\nprotection.subscribe(\"beforeChat\", (data) => {\r\n  try {\r\n    if (data.message.startsWith(PREFIX)) return;\r\n    if ([\"admin\", \"moderator\"].includes(getRole(data.sender))) return;\r\n    const config = protection.getConfig();\r\n    const isSpam = () => {\r\n      const count = (ViolationCount.get(data.sender) ?? 0) + 1;\r\n      ViolationCount.set(data.sender, count);\r\n      if (config.permMutePlayer && count >= config.violationCount)\r\n        new Mute(data.sender, null, \"Spamming\");\r\n    };\r\n    if (\r\n      config.repeatedMessages &&\r\n      previousMessage.get(data.sender) == data.message\r\n    ) {\r\n      data.cancel = true;\r\n      isSpam();\r\n      return data.sender.tell(`\u00A7cRepeated message detected!`);\r\n    }\r\n    if (config.zalgo && /%CC%/g.test(encodeURIComponent(data.message))) {\r\n      data.cancel = true;\r\n      isSpam();\r\n      return data.sender.tell(\r\n        `\u00A7cYou message contains some type of zalgo and cannot be sent!`\r\n      );\r\n    }\r\n    previousMessage.set(data.sender, data.message);\r\n  } catch (error) {\r\n    console.warn(error + error.stack);\r\n  }\r\n});\r\n", "import { Player } from \"@minecraft/server\";\r\nimport { PlayerLog } from \"../../../../rubedo/database/types/PlayerLog.js\";\r\nimport { AIR } from \"../../../../rubedo/lib/Chest GUI/index.js\";\r\nimport { FORBIDDEN_ITEMS } from \"../../config/moderation.js\";\r\nimport { getConfigId, getMaxEnchantmentLevel, getRole } from \"../../utils\";\r\nimport { Ban } from \"../models/Ban.js\";\r\nimport { Log } from \"../models/Log.js\";\r\nimport { Protection } from \"../models/Protection.js\";\r\n\r\n/**\r\n * Stores violation count for player\r\n */\r\nconst ViolationCount = new PlayerLog<number>();\r\n\r\nconst protection = new Protection<{\r\n  clearItem: boolean;\r\n  banPlayer: boolean;\r\n  violationCount: number;\r\n}>(\r\n  \"unobtainable\",\r\n  \"Blocks unobtainable items\",\r\n  \"textures/blocks/end_portal.png\",\r\n  true\r\n)\r\n  .setConfigDefault({\r\n    clearItem: {\r\n      description:\r\n        \"If the possessed item should be cleared from there inventory\",\r\n      defaultValue: true,\r\n    },\r\n    banPlayer: {\r\n      description: \"If the player should be banned once hit violation count.\",\r\n      defaultValue: true,\r\n    },\r\n    violationCount: {\r\n      description:\r\n        \"The amount of times this player can posses a banned item before ban.\",\r\n      defaultValue: 3,\r\n    },\r\n  })\r\n  .forEachPlayer((player) => {\r\n    if (getRole(player) == \"admin\") return;\r\n    const BANNED_ITEMS = getConfigId(\"banned_items\");\r\n\r\n    const inventory = player.getComponent(\"inventory\").container;\r\n    for (let i = 0; i < inventory.size; i++) {\r\n      const item = inventory.getItem(i);\r\n      if (!item) continue;\r\n      if (BANNED_ITEMS.includes(item.typeId)) return flag(player, i);\r\n      if (FORBIDDEN_ITEMS.includes(item.typeId)) {\r\n        // Log action\r\n        new Log({\r\n          playerName: player.name,\r\n          message: `${player.name} Has obtained a Forbidden item: ${item.typeId}`,\r\n          protection: \"unobtainable\",\r\n        });\r\n        return inventory.setItem(i, AIR);\r\n      }\r\n      // Player is allowed to have this itemType\r\n      /**\r\n       * List of all enchantments that are valid on this item\r\n       */\r\n      let enchantments: string[] = [];\r\n      for (const enchantment of item.getComponent(\"enchantments\")\r\n        .enchantments) {\r\n        const MAX_LEVEL = getMaxEnchantmentLevel(enchantment);\r\n        if (enchantment.level > MAX_LEVEL) return flag(player, i);\r\n        if (enchantment.level < 1) return flag(player, i);\r\n        if (enchantments.includes(enchantment.type.id)) return flag(player, i);\r\n        // Enchantment Is valid\r\n        enchantments.push(enchantment.type.id);\r\n      }\r\n    }\r\n  });\r\n\r\n/**\r\n * Flags a player for a item they should not have\r\n * @param player player to flag\r\n * @param index the index of this item in the players inventory\r\n */\r\nfunction flag(player: Player, index: number) {\r\n  const inventory = player.getComponent(\"inventory\").container;\r\n  const item = inventory.getItem(index);\r\n  const data = protection.getConfig();\r\n  // Clear Item\r\n  if (data.clearItem) inventory.setItem(index, AIR);\r\n  // Log action\r\n  new Log({\r\n    playerName: player.name,\r\n    message: `${player.name} Has obtained a unobtainable item: ${item.typeId}`,\r\n    protection: \"unobtainable\",\r\n  });\r\n  // Violation\r\n  if (!data.banPlayer) return;\r\n  const violations = (ViolationCount.get(player) ?? 0) + 1;\r\n  ViolationCount.set(player, violations);\r\n  if (violations < data.violationCount) return;\r\n  new Ban(player, null, \"Possession of Unobtainable item\");\r\n}\r\n", "import {\r\n  MinecraftBlockTypes,\r\n  MinecraftEntityTypes,\r\n  MinecraftItemTypes,\r\n  Player,\r\n} from \"@minecraft/server\";\r\nimport { AIR } from \"../../../../rubedo/lib/Chest GUI/index.js\";\r\nimport { getGamemode } from \"../../utils.js\";\r\nimport { Protection } from \"../models/Protection.js\";\r\n\r\n/**\r\n * List of blocks to test\r\n */\r\nconst BLOCKS = [\r\n  MinecraftBlockTypes.chest.id,\r\n  MinecraftBlockTypes.trappedChest.id,\r\n  MinecraftBlockTypes.barrel.id,\r\n  MinecraftBlockTypes.dispenser.id,\r\n  MinecraftBlockTypes.dropper.id,\r\n  MinecraftBlockTypes.furnace.id,\r\n  MinecraftBlockTypes.litFurnace.id,\r\n  MinecraftBlockTypes.blastFurnace.id,\r\n  MinecraftBlockTypes.litBlastFurnace.id,\r\n  MinecraftBlockTypes.smoker.id,\r\n  MinecraftBlockTypes.litSmoker.id,\r\n  MinecraftBlockTypes.hopper.id,\r\n  MinecraftBlockTypes.beehive.id,\r\n  MinecraftBlockTypes.beeNest.id,\r\n  MinecraftBlockTypes.mobSpawner.id,\r\n];\r\n\r\n/**\r\n * List of items to test\r\n */\r\nconst CHEST_BOATS = [\r\n  MinecraftItemTypes.chestBoat.id,\r\n  MinecraftItemTypes.oakChestBoat.id,\r\n  MinecraftItemTypes.birchChestBoat.id,\r\n  MinecraftItemTypes.acaciaChestBoat.id,\r\n  MinecraftItemTypes.jungleChestBoat.id,\r\n  MinecraftItemTypes.spruceChestBoat.id,\r\n  MinecraftItemTypes.darkOakChestBoat.id,\r\n  MinecraftItemTypes.mangroveChestBoat.id,\r\n];\r\n\r\nnew Protection(\r\n  \"nbt\",\r\n  \"Blocks illegal nbt on items\",\r\n  \"textures/ui/icon_random.png\",\r\n  true\r\n)\r\n  .subscribe(\"blockPlace\", async ({ block }) => {\r\n    if (!BLOCKS.includes(block.typeId)) return;\r\n    const permutation = block.permutation;\r\n    await block.dimension.runCommandAsync(\r\n      `setblock ${block.x} ${block.y} ${block.z} ${block.typeId}`\r\n    );\r\n    block.setPermutation(permutation);\r\n  })\r\n  .subscribe(\"beforeItemUseOn\", (data) => {\r\n    if (!(data.source instanceof Player)) return;\r\n    if (!CHEST_BOATS.includes(data.item.typeId)) return;\r\n    data.cancel = true;\r\n    data.source.dimension.spawnEntity(\r\n      MinecraftEntityTypes.chestBoat.id,\r\n      data.blockLocation.above()\r\n    );\r\n    if (getGamemode(data.source) == \"creative\") return;\r\n    data.source\r\n      .getComponent(\"inventory\")\r\n      .container.setItem(data.source.selectedSlot, AIR);\r\n  });\r\n", "import {\r\n  MinecraftEffectTypes,\r\n  MinecraftItemTypes,\r\n  Player,\r\n  Vector3,\r\n} from \"@minecraft/server\";\r\nimport { PlayerLog } from \"../../../../rubedo/database/types/PlayerLog\";\r\nimport { ILocationLog, onPlayerMove } from \"../../../../rubedo/lib/Events/onPlayerMove\";\r\nimport {\r\n  ANTI_TP_DISTANCE_THRESHOLD,\r\n  MOVEMENT_CONSTANTS,\r\n  MOVEMENT_DISTANCE_THRESHOLD,\r\n  SPEED_EFFECT_INCREASE,\r\n  TAGS,\r\n} from \"../../config/movement\";\r\nimport { getRole } from \"../../utils\";\r\nimport { Protection } from \"../models/Protection\";\r\n\r\nconst violations = new PlayerLog<number>();\r\n\r\n/**\r\n * Calculates the distance from loc1 to loc2\r\n * @param {Location} loc1 location 1\r\n * @param {Location} loc2 location 2\r\n * @returns {number}\r\n */\r\nfunction distanceBetween(loc1: Vector3, loc2: Vector3): number {\r\n  return Math.hypot(loc2.x - loc1.x, loc2.z - loc1.z);\r\n}\r\n\r\n/**\r\n * Gets the speed offset based on a players SpeedEffect\r\n * @param player player to get\r\n */\r\nfunction getSpeedOffset(player: Player): number {\r\n  const speed = player.getEffect(MinecraftEffectTypes.speed)?.amplifier ?? 0;\r\n  return speed * SPEED_EFFECT_INCREASE;\r\n}\r\n\r\n/**\r\n * Checks if a distance traveled is big enough to be flagged\r\n * @param distance distance the player has traveled\r\n * @returns if this distance is bad\r\n */\r\nfunction isDistanceFlag(distance: number, player: Player): boolean {\r\n  const speedIntensity = getSpeedOffset(player);\r\n  const offset = MOVEMENT_CONSTANTS.run.distance + MOVEMENT_DISTANCE_THRESHOLD;\r\n  return distance > speedIntensity + offset;\r\n}\r\n\r\nfunction flag(player: Player, old: ILocationLog) {\r\n  const violationCount = (violations.get(player) ?? 0) + 1;\r\n  violations.set(player, violationCount);\r\n  onPlayerMove.delete(player); // Reset Players old location\r\n  if (violationCount < 3) return;\r\n  player.teleport(\r\n    old.location,\r\n    old.dimension,\r\n    player.rotation.x,\r\n    player.rotation.y\r\n  );\r\n}\r\n\r\n/**\r\n * The key used to unsubscribe from this event\r\n */\r\nlet onPlayerMoveSubKey: number = null;\r\n\r\nconst protection = new Protection<{\r\n  tpCheck: boolean;\r\n}>(\r\n  \"movement\",\r\n  \"Blocks illegal movements on players\",\r\n  \"textures/ui/move.png\",\r\n  true\r\n).setConfigDefault({\r\n  tpCheck: {\r\n    description: \"If teleports should be flagged\",\r\n    defaultValue: true,\r\n  },\r\n});\r\n\r\nprotection\r\n  .onEnable(() => {\r\n    const config = protection.getConfig();\r\n    onPlayerMoveSubKey = onPlayerMove.subscribe((player, old) => {\r\n      if (getRole(player) == \"admin\") return;\r\n      if (player.dimension.id != old.dimension.id) return;\r\n      if (player.getTags().some((tag) => TAGS.includes(tag))) return;\r\n      const distance = distanceBetween(player.location, old.location);\r\n      if (player.hasTag(`skip-movement-check`))\r\n        return player.removeTag(`skip-movement-check`);\r\n      if (distance > ANTI_TP_DISTANCE_THRESHOLD) {\r\n        if (!config.tpCheck) return;\r\n        // Anti Tp.\r\n        flag(player, old);\r\n      } else {\r\n        // Anti speed/jet pack\r\n        if (!isDistanceFlag(distance, player)) return;\r\n        // Flagged\r\n        flag(player, old);\r\n      }\r\n    });\r\n  })\r\n  .onDisable(() => {\r\n    onPlayerMove.unsubscribe(onPlayerMoveSubKey);\r\n  });\r\n\r\nprotection.subscribe(\"dataDrivenEntityTriggerEvent\", (data) => {\r\n  if (!(data.entity instanceof Player)) return;\r\n  if (data.id != \"on_death\") return;\r\n  onPlayerMove.delete(data.entity); // Reset Players old location\r\n});\r\n\r\nprotection.subscribe(\"projectileHit\", ({ projectile, source }) => {\r\n  if (projectile.typeId != MinecraftItemTypes.enderPearl.id) return;\r\n  if (!(source instanceof Player)) return;\r\n  onPlayerMove.delete(source); // Reset Players old location\r\n});\r\n\r\nprotection.subscribe(\"itemCompleteCharge\", ({ itemStack, source }) => {\r\n  if (itemStack.typeId != MinecraftItemTypes.chorusFruit.id) return;\r\n  if (!(source instanceof Player)) return;\r\n  onPlayerMove.delete(source); // Reset Players old location\r\n});\r\n", "import { Dimension, Player, system, Vector3, world } from \"@minecraft/server\";\r\nimport { PlayerLog } from \"../../database/types/PlayerLog\";\r\n\r\ntype onPlayerMoveCallback = (player: Player, data: ILocationLog) => void;\r\n\r\nconst CALLBACKS: {\r\n  [key: number]: {\r\n    callback: onPlayerMoveCallback;\r\n  };\r\n} = {};\r\n\r\nexport interface ILocationLog {\r\n  /**\r\n   * The Location this is\r\n   */\r\n  location: Vector3;\r\n  /**\r\n   * The dimension this location was in\r\n   */\r\n  dimension: Dimension;\r\n}\r\n\r\n/**\r\n * Checks if two vectors are the same\r\n * @param from first vector\r\n * @param to second vector\r\n */\r\nfunction vector3Equals(from: Vector3, to: Vector3): boolean {\r\n  if (from.x != to.x) return false;\r\n  if (from.y != to.y) return false;\r\n  if (from.z != to.z) return false;\r\n  return true;\r\n}\r\n\r\n/**\r\n * Stores Last Previous grounded location\r\n */\r\nexport const playerLocation = new PlayerLog<ILocationLog>();\r\n\r\nsystem.runSchedule(() => {\r\n  const sendCallback = (player: Player, data: ILocationLog) => {\r\n    for (const callback of Object.values(CALLBACKS)) {\r\n      callback.callback(player, data);\r\n    }\r\n  };\r\n  for (const player of world.getPlayers()) {\r\n    const oldLocation = playerLocation.get(player);\r\n    if (oldLocation) {\r\n      if (vector3Equals(player.location, oldLocation.location)) {\r\n        continue;\r\n      }\r\n    }\r\n    playerLocation.set(player, {\r\n      location: player.location,\r\n      dimension: player.dimension,\r\n    });\r\n    if (!oldLocation) continue;\r\n    sendCallback(player, oldLocation);\r\n  }\r\n});\r\n\r\nexport class onPlayerMove {\r\n  /**\r\n   * Subscribes to a callback to get notified when a player moves\r\n   * @param callback what to be called when one of these entity's inventory changes\r\n   * @returns the id that is used to unsubscribe\r\n   */\r\n  static subscribe(callback: onPlayerMoveCallback): number {\r\n    const key = Date.now();\r\n    CALLBACKS[key] = { callback: callback };\r\n    return key;\r\n    \r\n  }\r\n  static unsubscribe(key: number): void {\r\n    delete CALLBACKS[key];\r\n  }\r\n  /**\r\n   * Clears a players location\r\n   * @param player player to clear\r\n   */\r\n  static delete(player: Player): void {\r\n    playerLocation.delete(player);\r\n  }\r\n}\r\n", "/**\r\n * The leeway that the distances can be off before it flags\r\n */\r\nexport const MOVEMENT_DISTANCE_THRESHOLD = 0.80;\r\n\r\n/**\r\n * Constant of speeds when players are moving\r\n */\r\nexport const MOVEMENT_CONSTANTS = {\r\n  walk: {\r\n    velocity: 0.17 as const,\r\n    distance: 0.23 as const,\r\n  },\r\n  run: {\r\n    velocity: 0.19 as const,\r\n    distance: 0.35 as const,\r\n  },\r\n};\r\n\r\n/**\r\n * The distance increase per speed effect increase\r\n */\r\nexport const SPEED_EFFECT_INCREASE = 0.056;\r\n\r\n/**\r\n * if the distance is over this amount the system will automatically flag tp\r\n */\r\nexport const ANTI_TP_DISTANCE_THRESHOLD = 10;\r\n\r\n/**\r\n * If your \r\n */\r\nexport const TAGS = [\"gliding\", \"riding\"];\r\n", "import { MinecraftEffectTypes, Player, world } from \"@minecraft/server\";\r\nimport { getServerOwnerName, setRole, setServerOwner } from \"../../utils\";\r\n\r\nlet e = world.events.beforeDataDrivenEntityTriggerEvent.subscribe((data) => {\r\n  if (!(data.entity instanceof Player)) return;\r\n  if (data.id != \"rubedo:becomeAdmin\") return;\r\n  // Rubedo is now verified to be at the top\r\n  data.entity.removeTag(\"CHECK_PACK\");\r\n  const serverOwnerName = getServerOwnerName();\r\n  if (serverOwnerName) {\r\n    data.entity.playSound(\"note.bass\");\r\n    data.entity.tell(\r\n      `\u00A7cFailed to give server owner: \"${serverOwnerName}\" is already owner!`\r\n    );\r\n    return world.events.beforeDataDrivenEntityTriggerEvent.unsubscribe(e);\r\n  }\r\n  setRole(data.entity, \"admin\");\r\n  setServerOwner(data.entity);\r\n  data.entity.addEffect(MinecraftEffectTypes.blindness, 3, 255, true);\r\n  data.entity.tell(\r\n    `\u00A7aYou have now been set as the \"owner\" of this server. The command \"/function start\" will not do anything anymore, type \"-help\" for more information!`\r\n  );\r\n});\r\n", "import {\r\n  DynamicPropertiesDefinition,\r\n  MinecraftEntityTypes,\r\n  world,\r\n} from \"@minecraft/server\";\r\nimport { OBJECTIVES } from \"../../../../rubedo/config/objectives\";\r\n\r\nworld.events.worldInitialize.subscribe(({ propertyRegistry }) => {\r\n  let def2 = new DynamicPropertiesDefinition();\r\n  def2.defineString(\"role\", 30);\r\n  propertyRegistry.registerEntityTypeDynamicProperties(\r\n    def2,\r\n    MinecraftEntityTypes.player\r\n  );\r\n\r\n  let def3 = new DynamicPropertiesDefinition();\r\n  def3.defineString(\"worldsOwner\", 100);\r\n  def3.defineBoolean(\"isLockDown\");\r\n  propertyRegistry.registerWorldDynamicProperties(def3);\r\n\r\n  for (const obj of OBJECTIVES) {\r\n    world.scoreboard.addObjective(obj.objective, obj.displayName ?? \"\");\r\n  }\r\n});\r\n", "/*\n|--------------------------------------------------------------------------\n| Objectives\n|--------------------------------------------------------------------------\n|\n| This is a list of all objectives this pack uses\n| please add any objective to this list so it can be added at world creation\n| make sure to add them before sending pack to others and new worlds.\n|\n*/\ninterface IObjective {\n  objective: string;\n  displayName?: string;\n}\n\nexport const OBJECTIVES: Array<IObjective> = [];\n", "import { Location } from \"@minecraft/server\";\r\nimport \"./tables\";\r\nimport \"./protections\";\r\nimport \"./modules/commands/import\";\r\nimport \"./modules/managers/import\";\r\nimport \"./modules/pages/import\";\r\nimport \"./modules/protections/import\";\r\nimport \"./modules/events/import\";\r\n\r\n/**\r\n * Stores npc locations that are verified to allow NPC's to spawn in\r\n */\r\nexport let NPC_LOCATIONS: Array<Location> = [];\r\n\r\nexport function clearNpcLocations() {\r\n  NPC_LOCATIONS = [];\r\n}\r\n", "console.warn(`----- Importing Plugins -----`);\r\n\r\nimport \"./Anti-Cheat/index\";\r\n//import \"./ChatRanks/index\";\r\n//import \"./GlobalBans/index\";\r\n"],
  "mappings": "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",
  "names": ["system", "world", "world", "system", "world", "BlockLocation", "BlockLocation", "system", "e", "world", "e", "i", "world", "text", "e", "command", "world", "command", "v", "ItemStack", "MinecraftItemTypes", "system", "world", "system", "system", "CALLBACKS", "system", "Location", "e", "text", "system", "ItemStack", "MinecraftItemTypes", "world", "Player", "BlockLocation", "MinecraftBlockTypes", "BlockLocation", "BlockLocation", "MinecraftBlockTypes", "MinecraftItemTypes", "Player", "world", "BlockLocation", "MinecraftBlockTypes", "ItemStack", "MinecraftItemTypes", "system", "world", "world", "world", "system", "world", "MinecraftBlockTypes", "system", "world", "system", "system", "protection", "Player", "Player", "text", "text", "i", "ban", "ctx", "root", "root", "freeze", "root", "command", "world", "world", "root", "mute", "Location", "Location", "system", "system", "BlockLocation", "BlockLocation", "ROLES", "root", "protection", "keys", "world", "world", "root", "protection", "root", "system", "world", "CALLBACKS", "system", "world", "Location", "Location", "world", "CALLBACKS", "world", "BlockLocation", "system", "world", "system", "world", "BlockLocation", "world", "world", "MinecraftItemTypes", "world", "world", "MinecraftItemTypes", "e", "ctx", "Player", "MinecraftBlockTypes", "system", "world", "world", "system", "Player", "MinecraftBlockTypes", "BANNED_BLOCKS", "GameMode", "world", "world", "GameMode", "protection", "world", "world", "Location", "system", "CALLBACKS", "world", "system", "Location", "e", "ViolationCount", "protection", "ViolationCount", "protection", "ViolationCount", "protection", "BANNED_ITEMS", "violations", "MinecraftBlockTypes", "MinecraftItemTypes", "Player", "MinecraftBlockTypes", "MinecraftItemTypes", "Player", "MinecraftItemTypes", "Player", "system", "world", "CALLBACKS", "system", "sendCallback", "world", "flag", "protection", "Player", "MinecraftItemTypes", "MinecraftEffectTypes", "Player", "world", "world", "Player", "MinecraftEffectTypes", "DynamicPropertiesDefinition", "MinecraftEntityTypes", "world", "world", "DynamicPropertiesDefinition", "MinecraftEntityTypes", "system"]
}
